1,7c1,231
< ERROR(47): Cannot use array in position 1 in range of for statement.
< ERROR(47): Cannot use array in position 2 in range of for statement.
< ERROR(48): Cannot use array in position 1 in range of for statement.
< ERROR(48): Cannot use array in position 2 in range of for statement.
< ERROR(48): Cannot use array in position 3 in range of for statement.
< ERROR(48): Expecting type int in position 1 in range of for statement but got type bool.
< Number of errors: 6
---
> .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
> .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
> .   .   .   .   .   .   Child: 1  Const true of type bool [line: 13]
> .   .   .   .   .   .   Child: 1  Const true of type bool [line: 14]
> .   .   .   .   .   Child: 0  Const 15 of type int [line: 49]
> .   .   .   .   .   Child: 0  Const 3 of type int [line: 49]
> .   .   .   .   .   Child: 0  Const 7 of type int [line: 49]
> .   .   .   .   .   Child: 0  Id: a of type int [line: 11]
> .   .   .   .   .   Child: 0  Id: a of type int [line: 50]
> .   .   .   .   .   Child: 0  Id: aa of type int [line: 42]
> .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
> .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
> .   .   .   .   .   Child: 0  Id: ccc of type char [line: 83]
> .   .   .   .   .   Child: 0  Id: i of type int [line: 70]
> .   .   .   .   .   Child: 0  Id: z of type int [line: 51]
> .   .   .   .   .   Child: 0  Op: and of type bool [line: 13]
> .   .   .   .   .   Child: 0  Op: or of type bool [line: 14]
> .   .   .   .   .   Child: 1  Const 1 of type int [line: 42]
> .   .   .   .   .   Child: 1  Const 1111 of type int [line: 13]
> .   .   .   .   .   Child: 1  Const 1313 of type int [line: 14]
> .   .   .   .   .   Child: 1  Const 2 of type int [line: 83]
> .   .   .   .   .   Child: 1  Const 3 of type int [line: 49]
> .   .   .   .   .   Child: 1  Const 4 of type int [line: 49]
> .   .   .   .   .   Child: 1  Const 777 of type int [line: 11]
> .   .   .   .   .   Child: 1  Const 8 of type int [line: 49]
> .   .   .   .   .   Child: 1  Id: a of type int [line: 51]
> .   .   .   .   .   Child: 1  Id: i of type int [line: 70]
> .   .   .   .   .   Child: 1  Id: z of type int [line: 50]
> .   .   .   .   Child: 0  Call: ant of type int [line: 85]
> .   .   .   .   Child: 0  Const 999 of type int [line: 12]
> .   .   .   .   Child: 0  Id: a of type int [line: 10]
> .   .   .   .   Child: 0  Id: a of type int [line: 11]
> .   .   .   .   Child: 0  Id: a of type int [line: 9]
> .   .   .   .   Child: 0  Id: aa of type int [line: 47]
> .   .   .   .   Child: 0  Id: b of type bool [line: 15]
> .   .   .   .   Child: 0  Id: b of type bool [line: 48]
> .   .   .   .   Child: 0  Id: ba of type bool [line: 41]
> .   .   .   .   Child: 0  Id: ba of type bool [line: 48]
> .   .   .   .   Child: 0  Id: ca of type char [line: 42]
> .   .   .   .   Child: 0  Id: i of type int [line: 68]
> .   .   .   .   Child: 0  Id: z of type int [line: 47]
> .   .   .   .   Child: 0  Op: + of type int [line: 49]
> .   .   .   .   Child: 0  Op: >= of type bool [line: 11]
> .   .   .   .   Child: 0  Op: [ of type char [line: 83]
> .   .   .   .   Child: 0  Op: not of type bool [line: 13]
> .   .   .   .   Child: 0  Op: not of type bool [line: 14]
> .   .   .   .   Child: 0  Var: i of type int [line: 69]
> .   .   .   .   Child: 1  Assign: := of type int [line: 50]
> .   .   .   .   Child: 1  Assign: := of type int [line: 70]
> .   .   .   .   Child: 1  Const 'r' of type char [line: 83]
> .   .   .   .   Child: 1  Const 222 of type int [line: 9]
> .   .   .   .   Child: 1  Const 3 of type int [line: 68]
> .   .   .   .   Child: 1  Const 333 of type int [line: 10]
> .   .   .   .   Child: 1  Const 666 of type int [line: 11]
> .   .   .   .   Child: 1  Const 807 of type int [line: 85]
> .   .   .   .   Child: 1  Const 888 of type int [line: 11]
> .   .   .   .   Child: 1  Const true of type bool [line: 15]
> .   .   .   .   Child: 1  Id: a of type int [line: 12]
> .   .   .   .   Child: 1  Id: a of type int [line: 41]
> .   .   .   .   Child: 1  Id: aa of type int [line: 47]
> .   .   .   .   Child: 1  Id: aa of type int [line: 48]
> .   .   .   .   Child: 1  Id: b of type bool [line: 48]
> .   .   .   .   Child: 1  Id: z of type int [line: 47]
> .   .   .   .   Child: 1  Op: * of type int [line: 49]
> .   .   .   .   Child: 1  Op: [ of type int [line: 42]
> .   .   .   .   Child: 1  While [line: 13]
> .   .   .   .   Child: 1  While [line: 14]
> .   .   .   .   Child: 2  Const 1212 of type int [line: 13]
> .   .   .   .   Child: 2  Const 1414 of type int [line: 14]
> .   .   .   .   Child: 2  Const 555 of type int [line: 11]
> .   .   .   .   Child: 2  Id: aa of type int [line: 48]
> .   .   .   .   Child: 2  Op: % of type int [line: 49]
> .   .   .   .   Sibling: 1  Assign: := of type int [line: 51]
> .   .   .   Child: 0  Assign: := of type bool [line: 15]
> .   .   .   Child: 0  Call: ant of type int [line: 82]
> .   .   .   Child: 0  Const 'm' of type char [line: 64]
> .   .   .   Child: 0  Const 11 of type int [line: 45]
> .   .   .   Child: 0  Const 111 of type int [line: 1]
> .   .   .   Child: 0  Const 1818 of type int [line: 20]
> .   .   .   Child: 0  Const 2020 of type int [line: 22]
> .   .   .   Child: 0  Const 676 of type int [line: 80]
> .   .   .   Child: 0  Const false of type bool [line: 17]
> .   .   .   Child: 0  Const false of type bool [line: 3]
> .   .   .   Child: 0  Const is array "cows" of type char [line: 77]
> .   .   .   Child: 0  Id: a of type int [line: 19]
> .   .   .   Child: 0  Id: a of type int [line: 21]
> .   .   .   Child: 0  Id: a of type int [line: 23]
> .   .   .   Child: 0  Id: a of type int [line: 25]
> .   .   .   Child: 0  Id: a of type int [line: 26]
> .   .   .   Child: 0  Id: a of type int [line: 27]
> .   .   .   Child: 0  Id: a of type int [line: 28]
> .   .   .   Child: 0  Id: a of type int [line: 30]
> .   .   .   Child: 0  Id: a of type int [line: 32]
> .   .   .   Child: 0  Id: a of type int [line: 5]
> .   .   .   Child: 0  Id: aa of type int [line: 40]
> .   .   .   Child: 0  Id: aa of type int [line: 54]
> .   .   .   Child: 0  Id: aa of type int [line: 57]
> .   .   .   Child: 0  Id: aa of type int [line: 60]
> .   .   .   Child: 0  Id: b of type bool [line: 13]
> .   .   .   Child: 0  Id: b of type bool [line: 14]
> .   .   .   Child: 0  Id: b of type bool [line: 31]
> .   .   .   Child: 0  Id: b of type bool [line: 6]
> .   .   .   Child: 0  Id: ba of type bool [line: 44]
> .   .   .   Child: 0  Id: ba of type bool [line: 55]
> .   .   .   Child: 0  Id: ba of type bool [line: 58]
> .   .   .   Child: 0  Id: bbb of type bool [line: 83]
> .   .   .   Child: 0  Id: c of type char [line: 7]
> .   .   .   Child: 0  Id: ca of type char [line: 56]
> .   .   .   Child: 0  Id: ca of type char [line: 59]
> .   .   .   Child: 0  Id: ca of type char [line: 62]
> .   .   .   Child: 0  Op: + of type int [line: 85]
> .   .   .   Child: 0  Op: < of type bool [line: 10]
> .   .   .   Child: 0  Op: <= of type bool [line: 11]
> .   .   .   Child: 0  Op: = of type bool [line: 12]
> .   .   .   Child: 0  Op: = of type bool [line: 68]
> .   .   .   Child: 0  Op: > of type bool [line: 9]
> .   .   .   Child: 0  Op: [ of type bool [line: 41]
> .   .   .   Child: 0  Op: [ of type char [line: 42]
> .   .   .   Child: 0  Var: z of type int [line: 47]
> .   .   .   Child: 0  Var: z of type int [line: 48]
> .   .   .   Child: 0  Var: z of type int [line: 49]
> .   .   .   Child: 1  Break [line: 17]
> .   .   .   Child: 1  Compound [line: 68]
> .   .   .   Child: 1  Const 'z' of type char [line: 7]
> .   .   .   Child: 1  Const 1 of type int [line: 25]
> .   .   .   Child: 1  Const 1010 of type int [line: 12]
> .   .   .   Child: 1  Const 1616 of type int [line: 15]
> .   .   .   Child: 1  Const 1717 of type int [line: 19]
> .   .   .   Child: 1  Const 1919 of type int [line: 21]
> .   .   .   Child: 1  Const 2 of type int [line: 26]
> .   .   .   Child: 1  Const 2 of type int [line: 40]
> .   .   .   Child: 1  Const 2121 of type int [line: 23]
> .   .   .   Child: 1  Const 222 of type int [line: 5]
> .   .   .   Child: 1  Const 3 of type int [line: 27]
> .   .   .   Child: 1  Const 333 of type int [line: 9]
> .   .   .   Child: 1  Const 4 of type int [line: 28]
> .   .   .   Child: 1  Const 444 of type int [line: 10]
> .   .   .   Child: 1  Const is array "dogs are great" of type char [line: 62]
> .   .   .   Child: 1  Const true of type bool [line: 6]
> .   .   .   Child: 1  Id: a of type int [line: 20]
> .   .   .   Child: 1  Id: a of type int [line: 22]
> .   .   .   Child: 1  Id: aa of type int [line: 54]
> .   .   .   Child: 1  Id: aa of type int [line: 57]
> .   .   .   Child: 1  Id: aa of type int [line: 60]
> .   .   .   Child: 1  Id: b of type bool [line: 41]
> .   .   .   Child: 1  Id: ba of type bool [line: 55]
> .   .   .   Child: 1  Id: ba of type bool [line: 58]
> .   .   .   Child: 1  Id: c of type char [line: 42]
> .   .   .   Child: 1  Id: ca of type char [line: 56]
> .   .   .   Child: 1  Id: ca of type char [line: 59]
> .   .   .   Child: 1  If [line: 11]
> .   .   .   Child: 1  If [line: 13]
> .   .   .   Child: 1  If [line: 14]
> .   .   .   Child: 1  Op: >< of type bool [line: 83]
> .   .   .   Child: 1  Range [line: 47]
> .   .   .   Child: 1  Range [line: 48]
> .   .   .   Child: 1  Range [line: 49]
> .   .   .   Child: 2  Compound [line: 49]
> .   .   .   Child: 2  Const 1515 of type int [line: 14]
> .   .   .   Child: 2  Const 555 of type int [line: 10]
> .   .   .   Child: 2  Op: + of type int [line: 47]
> .   .   .   Child: 2  Op: and of type bool [line: 48]
> .   .   .   Sibling: 1  Call: cat of type char [line: 82]
> .   .   .   Sibling: 1  Const 'g' of type char [line: 80]
> .   .   Child: 0  Var: a of type int [line: 37]
> .   .   Child: 0  Var: b of type bool [line: 3]
> .   .   Child: 0  Var: bbb of type bool [line: 76]
> .   .   Child: 1  Assign: := of type int [line: 5]
> .   .   Child: 1  Call: ant of type int [line: 79]
> .   .   Child: 1  If [line: 68]
> .   .   Child: 1  Op: [ of type int [line: 40]
> .   .   Child: 1  Return [line: 1]
> .   .   Sibling: 1  Assign: := of type bool [line: 41]
> .   .   Sibling: 1  Assign: := of type bool [line: 6]
> .   .   Sibling: 1  Call: bat of type void [line: 80]
> .   .   Sibling: 1  Var: b of type bool [line: 37]
> .   .   Sibling: 1  Var: ccc is array of type char [line: 77]
> .   .   Sibling: 10  Op: >< of type bool [line: 56]
> .   .   Sibling: 10  While [line: 17]
> .   .   Sibling: 11  Op: + of type int [line: 19]
> .   .   Sibling: 11  Op: > of type bool [line: 57]
> .   .   Sibling: 12  Op: - of type int [line: 20]
> .   .   Sibling: 12  Op: >= of type bool [line: 58]
> .   .   Sibling: 13  Op: * of type int [line: 21]
> .   .   Sibling: 13  Op: < of type bool [line: 59]
> .   .   Sibling: 14  Op: / of type int [line: 22]
> .   .   Sibling: 14  Op: <= of type bool [line: 60]
> .   .   Sibling: 15  Assign: := of type char [line: 62]
> .   .   Sibling: 15  Op: % of type int [line: 23]
> .   .   Sibling: 16  Assign: += of type int [line: 25]
> .   .   Sibling: 16  Return [line: 64]
> .   .   Sibling: 17  Assign: -= of type int [line: 26]
> .   .   Sibling: 18  Assign: *= of type int [line: 27]
> .   .   Sibling: 19  Assign: /= of type int [line: 28]
> .   .   Sibling: 2  Assign: := of type char [line: 42]
> .   .   Sibling: 2  Assign: := of type char [line: 7]
> .   .   Sibling: 2  Call: cat of type char [line: 81]
> .   .   Sibling: 2  Var: c of type char [line: 37]
> .   .   Sibling: 20  Op: chsign of type int [line: 30]
> .   .   Sibling: 21  Op: not of type bool [line: 31]
> .   .   Sibling: 22  Op: ? of type int [line: 32]
> .   .   Sibling: 3  Call: bat of type void [line: 82]
> .   .   Sibling: 3  If [line: 9]
> .   .   Sibling: 3  Op: sizeof of type int [line: 44]
> .   .   Sibling: 3  Var: aa is array of type int [line: 38]
> .   .   Sibling: 4  Assign: := of type bool [line: 83]
> .   .   Sibling: 4  If [line: 10]
> .   .   Sibling: 4  Op: ? of type int [line: 45]
> .   .   Sibling: 4  Var: ba is array of type bool [line: 38]
> .   .   Sibling: 5  For [line: 47]
> .   .   Sibling: 5  If [line: 11]
> .   .   Sibling: 5  Return [line: 85]
> .   .   Sibling: 5  Var: ca is array of type char [line: 38]
> .   .   Sibling: 6  For [line: 48]
> .   .   Sibling: 6  While [line: 12]
> .   .   Sibling: 7  For [line: 49]
> .   .   Sibling: 7  If [line: 13]
> .   .   Sibling: 8  Assign: := of type int [line: 54]
> .   .   Sibling: 8  If [line: 14]
> .   .   Sibling: 9  If [line: 15]
> .   .   Sibling: 9  Op: = of type bool [line: 55]
> .   Child: 0  Parm: a of type int [line: 2]
> .   Child: 0  Parm: i of type int [line: 67]
> .   Child: 1  Compound [line: 1]
> .   Child: 1  Compound [line: 2]
> .   Child: 1  Compound [line: 36]
> .   Child: 1  Compound [line: 67]
> .   Child: 1  Compound [line: 75]
> .   Sibling: 1  Parm: c of type char [line: 2]
> Func: ant returns type int [line: 1]
> Number of errors: 0
8a233,236
> Sibling: 1  Func: bat returns type void [line: 2]
> Sibling: 2  Func: cat returns type char [line: 35]
> Sibling: 3  Func: dog returns type void [line: 67]
> Sibling: 4  Func: main returns type int [line: 74]
1,17c1,4
< .   .   .   .   Child: 0  Id: a of type int [line: 11]
< .   .   .   .   Child: 0  Id: b of type int [line: 12]
< .   .   .   .   Child: 0  Id: c of type int [line: 13]
< .   .   .   Child: 0  Id: c of type int [line: 9]
< .   .   .   Child: 0  Op: sizeof of type int [line: 11]
< .   .   .   Child: 0  Op: sizeof of type int [line: 12]
< .   .   .   Child: 0  Op: sizeof of type int [line: 13]
< .   .   .   Child: 1  Const 22 of type int [line: 9]
< .   .   Child: 0  Var: b is array of type int [line: 6]
< .   .   Child: 1  Op: [ of type int [line: 9]
< .   .   Sibling: 1  Const 999 of type int [line: 10]
< .   .   Sibling: 1  Var: c is array of type int [line: 7]
< .   .   Sibling: 2  Call: output of type void [line: 11]
< .   .   Sibling: 3  Call: output of type void [line: 12]
< .   .   Sibling: 4  Call: output of type void [line: 13]
< .   Child: 1  Compound [line: 5]
< Number of errors: 0
---
> ERROR(11): Symbol 'output' is not declared.
> ERROR(12): Symbol 'output' is not declared.
> ERROR(13): Symbol 'output' is not declared.
> Number of errors: 3
19,20d5
< Sibling: 1  Func: main returns type void [line: 4]
< Var: a is array of type int [line: 2]
1,72c1,11
< .   .   .   .   Child: 0  Id: gy of type bool [line: 11]
< .   .   .   .   Child: 0  Id: gy of type bool [line: 12]
< .   .   .   .   Child: 0  Id: py of type bool [line: 21]
< .   .   .   .   Child: 0  Id: py of type bool [line: 22]
< .   .   .   .   Child: 0  Id: sy of type bool [line: 25]
< .   .   .   .   Child: 0  Id: sy of type bool [line: 26]
< .   .   .   .   Child: 0  Id: y of type bool [line: 15]
< .   .   .   .   Child: 0  Id: y of type bool [line: 16]
< .   .   .   .   Child: 1  Const 9 of type int [line: 11]
< .   .   .   .   Child: 1  Const 9 of type int [line: 12]
< .   .   .   .   Child: 1  Const 9 of type int [line: 15]
< .   .   .   .   Child: 1  Const 9 of type int [line: 16]
< .   .   .   .   Child: 1  Const 9 of type int [line: 21]
< .   .   .   .   Child: 1  Const 9 of type int [line: 22]
< .   .   .   .   Child: 1  Const 9 of type int [line: 25]
< .   .   .   .   Child: 1  Const 9 of type int [line: 26]
< .   .   .   Child: 0  Id: gx of type bool [line: 10]
< .   .   .   Child: 0  Id: gx of type bool [line: 9]
< .   .   .   Child: 0  Id: px of type bool [line: 19]
< .   .   .   Child: 0  Id: px of type bool [line: 20]
< .   .   .   Child: 0  Id: sx of type bool [line: 23]
< .   .   .   Child: 0  Id: sx of type bool [line: 24]
< .   .   .   Child: 0  Id: x of type bool [line: 13]
< .   .   .   Child: 0  Id: x of type bool [line: 14]
< .   .   .   Child: 0  Id: zx of type bool [line: 34]
< .   .   .   Child: 0  Op: [ of type bool [line: 11]
< .   .   .   Child: 0  Op: [ of type bool [line: 12]
< .   .   .   Child: 0  Op: [ of type bool [line: 15]
< .   .   .   Child: 0  Op: [ of type bool [line: 16]
< .   .   .   Child: 0  Op: [ of type bool [line: 21]
< .   .   .   Child: 0  Op: [ of type bool [line: 22]
< .   .   .   Child: 0  Op: [ of type bool [line: 25]
< .   .   .   Child: 0  Op: [ of type bool [line: 26]
< .   .   .   Child: 1  Const true of type bool [line: 11]
< .   .   .   Child: 1  Const true of type bool [line: 13]
< .   .   .   Child: 1  Const true of type bool [line: 15]
< .   .   .   Child: 1  Const true of type bool [line: 19]
< .   .   .   Child: 1  Const true of type bool [line: 21]
< .   .   .   Child: 1  Const true of type bool [line: 23]
< .   .   .   Child: 1  Const true of type bool [line: 25]
< .   .   .   Child: 1  Const true of type bool [line: 9]
< .   .   .   Sibling: 1  Id: zy of type bool [line: 34]
< .   .   Child: 0  Var: x of type bool [line: 6]
< .   .   Child: 0  Var: zx of type bool [line: 33]
< .   .   Child: 1  Assign: := of type bool [line: 9]
< .   .   Child: 1  Call: esperanza of type void [line: 34]
< .   .   Sibling: 1  Call: outputb of type void [line: 10]
< .   .   Sibling: 1  Var: y is array of type bool [line: 6]
< .   .   Sibling: 1  Var: zy is array of type bool [line: 33]
< .   .   Sibling: 10  Call: outputb of type void [line: 20]
< .   .   Sibling: 11  Assign: := of type bool [line: 21]
< .   .   Sibling: 12  Call: outputb of type void [line: 22]
< .   .   Sibling: 13  Assign: := of type bool [line: 23]
< .   .   Sibling: 14  Call: outputb of type void [line: 24]
< .   .   Sibling: 15  Assign: := of type bool [line: 25]
< .   .   Sibling: 16  Call: outputb of type void [line: 26]
< .   .   Sibling: 17  Call: outnl of type void [line: 27]
< .   .   Sibling: 2  Assign: := of type bool [line: 11]
< .   .   Sibling: 2  Var: sx of type bool [line: 7]
< .   .   Sibling: 3  Call: outputb of type void [line: 12]
< .   .   Sibling: 3  Var: sy is array of type bool [line: 7]
< .   .   Sibling: 4  Assign: := of type bool [line: 13]
< .   .   Sibling: 5  Call: outputb of type void [line: 14]
< .   .   Sibling: 6  Assign: := of type bool [line: 15]
< .   .   Sibling: 7  Call: outputb of type void [line: 16]
< .   .   Sibling: 8  Call: outnl of type void [line: 17]
< .   .   Sibling: 9  Assign: := of type bool [line: 19]
< .   Child: 0  Parm: px of type bool [line: 4]
< .   Child: 1  Compound [line: 32]
< .   Child: 1  Compound [line: 5]
< .   Sibling: 1  Parm: py is array of type bool [line: 4]
< Number of errors: 0
---
> ERROR(10): Symbol 'outputb' is not declared.
> ERROR(12): Symbol 'outputb' is not declared.
> ERROR(14): Symbol 'outputb' is not declared.
> ERROR(16): Symbol 'outputb' is not declared.
> ERROR(17): Symbol 'outnl' is not declared.
> ERROR(20): Symbol 'outputb' is not declared.
> ERROR(22): Symbol 'outputb' is not declared.
> ERROR(24): Symbol 'outputb' is not declared.
> ERROR(26): Symbol 'outputb' is not declared.
> ERROR(27): Symbol 'outnl' is not declared.
> Number of errors: 10
74,77d12
< Sibling: 1  Var: gy is array of type bool [line: 2]
< Sibling: 2  Func: esperanza returns type void [line: 4]
< Sibling: 3  Func: main returns type void [line: 31]
< Var: gx of type bool [line: 2]
1,72c1,11
< .   .   .   .   Child: 0  Id: gy of type char [line: 11]
< .   .   .   .   Child: 0  Id: gy of type char [line: 12]
< .   .   .   .   Child: 0  Id: py of type char [line: 20]
< .   .   .   .   Child: 0  Id: py of type char [line: 21]
< .   .   .   .   Child: 0  Id: sy of type char [line: 24]
< .   .   .   .   Child: 0  Id: sy of type char [line: 25]
< .   .   .   .   Child: 0  Id: y of type char [line: 15]
< .   .   .   .   Child: 0  Id: y of type char [line: 16]
< .   .   .   .   Child: 1  Const 9 of type int [line: 11]
< .   .   .   .   Child: 1  Const 9 of type int [line: 12]
< .   .   .   .   Child: 1  Const 9 of type int [line: 15]
< .   .   .   .   Child: 1  Const 9 of type int [line: 16]
< .   .   .   .   Child: 1  Const 9 of type int [line: 20]
< .   .   .   .   Child: 1  Const 9 of type int [line: 21]
< .   .   .   .   Child: 1  Const 9 of type int [line: 24]
< .   .   .   .   Child: 1  Const 9 of type int [line: 25]
< .   .   .   Child: 0  Id: gx of type char [line: 10]
< .   .   .   Child: 0  Id: gx of type char [line: 9]
< .   .   .   Child: 0  Id: px of type char [line: 18]
< .   .   .   Child: 0  Id: px of type char [line: 19]
< .   .   .   Child: 0  Id: sx of type char [line: 22]
< .   .   .   Child: 0  Id: sx of type char [line: 23]
< .   .   .   Child: 0  Id: x of type char [line: 13]
< .   .   .   Child: 0  Id: x of type char [line: 14]
< .   .   .   Child: 0  Id: zx of type char [line: 33]
< .   .   .   Child: 0  Op: [ of type char [line: 11]
< .   .   .   Child: 0  Op: [ of type char [line: 12]
< .   .   .   Child: 0  Op: [ of type char [line: 15]
< .   .   .   Child: 0  Op: [ of type char [line: 16]
< .   .   .   Child: 0  Op: [ of type char [line: 20]
< .   .   .   Child: 0  Op: [ of type char [line: 21]
< .   .   .   Child: 0  Op: [ of type char [line: 24]
< .   .   .   Child: 0  Op: [ of type char [line: 25]
< .   .   .   Child: 1  Const 'a' of type char [line: 9]
< .   .   .   Child: 1  Const 'b' of type char [line: 11]
< .   .   .   Child: 1  Const 'c' of type char [line: 13]
< .   .   .   Child: 1  Const 'd' of type char [line: 15]
< .   .   .   Child: 1  Const 'e' of type char [line: 18]
< .   .   .   Child: 1  Const 'f' of type char [line: 20]
< .   .   .   Child: 1  Const 'f' of type char [line: 22]
< .   .   .   Child: 1  Const 'h' of type char [line: 24]
< .   .   .   Sibling: 1  Id: zy of type char [line: 33]
< .   .   Child: 0  Var: x of type char [line: 6]
< .   .   Child: 0  Var: zx of type char [line: 32]
< .   .   Child: 1  Assign: := of type char [line: 9]
< .   .   Child: 1  Call: esperanza of type void [line: 33]
< .   .   Sibling: 1  Call: outputc of type void [line: 10]
< .   .   Sibling: 1  Var: y is array of type char [line: 6]
< .   .   Sibling: 1  Var: zy is array of type char [line: 32]
< .   .   Sibling: 10  Call: outputc of type void [line: 19]
< .   .   Sibling: 11  Assign: := of type char [line: 20]
< .   .   Sibling: 12  Call: outputc of type void [line: 21]
< .   .   Sibling: 13  Assign: := of type char [line: 22]
< .   .   Sibling: 14  Call: outputc of type void [line: 23]
< .   .   Sibling: 15  Assign: := of type char [line: 24]
< .   .   Sibling: 16  Call: outputc of type void [line: 25]
< .   .   Sibling: 17  Call: outnl of type void [line: 26]
< .   .   Sibling: 2  Assign: := of type char [line: 11]
< .   .   Sibling: 2  Var: sx of type char [line: 7]
< .   .   Sibling: 3  Call: outputc of type void [line: 12]
< .   .   Sibling: 3  Var: sy is array of type char [line: 7]
< .   .   Sibling: 4  Assign: := of type char [line: 13]
< .   .   Sibling: 5  Call: outputc of type void [line: 14]
< .   .   Sibling: 6  Assign: := of type char [line: 15]
< .   .   Sibling: 7  Call: outputc of type void [line: 16]
< .   .   Sibling: 8  Call: outnl of type void [line: 17]
< .   .   Sibling: 9  Assign: := of type char [line: 18]
< .   Child: 0  Parm: px of type char [line: 4]
< .   Child: 1  Compound [line: 31]
< .   Child: 1  Compound [line: 5]
< .   Sibling: 1  Parm: py is array of type char [line: 4]
< Number of errors: 0
---
> ERROR(10): Symbol 'outputc' is not declared.
> ERROR(12): Symbol 'outputc' is not declared.
> ERROR(14): Symbol 'outputc' is not declared.
> ERROR(16): Symbol 'outputc' is not declared.
> ERROR(17): Symbol 'outnl' is not declared.
> ERROR(19): Symbol 'outputc' is not declared.
> ERROR(21): Symbol 'outputc' is not declared.
> ERROR(23): Symbol 'outputc' is not declared.
> ERROR(25): Symbol 'outputc' is not declared.
> ERROR(26): Symbol 'outnl' is not declared.
> Number of errors: 10
74,77d12
< Sibling: 1  Var: gy is array of type char [line: 2]
< Sibling: 2  Func: esperanza returns type void [line: 4]
< Sibling: 3  Func: main returns type void [line: 30]
< Var: gx of type char [line: 2]
1,7c1,231
< ERROR(47): Cannot use array in position 1 in range of for statement.
< ERROR(47): Cannot use array in position 2 in range of for statement.
< ERROR(48): Cannot use array in position 1 in range of for statement.
< ERROR(48): Cannot use array in position 2 in range of for statement.
< ERROR(48): Cannot use array in position 3 in range of for statement.
< ERROR(48): Expecting type int in position 1 in range of for statement but got type bool.
< Number of errors: 6
---
> .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
> .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
> .   .   .   .   .   .   Child: 1  Const true of type bool [line: 13]
> .   .   .   .   .   .   Child: 1  Const true of type bool [line: 14]
> .   .   .   .   .   Child: 0  Const 15 of type int [line: 49]
> .   .   .   .   .   Child: 0  Const 3 of type int [line: 49]
> .   .   .   .   .   Child: 0  Const 7 of type int [line: 49]
> .   .   .   .   .   Child: 0  Id: a of type int [line: 11]
> .   .   .   .   .   Child: 0  Id: a of type int [line: 50]
> .   .   .   .   .   Child: 0  Id: aa of type int [line: 42]
> .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
> .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
> .   .   .   .   .   Child: 0  Id: ccc of type char [line: 83]
> .   .   .   .   .   Child: 0  Id: i of type int [line: 70]
> .   .   .   .   .   Child: 0  Id: z of type int [line: 51]
> .   .   .   .   .   Child: 0  Op: and of type bool [line: 13]
> .   .   .   .   .   Child: 0  Op: or of type bool [line: 14]
> .   .   .   .   .   Child: 1  Const 1 of type int [line: 42]
> .   .   .   .   .   Child: 1  Const 1111 of type int [line: 13]
> .   .   .   .   .   Child: 1  Const 1313 of type int [line: 14]
> .   .   .   .   .   Child: 1  Const 2 of type int [line: 83]
> .   .   .   .   .   Child: 1  Const 3 of type int [line: 49]
> .   .   .   .   .   Child: 1  Const 4 of type int [line: 49]
> .   .   .   .   .   Child: 1  Const 777 of type int [line: 11]
> .   .   .   .   .   Child: 1  Const 8 of type int [line: 49]
> .   .   .   .   .   Child: 1  Id: a of type int [line: 51]
> .   .   .   .   .   Child: 1  Id: i of type int [line: 70]
> .   .   .   .   .   Child: 1  Id: z of type int [line: 50]
> .   .   .   .   Child: 0  Call: ant of type int [line: 85]
> .   .   .   .   Child: 0  Const 999 of type int [line: 12]
> .   .   .   .   Child: 0  Id: a of type int [line: 10]
> .   .   .   .   Child: 0  Id: a of type int [line: 11]
> .   .   .   .   Child: 0  Id: a of type int [line: 9]
> .   .   .   .   Child: 0  Id: aa of type int [line: 47]
> .   .   .   .   Child: 0  Id: b of type bool [line: 15]
> .   .   .   .   Child: 0  Id: b of type bool [line: 48]
> .   .   .   .   Child: 0  Id: ba of type bool [line: 41]
> .   .   .   .   Child: 0  Id: ba of type bool [line: 48]
> .   .   .   .   Child: 0  Id: ca of type char [line: 42]
> .   .   .   .   Child: 0  Id: i of type int [line: 68]
> .   .   .   .   Child: 0  Id: z of type int [line: 47]
> .   .   .   .   Child: 0  Op: + of type int [line: 49]
> .   .   .   .   Child: 0  Op: >= of type bool [line: 11]
> .   .   .   .   Child: 0  Op: [ of type char [line: 83]
> .   .   .   .   Child: 0  Op: not of type bool [line: 13]
> .   .   .   .   Child: 0  Op: not of type bool [line: 14]
> .   .   .   .   Child: 0  Var: i of type int [line: 69]
> .   .   .   .   Child: 1  Assign: := of type int [line: 50]
> .   .   .   .   Child: 1  Assign: := of type int [line: 70]
> .   .   .   .   Child: 1  Const 'r' of type char [line: 83]
> .   .   .   .   Child: 1  Const 222 of type int [line: 9]
> .   .   .   .   Child: 1  Const 3 of type int [line: 68]
> .   .   .   .   Child: 1  Const 333 of type int [line: 10]
> .   .   .   .   Child: 1  Const 666 of type int [line: 11]
> .   .   .   .   Child: 1  Const 807 of type int [line: 85]
> .   .   .   .   Child: 1  Const 888 of type int [line: 11]
> .   .   .   .   Child: 1  Const true of type bool [line: 15]
> .   .   .   .   Child: 1  Id: a of type int [line: 12]
> .   .   .   .   Child: 1  Id: a of type int [line: 41]
> .   .   .   .   Child: 1  Id: aa of type int [line: 47]
> .   .   .   .   Child: 1  Id: aa of type int [line: 48]
> .   .   .   .   Child: 1  Id: b of type bool [line: 48]
> .   .   .   .   Child: 1  Id: z of type int [line: 47]
> .   .   .   .   Child: 1  Op: * of type int [line: 49]
> .   .   .   .   Child: 1  Op: [ of type int [line: 42]
> .   .   .   .   Child: 1  While [line: 13]
> .   .   .   .   Child: 1  While [line: 14]
> .   .   .   .   Child: 2  Const 1212 of type int [line: 13]
> .   .   .   .   Child: 2  Const 1414 of type int [line: 14]
> .   .   .   .   Child: 2  Const 555 of type int [line: 11]
> .   .   .   .   Child: 2  Id: aa of type int [line: 48]
> .   .   .   .   Child: 2  Op: % of type int [line: 49]
> .   .   .   .   Sibling: 1  Assign: := of type int [line: 51]
> .   .   .   Child: 0  Assign: := of type bool [line: 15]
> .   .   .   Child: 0  Call: ant of type int [line: 82]
> .   .   .   Child: 0  Const 'm' of type char [line: 64]
> .   .   .   Child: 0  Const 11 of type int [line: 45]
> .   .   .   Child: 0  Const 111 of type int [line: 1]
> .   .   .   Child: 0  Const 1818 of type int [line: 20]
> .   .   .   Child: 0  Const 2020 of type int [line: 22]
> .   .   .   Child: 0  Const 676 of type int [line: 80]
> .   .   .   Child: 0  Const false of type bool [line: 17]
> .   .   .   Child: 0  Const false of type bool [line: 3]
> .   .   .   Child: 0  Const is array "cows" of type char [line: 77]
> .   .   .   Child: 0  Id: a of type int [line: 19]
> .   .   .   Child: 0  Id: a of type int [line: 21]
> .   .   .   Child: 0  Id: a of type int [line: 23]
> .   .   .   Child: 0  Id: a of type int [line: 25]
> .   .   .   Child: 0  Id: a of type int [line: 26]
> .   .   .   Child: 0  Id: a of type int [line: 27]
> .   .   .   Child: 0  Id: a of type int [line: 28]
> .   .   .   Child: 0  Id: a of type int [line: 30]
> .   .   .   Child: 0  Id: a of type int [line: 32]
> .   .   .   Child: 0  Id: a of type int [line: 5]
> .   .   .   Child: 0  Id: aa of type int [line: 40]
> .   .   .   Child: 0  Id: aa of type int [line: 54]
> .   .   .   Child: 0  Id: aa of type int [line: 57]
> .   .   .   Child: 0  Id: aa of type int [line: 60]
> .   .   .   Child: 0  Id: b of type bool [line: 13]
> .   .   .   Child: 0  Id: b of type bool [line: 14]
> .   .   .   Child: 0  Id: b of type bool [line: 31]
> .   .   .   Child: 0  Id: b of type bool [line: 6]
> .   .   .   Child: 0  Id: ba of type bool [line: 44]
> .   .   .   Child: 0  Id: ba of type bool [line: 55]
> .   .   .   Child: 0  Id: ba of type bool [line: 58]
> .   .   .   Child: 0  Id: bbb of type bool [line: 83]
> .   .   .   Child: 0  Id: c of type char [line: 7]
> .   .   .   Child: 0  Id: ca of type char [line: 56]
> .   .   .   Child: 0  Id: ca of type char [line: 59]
> .   .   .   Child: 0  Id: ca of type char [line: 62]
> .   .   .   Child: 0  Op: + of type int [line: 85]
> .   .   .   Child: 0  Op: < of type bool [line: 10]
> .   .   .   Child: 0  Op: <= of type bool [line: 11]
> .   .   .   Child: 0  Op: = of type bool [line: 12]
> .   .   .   Child: 0  Op: = of type bool [line: 68]
> .   .   .   Child: 0  Op: > of type bool [line: 9]
> .   .   .   Child: 0  Op: [ of type bool [line: 41]
> .   .   .   Child: 0  Op: [ of type char [line: 42]
> .   .   .   Child: 0  Var: z of type int [line: 47]
> .   .   .   Child: 0  Var: z of type int [line: 48]
> .   .   .   Child: 0  Var: z of type int [line: 49]
> .   .   .   Child: 1  Break [line: 17]
> .   .   .   Child: 1  Compound [line: 68]
> .   .   .   Child: 1  Const 'z' of type char [line: 7]
> .   .   .   Child: 1  Const 1 of type int [line: 25]
> .   .   .   Child: 1  Const 1010 of type int [line: 12]
> .   .   .   Child: 1  Const 1616 of type int [line: 15]
> .   .   .   Child: 1  Const 1717 of type int [line: 19]
> .   .   .   Child: 1  Const 1919 of type int [line: 21]
> .   .   .   Child: 1  Const 2 of type int [line: 26]
> .   .   .   Child: 1  Const 2 of type int [line: 40]
> .   .   .   Child: 1  Const 2121 of type int [line: 23]
> .   .   .   Child: 1  Const 222 of type int [line: 5]
> .   .   .   Child: 1  Const 3 of type int [line: 27]
> .   .   .   Child: 1  Const 333 of type int [line: 9]
> .   .   .   Child: 1  Const 4 of type int [line: 28]
> .   .   .   Child: 1  Const 444 of type int [line: 10]
> .   .   .   Child: 1  Const is array "dogs are great" of type char [line: 62]
> .   .   .   Child: 1  Const true of type bool [line: 6]
> .   .   .   Child: 1  Id: a of type int [line: 20]
> .   .   .   Child: 1  Id: a of type int [line: 22]
> .   .   .   Child: 1  Id: aa of type int [line: 54]
> .   .   .   Child: 1  Id: aa of type int [line: 57]
> .   .   .   Child: 1  Id: aa of type int [line: 60]
> .   .   .   Child: 1  Id: b of type bool [line: 41]
> .   .   .   Child: 1  Id: ba of type bool [line: 55]
> .   .   .   Child: 1  Id: ba of type bool [line: 58]
> .   .   .   Child: 1  Id: c of type char [line: 42]
> .   .   .   Child: 1  Id: ca of type char [line: 56]
> .   .   .   Child: 1  Id: ca of type char [line: 59]
> .   .   .   Child: 1  If [line: 11]
> .   .   .   Child: 1  If [line: 13]
> .   .   .   Child: 1  If [line: 14]
> .   .   .   Child: 1  Op: >< of type bool [line: 83]
> .   .   .   Child: 1  Range [line: 47]
> .   .   .   Child: 1  Range [line: 48]
> .   .   .   Child: 1  Range [line: 49]
> .   .   .   Child: 2  Compound [line: 49]
> .   .   .   Child: 2  Const 1515 of type int [line: 14]
> .   .   .   Child: 2  Const 555 of type int [line: 10]
> .   .   .   Child: 2  Op: + of type int [line: 47]
> .   .   .   Child: 2  Op: and of type bool [line: 48]
> .   .   .   Sibling: 1  Call: cat of type char [line: 82]
> .   .   .   Sibling: 1  Const 'g' of type char [line: 80]
> .   .   Child: 0  Var: a of type int [line: 37]
> .   .   Child: 0  Var: b of type bool [line: 3]
> .   .   Child: 0  Var: bbb of type bool [line: 76]
> .   .   Child: 1  Assign: := of type int [line: 5]
> .   .   Child: 1  Call: ant of type int [line: 79]
> .   .   Child: 1  If [line: 68]
> .   .   Child: 1  Op: [ of type int [line: 40]
> .   .   Child: 1  Return [line: 1]
> .   .   Sibling: 1  Assign: := of type bool [line: 41]
> .   .   Sibling: 1  Assign: := of type bool [line: 6]
> .   .   Sibling: 1  Call: bat of type void [line: 80]
> .   .   Sibling: 1  Var: b of type bool [line: 37]
> .   .   Sibling: 1  Var: ccc is array of type char [line: 77]
> .   .   Sibling: 10  Op: >< of type bool [line: 56]
> .   .   Sibling: 10  While [line: 17]
> .   .   Sibling: 11  Op: + of type int [line: 19]
> .   .   Sibling: 11  Op: > of type bool [line: 57]
> .   .   Sibling: 12  Op: - of type int [line: 20]
> .   .   Sibling: 12  Op: >= of type bool [line: 58]
> .   .   Sibling: 13  Op: * of type int [line: 21]
> .   .   Sibling: 13  Op: < of type bool [line: 59]
> .   .   Sibling: 14  Op: / of type int [line: 22]
> .   .   Sibling: 14  Op: <= of type bool [line: 60]
> .   .   Sibling: 15  Assign: := of type char [line: 62]
> .   .   Sibling: 15  Op: % of type int [line: 23]
> .   .   Sibling: 16  Assign: += of type int [line: 25]
> .   .   Sibling: 16  Return [line: 64]
> .   .   Sibling: 17  Assign: -= of type int [line: 26]
> .   .   Sibling: 18  Assign: *= of type int [line: 27]
> .   .   Sibling: 19  Assign: /= of type int [line: 28]
> .   .   Sibling: 2  Assign: := of type char [line: 42]
> .   .   Sibling: 2  Assign: := of type char [line: 7]
> .   .   Sibling: 2  Call: cat of type char [line: 81]
> .   .   Sibling: 2  Var: c of type char [line: 37]
> .   .   Sibling: 20  Op: chsign of type int [line: 30]
> .   .   Sibling: 21  Op: not of type bool [line: 31]
> .   .   Sibling: 22  Op: ? of type int [line: 32]
> .   .   Sibling: 3  Call: bat of type void [line: 82]
> .   .   Sibling: 3  If [line: 9]
> .   .   Sibling: 3  Op: sizeof of type int [line: 44]
> .   .   Sibling: 3  Var: aa is array of type int [line: 38]
> .   .   Sibling: 4  Assign: := of type bool [line: 83]
> .   .   Sibling: 4  If [line: 10]
> .   .   Sibling: 4  Op: ? of type int [line: 45]
> .   .   Sibling: 4  Var: ba is array of type bool [line: 38]
> .   .   Sibling: 5  For [line: 47]
> .   .   Sibling: 5  If [line: 11]
> .   .   Sibling: 5  Return [line: 85]
> .   .   Sibling: 5  Var: ca is array of type char [line: 38]
> .   .   Sibling: 6  For [line: 48]
> .   .   Sibling: 6  While [line: 12]
> .   .   Sibling: 7  For [line: 49]
> .   .   Sibling: 7  If [line: 13]
> .   .   Sibling: 8  Assign: := of type int [line: 54]
> .   .   Sibling: 8  If [line: 14]
> .   .   Sibling: 9  If [line: 15]
> .   .   Sibling: 9  Op: = of type bool [line: 55]
> .   Child: 0  Parm: a of type int [line: 2]
> .   Child: 0  Parm: i of type int [line: 67]
> .   Child: 1  Compound [line: 1]
> .   Child: 1  Compound [line: 2]
> .   Child: 1  Compound [line: 36]
> .   Child: 1  Compound [line: 67]
> .   Child: 1  Compound [line: 75]
> .   Sibling: 1  Parm: c of type char [line: 2]
> Func: ant returns type int [line: 1]
> Number of errors: 0
8a233,236
> Sibling: 1  Func: bat returns type void [line: 2]
> Sibling: 2  Func: cat returns type char [line: 35]
> Sibling: 3  Func: dog returns type void [line: 67]
> Sibling: 4  Func: main returns type int [line: 74]
1,76d0
< ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
< ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
< ERROR(102): ':=' requires operands of the same type but lhs is type char and rhs is type bool.
< ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
< ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
< ERROR(105): '+' requires operands of type int but lhs is of type void.
< ERROR(105): '+' requires operands of type int but rhs is of type bool.
< ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
< ERROR(107): '+' requires operands of type int but lhs is of type char.
< ERROR(11): '>' requires operands of the same type but lhs is type bool and rhs is type int.
< ERROR(110): Symbol 'mane' is already declared at line 91.
< ERROR(12): '<' requires operands of the same type but lhs is type bool and rhs is type int.
< ERROR(13): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
< ERROR(13): '>=' requires operands of the same type but lhs is type bool and rhs is type int.
< ERROR(14): '=' requires operands of the same type but lhs is type int and rhs is type bool.
< ERROR(15): 'and' requires operands of type bool but lhs is of type int.
< ERROR(15): Expecting Boolean test condition in if statement but got type int.
< ERROR(15): Unary 'not' requires an operand of type bool but was given type int.
< ERROR(16): 'or' requires operands of type bool but lhs is of type int.
< ERROR(16): Expecting Boolean test condition in if statement but got type int.
< ERROR(16): Unary 'not' requires an operand of type bool but was given type int.
< ERROR(17): ':=' requires operands of the same type but lhs is type int and rhs is type bool.
< ERROR(17): Expecting Boolean test condition in if statement but got type int.
< ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
< ERROR(21): '+' requires operands of type int but lhs is of type bool.
< ERROR(22): '-' requires operands of type int but rhs is of type bool.
< ERROR(23): '*' requires operands of type int but lhs is of type bool.
< ERROR(24): '/' requires operands of type int but rhs is of type bool.
< ERROR(25): '%' requires operands of type int but lhs is of type bool.
< ERROR(27): '+=' requires operands of type int but lhs is of type bool.
< ERROR(28): '-=' requires operands of type int but lhs is of type bool.
< ERROR(29): '*=' requires operands of type int but lhs is of type bool.
< ERROR(30): '/=' requires operands of type int but lhs is of type bool.
< ERROR(32): Unary 'chsign' requires an operand of type int but was given type bool.
< ERROR(33): Unary 'not' requires an operand of type bool but was given type int.
< ERROR(34): Unary '?' requires an operand of type int but was given type bool.
< ERROR(43): ':=' requires operands of the same type but lhs is type char and rhs is type int.
< ERROR(43): Array 'ba' should be indexed by type int but got type char.
< ERROR(44): ':=' requires operands of the same type but lhs is type int and rhs is type bool.
< ERROR(44): Array 'ca' should be indexed by type int but got type bool.
< ERROR(45): Array 'aa' should be indexed by type int but got type bool.
< ERROR(45): Array index is the unindexed array 'aa'.
< ERROR(46): Cannot index nonarray 'cat'.
< ERROR(46): Cannot use function 'cat' as a variable.
< ERROR(47): Cannot use function 'cat' as a variable.
< ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
< ERROR(54): ':=' requires operands of the same type but lhs is type char and rhs is type int.
< ERROR(65): ':=' requires operands of the same type but lhs is type int and rhs is type char.
< ERROR(67): Cannot return an array.
< ERROR(7): ':=' requires operands of the same type but lhs is type bool and rhs is type int.
< ERROR(79): Symbol 'a' is already declared at line 79.
< ERROR(8): ':=' requires operands of the same type but lhs is type int and rhs is type bool.
< ERROR(81): Symbol 'a' is already declared at line 79.
< ERROR(82): Symbol 'b' is not declared.
< ERROR(85): Symbol 'c' is not declared.
< ERROR(85): Symbol 'c' is not declared.
< ERROR(86): Symbol 'c' is not declared.
< ERROR(9): ':=' requires operands of the same type but lhs is type int and rhs is type char.
< ERROR(96): The operation '?' does not work with arrays.
< ERROR(96): Unary '?' requires an operand of type int but was given type char.
< ERROR(97): '/' requires operands of type int but lhs is of type char.
< ERROR(97): '/' requires operands of type int but rhs is of type char.
< ERROR(97): The operation '/' does not work with arrays.
< ERROR(98): The operation 'sizeof' only works with arrays.
< ERROR(99): 'bbb' is a simple variable and cannot be called.
< ERROR(LINKER): A function named 'main' with no parameters must be defined.
< Number of errors: 66
< Number of warnings: 8
< WARNING(42): Variable 'aa' may be uninitialized when used here.
< WARNING(43): Variable 'b' may be uninitialized when used here.
< WARNING(44): Variable 'c' may be uninitialized when used here.
< WARNING(73): Variable 'i' may be uninitialized when used here.
< WARNING(79): The function 'elk' seems not to be used.
< WARNING(84): The variable 'a' seems not to be used.
< WARNING(86): Variable 'b' may be uninitialized when used here.
< WARNING(91): The function 'mane' seems not to be used.
1,14d0
< ERROR(47): Cannot use array in position 1 in range of for statement.
< ERROR(47): Cannot use array in position 2 in range of for statement.
< ERROR(48): Cannot use array in position 1 in range of for statement.
< ERROR(48): Cannot use array in position 2 in range of for statement.
< ERROR(48): Cannot use array in position 3 in range of for statement.
< ERROR(48): Expecting type int in position 1 in range of for statement but got type bool.
< Number of errors: 6
< Number of warnings: 6
< WARNING(40): Variable 'aa' may be uninitialized when used here.
< WARNING(41): Variable 'b' may be uninitialized when used here.
< WARNING(42): Variable 'c' may be uninitialized when used here.
< WARNING(48): The variable 'z' seems not to be used.
< WARNING(67): The function 'dog' seems not to be used.
< WARNING(70): Variable 'i' may be uninitialized when used here.
1,7c1,231
< ERROR(47): Cannot use array in position 1 in range of for statement.
< ERROR(47): Cannot use array in position 2 in range of for statement.
< ERROR(48): Cannot use array in position 1 in range of for statement.
< ERROR(48): Cannot use array in position 2 in range of for statement.
< ERROR(48): Cannot use array in position 3 in range of for statement.
< ERROR(48): Expecting type int in position 1 in range of for statement but got type bool.
< Number of errors: 6
---
> .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
> .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
> .   .   .   .   .   .   Child: 1  Const true of type bool [line: 13]
> .   .   .   .   .   .   Child: 1  Const true of type bool [line: 14]
> .   .   .   .   .   Child: 0  Const 15 of type int [line: 49]
> .   .   .   .   .   Child: 0  Const 3 of type int [line: 49]
> .   .   .   .   .   Child: 0  Const 7 of type int [line: 49]
> .   .   .   .   .   Child: 0  Id: a of type int [line: 11]
> .   .   .   .   .   Child: 0  Id: a of type int [line: 50]
> .   .   .   .   .   Child: 0  Id: aa of type int [line: 42]
> .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
> .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
> .   .   .   .   .   Child: 0  Id: ccc of type char [line: 83]
> .   .   .   .   .   Child: 0  Id: i of type int [line: 70]
> .   .   .   .   .   Child: 0  Id: z of type int [line: 51]
> .   .   .   .   .   Child: 0  Op: and of type bool [line: 13]
> .   .   .   .   .   Child: 0  Op: or of type bool [line: 14]
> .   .   .   .   .   Child: 1  Const 1 of type int [line: 42]
> .   .   .   .   .   Child: 1  Const 1111 of type int [line: 13]
> .   .   .   .   .   Child: 1  Const 1313 of type int [line: 14]
> .   .   .   .   .   Child: 1  Const 2 of type int [line: 83]
> .   .   .   .   .   Child: 1  Const 3 of type int [line: 49]
> .   .   .   .   .   Child: 1  Const 4 of type int [line: 49]
> .   .   .   .   .   Child: 1  Const 777 of type int [line: 11]
> .   .   .   .   .   Child: 1  Const 8 of type int [line: 49]
> .   .   .   .   .   Child: 1  Id: a of type int [line: 51]
> .   .   .   .   .   Child: 1  Id: i of type int [line: 70]
> .   .   .   .   .   Child: 1  Id: z of type int [line: 50]
> .   .   .   .   Child: 0  Call: ant of type int [line: 85]
> .   .   .   .   Child: 0  Const 999 of type int [line: 12]
> .   .   .   .   Child: 0  Id: a of type int [line: 10]
> .   .   .   .   Child: 0  Id: a of type int [line: 11]
> .   .   .   .   Child: 0  Id: a of type int [line: 9]
> .   .   .   .   Child: 0  Id: aa of type int [line: 47]
> .   .   .   .   Child: 0  Id: b of type bool [line: 15]
> .   .   .   .   Child: 0  Id: b of type bool [line: 48]
> .   .   .   .   Child: 0  Id: ba of type bool [line: 41]
> .   .   .   .   Child: 0  Id: ba of type bool [line: 48]
> .   .   .   .   Child: 0  Id: ca of type char [line: 42]
> .   .   .   .   Child: 0  Id: i of type int [line: 68]
> .   .   .   .   Child: 0  Id: z of type int [line: 47]
> .   .   .   .   Child: 0  Op: + of type int [line: 49]
> .   .   .   .   Child: 0  Op: >= of type bool [line: 11]
> .   .   .   .   Child: 0  Op: [ of type char [line: 83]
> .   .   .   .   Child: 0  Op: not of type bool [line: 13]
> .   .   .   .   Child: 0  Op: not of type bool [line: 14]
> .   .   .   .   Child: 0  Var: i of type int [line: 69]
> .   .   .   .   Child: 1  Assign: := of type int [line: 50]
> .   .   .   .   Child: 1  Assign: := of type int [line: 70]
> .   .   .   .   Child: 1  Const 'r' of type char [line: 83]
> .   .   .   .   Child: 1  Const 222 of type int [line: 9]
> .   .   .   .   Child: 1  Const 3 of type int [line: 68]
> .   .   .   .   Child: 1  Const 333 of type int [line: 10]
> .   .   .   .   Child: 1  Const 666 of type int [line: 11]
> .   .   .   .   Child: 1  Const 807 of type int [line: 85]
> .   .   .   .   Child: 1  Const 888 of type int [line: 11]
> .   .   .   .   Child: 1  Const true of type bool [line: 15]
> .   .   .   .   Child: 1  Id: a of type int [line: 12]
> .   .   .   .   Child: 1  Id: a of type int [line: 41]
> .   .   .   .   Child: 1  Id: aa of type int [line: 47]
> .   .   .   .   Child: 1  Id: aa of type int [line: 48]
> .   .   .   .   Child: 1  Id: b of type bool [line: 48]
> .   .   .   .   Child: 1  Id: z of type int [line: 47]
> .   .   .   .   Child: 1  Op: * of type int [line: 49]
> .   .   .   .   Child: 1  Op: [ of type int [line: 42]
> .   .   .   .   Child: 1  While [line: 13]
> .   .   .   .   Child: 1  While [line: 14]
> .   .   .   .   Child: 2  Const 1212 of type int [line: 13]
> .   .   .   .   Child: 2  Const 1414 of type int [line: 14]
> .   .   .   .   Child: 2  Const 555 of type int [line: 11]
> .   .   .   .   Child: 2  Id: aa of type int [line: 48]
> .   .   .   .   Child: 2  Op: % of type int [line: 49]
> .   .   .   .   Sibling: 1  Assign: := of type int [line: 51]
> .   .   .   Child: 0  Assign: := of type bool [line: 15]
> .   .   .   Child: 0  Call: ant of type int [line: 82]
> .   .   .   Child: 0  Const 'm' of type char [line: 64]
> .   .   .   Child: 0  Const 11 of type int [line: 45]
> .   .   .   Child: 0  Const 111 of type int [line: 1]
> .   .   .   Child: 0  Const 1818 of type int [line: 20]
> .   .   .   Child: 0  Const 2020 of type int [line: 22]
> .   .   .   Child: 0  Const 676 of type int [line: 80]
> .   .   .   Child: 0  Const false of type bool [line: 17]
> .   .   .   Child: 0  Const false of type bool [line: 3]
> .   .   .   Child: 0  Const is array "cows" of type char [line: 77]
> .   .   .   Child: 0  Id: a of type int [line: 19]
> .   .   .   Child: 0  Id: a of type int [line: 21]
> .   .   .   Child: 0  Id: a of type int [line: 23]
> .   .   .   Child: 0  Id: a of type int [line: 25]
> .   .   .   Child: 0  Id: a of type int [line: 26]
> .   .   .   Child: 0  Id: a of type int [line: 27]
> .   .   .   Child: 0  Id: a of type int [line: 28]
> .   .   .   Child: 0  Id: a of type int [line: 30]
> .   .   .   Child: 0  Id: a of type int [line: 32]
> .   .   .   Child: 0  Id: a of type int [line: 5]
> .   .   .   Child: 0  Id: aa of type int [line: 40]
> .   .   .   Child: 0  Id: aa of type int [line: 54]
> .   .   .   Child: 0  Id: aa of type int [line: 57]
> .   .   .   Child: 0  Id: aa of type int [line: 60]
> .   .   .   Child: 0  Id: b of type bool [line: 13]
> .   .   .   Child: 0  Id: b of type bool [line: 14]
> .   .   .   Child: 0  Id: b of type bool [line: 31]
> .   .   .   Child: 0  Id: b of type bool [line: 6]
> .   .   .   Child: 0  Id: ba of type bool [line: 44]
> .   .   .   Child: 0  Id: ba of type bool [line: 55]
> .   .   .   Child: 0  Id: ba of type bool [line: 58]
> .   .   .   Child: 0  Id: bbb of type bool [line: 83]
> .   .   .   Child: 0  Id: c of type char [line: 7]
> .   .   .   Child: 0  Id: ca of type char [line: 56]
> .   .   .   Child: 0  Id: ca of type char [line: 59]
> .   .   .   Child: 0  Id: ca of type char [line: 62]
> .   .   .   Child: 0  Op: + of type int [line: 85]
> .   .   .   Child: 0  Op: < of type bool [line: 10]
> .   .   .   Child: 0  Op: <= of type bool [line: 11]
> .   .   .   Child: 0  Op: = of type bool [line: 12]
> .   .   .   Child: 0  Op: = of type bool [line: 68]
> .   .   .   Child: 0  Op: > of type bool [line: 9]
> .   .   .   Child: 0  Op: [ of type bool [line: 41]
> .   .   .   Child: 0  Op: [ of type char [line: 42]
> .   .   .   Child: 0  Var: z of type int [line: 47]
> .   .   .   Child: 0  Var: z of type int [line: 48]
> .   .   .   Child: 0  Var: z of type int [line: 49]
> .   .   .   Child: 1  Break [line: 17]
> .   .   .   Child: 1  Compound [line: 68]
> .   .   .   Child: 1  Const 'z' of type char [line: 7]
> .   .   .   Child: 1  Const 1 of type int [line: 25]
> .   .   .   Child: 1  Const 1010 of type int [line: 12]
> .   .   .   Child: 1  Const 1616 of type int [line: 15]
> .   .   .   Child: 1  Const 1717 of type int [line: 19]
> .   .   .   Child: 1  Const 1919 of type int [line: 21]
> .   .   .   Child: 1  Const 2 of type int [line: 26]
> .   .   .   Child: 1  Const 2 of type int [line: 40]
> .   .   .   Child: 1  Const 2121 of type int [line: 23]
> .   .   .   Child: 1  Const 222 of type int [line: 5]
> .   .   .   Child: 1  Const 3 of type int [line: 27]
> .   .   .   Child: 1  Const 333 of type int [line: 9]
> .   .   .   Child: 1  Const 4 of type int [line: 28]
> .   .   .   Child: 1  Const 444 of type int [line: 10]
> .   .   .   Child: 1  Const is array "dogs are great" of type char [line: 62]
> .   .   .   Child: 1  Const true of type bool [line: 6]
> .   .   .   Child: 1  Id: a of type int [line: 20]
> .   .   .   Child: 1  Id: a of type int [line: 22]
> .   .   .   Child: 1  Id: aa of type int [line: 54]
> .   .   .   Child: 1  Id: aa of type int [line: 57]
> .   .   .   Child: 1  Id: aa of type int [line: 60]
> .   .   .   Child: 1  Id: b of type bool [line: 41]
> .   .   .   Child: 1  Id: ba of type bool [line: 55]
> .   .   .   Child: 1  Id: ba of type bool [line: 58]
> .   .   .   Child: 1  Id: c of type char [line: 42]
> .   .   .   Child: 1  Id: ca of type char [line: 56]
> .   .   .   Child: 1  Id: ca of type char [line: 59]
> .   .   .   Child: 1  If [line: 11]
> .   .   .   Child: 1  If [line: 13]
> .   .   .   Child: 1  If [line: 14]
> .   .   .   Child: 1  Op: >< of type bool [line: 83]
> .   .   .   Child: 1  Range [line: 47]
> .   .   .   Child: 1  Range [line: 48]
> .   .   .   Child: 1  Range [line: 49]
> .   .   .   Child: 2  Compound [line: 49]
> .   .   .   Child: 2  Const 1515 of type int [line: 14]
> .   .   .   Child: 2  Const 555 of type int [line: 10]
> .   .   .   Child: 2  Op: + of type int [line: 47]
> .   .   .   Child: 2  Op: and of type bool [line: 48]
> .   .   .   Sibling: 1  Call: cat of type char [line: 82]
> .   .   .   Sibling: 1  Const 'g' of type char [line: 80]
> .   .   Child: 0  Var: a of type int [line: 37]
> .   .   Child: 0  Var: b of type bool [line: 3]
> .   .   Child: 0  Var: bbb of type bool [line: 76]
> .   .   Child: 1  Assign: := of type int [line: 5]
> .   .   Child: 1  Call: ant of type int [line: 79]
> .   .   Child: 1  If [line: 68]
> .   .   Child: 1  Op: [ of type int [line: 40]
> .   .   Child: 1  Return [line: 1]
> .   .   Sibling: 1  Assign: := of type bool [line: 41]
> .   .   Sibling: 1  Assign: := of type bool [line: 6]
> .   .   Sibling: 1  Call: bat of type void [line: 80]
> .   .   Sibling: 1  Var: b of type bool [line: 37]
> .   .   Sibling: 1  Var: ccc is array of type char [line: 77]
> .   .   Sibling: 10  Op: >< of type bool [line: 56]
> .   .   Sibling: 10  While [line: 17]
> .   .   Sibling: 11  Op: + of type int [line: 19]
> .   .   Sibling: 11  Op: > of type bool [line: 57]
> .   .   Sibling: 12  Op: - of type int [line: 20]
> .   .   Sibling: 12  Op: >= of type bool [line: 58]
> .   .   Sibling: 13  Op: * of type int [line: 21]
> .   .   Sibling: 13  Op: < of type bool [line: 59]
> .   .   Sibling: 14  Op: / of type int [line: 22]
> .   .   Sibling: 14  Op: <= of type bool [line: 60]
> .   .   Sibling: 15  Assign: := of type char [line: 62]
> .   .   Sibling: 15  Op: % of type int [line: 23]
> .   .   Sibling: 16  Assign: += of type int [line: 25]
> .   .   Sibling: 16  Return [line: 64]
> .   .   Sibling: 17  Assign: -= of type int [line: 26]
> .   .   Sibling: 18  Assign: *= of type int [line: 27]
> .   .   Sibling: 19  Assign: /= of type int [line: 28]
> .   .   Sibling: 2  Assign: := of type char [line: 42]
> .   .   Sibling: 2  Assign: := of type char [line: 7]
> .   .   Sibling: 2  Call: cat of type char [line: 81]
> .   .   Sibling: 2  Var: c of type char [line: 37]
> .   .   Sibling: 20  Op: chsign of type int [line: 30]
> .   .   Sibling: 21  Op: not of type bool [line: 31]
> .   .   Sibling: 22  Op: ? of type int [line: 32]
> .   .   Sibling: 3  Call: bat of type void [line: 82]
> .   .   Sibling: 3  If [line: 9]
> .   .   Sibling: 3  Op: sizeof of type int [line: 44]
> .   .   Sibling: 3  Var: aa is array of type int [line: 38]
> .   .   Sibling: 4  Assign: := of type bool [line: 83]
> .   .   Sibling: 4  If [line: 10]
> .   .   Sibling: 4  Op: ? of type int [line: 45]
> .   .   Sibling: 4  Var: ba is array of type bool [line: 38]
> .   .   Sibling: 5  For [line: 47]
> .   .   Sibling: 5  If [line: 11]
> .   .   Sibling: 5  Return [line: 85]
> .   .   Sibling: 5  Var: ca is array of type char [line: 38]
> .   .   Sibling: 6  For [line: 48]
> .   .   Sibling: 6  While [line: 12]
> .   .   Sibling: 7  For [line: 49]
> .   .   Sibling: 7  If [line: 13]
> .   .   Sibling: 8  Assign: := of type int [line: 54]
> .   .   Sibling: 8  If [line: 14]
> .   .   Sibling: 9  If [line: 15]
> .   .   Sibling: 9  Op: = of type bool [line: 55]
> .   Child: 0  Parm: a of type int [line: 2]
> .   Child: 0  Parm: i of type int [line: 67]
> .   Child: 1  Compound [line: 1]
> .   Child: 1  Compound [line: 2]
> .   Child: 1  Compound [line: 36]
> .   Child: 1  Compound [line: 67]
> .   Child: 1  Compound [line: 75]
> .   Sibling: 1  Parm: c of type char [line: 2]
> Func: ant returns type int [line: 1]
> Number of errors: 0
8a233,236
> Sibling: 1  Func: bat returns type void [line: 2]
> Sibling: 2  Func: cat returns type char [line: 35]
> Sibling: 3  Func: dog returns type void [line: 67]
> Sibling: 4  Func: main returns type int [line: 74]
117,118d116
< ERROR(33): Initializer for variable 'd' is not a constant expression.
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c150
< Number of errors: 151
---
> Number of errors: 149
5d4
< ERROR(17): Initializer for variable 'bob' is not a constant expression.
10a10
> ERROR(34): Initializer for variable 'ella' is not a constant expression.
10a11
> ERROR(34): Initializer for variable 'ella' is not a constant expression.
13c14
< Number of errors: 12
---
> Number of errors: 13
Binary files /dev/fd/63 and /dev/fd/62 differ
Binary files /dev/fd/63 and /dev/fd/62 differ
Binary files /dev/fd/63 and /dev/fd/62 differ
Binary files /dev/fd/63 and /dev/fd/62 differ
Binary files /dev/fd/63 and /dev/fd/62 differ
Binary files /dev/fd/63 and /dev/fd/62 differ
Binary files /dev/fd/63 and /dev/fd/62 differ
9c9
< Number of warnings: 5
---
> Number of warnings: 6
12a13
> WARNING(15): The variable 'z' seems not to be used.
9c9
< Number of warnings: 5
---
> Number of warnings: 6
12a13
> WARNING(15): The variable 'z' seems not to be used.
9c9
< Number of warnings: 5
---
> Number of warnings: 6
12a13
> WARNING(15): The variable 'z' seems not to be used.
44c44
< WARNING(10): Variable 'c' may be uninitialized when used here.
---
> WARNING(12): Variable 'ff' may be uninitialized when used here.
42c42
< Number of warnings: 5
---
> Number of warnings: 8
44a45,46
> WARNING(11): Variable 'd' may be uninitialized when used here.
> WARNING(12): Variable 'ff' may be uninitialized when used here.
46a49
> WARNING(9): Variable 'a' may be uninitialized when used here.
42c42
< Number of warnings: 5
---
> Number of warnings: 8
44a45,46
> WARNING(11): Variable 'd' may be uninitialized when used here.
> WARNING(12): Variable 'ff' may be uninitialized when used here.
46a49
> WARNING(9): Variable 'a' may be uninitialized when used here.
42c42
< Number of warnings: 5
---
> Number of warnings: 8
44a45,46
> WARNING(11): Variable 'd' may be uninitialized when used here.
> WARNING(12): Variable 'ff' may be uninitialized when used here.
46a49
> WARNING(9): Variable 'a' may be uninitialized when used here.
42c42
< Number of warnings: 5
---
> Number of warnings: 8
44a45,46
> WARNING(11): Variable 'd' may be uninitialized when used here.
> WARNING(12): Variable 'ff' may be uninitialized when used here.
46a49
> WARNING(9): Variable 'a' may be uninitialized when used here.
42c42
< Number of warnings: 5
---
> Number of warnings: 4
44d43
< WARNING(10): Variable 'c' may be uninitialized when used here.
42c42
< Number of warnings: 5
---
> Number of warnings: 8
44a45,46
> WARNING(11): Variable 'd' may be uninitialized when used here.
> WARNING(12): Variable 'ff' may be uninitialized when used here.
46a49
> WARNING(9): Variable 'a' may be uninitialized when used here.
1c1,2
< ERROR(2): Initializer for variable 's' is not a constant expression.
---
> ERROR(10): Initializer for variable 'bb' is not a constant expression.
> ERROR(10): Initializer for variable 'bc' is not a constant expression.
7c8
< Number of errors: 6
---
> Number of errors: 7
1c1,2
< ERROR(2): Initializer for variable 's' is not a constant expression.
---
> ERROR(10): Initializer for variable 'bb' is not a constant expression.
> ERROR(10): Initializer for variable 'bc' is not a constant expression.
7c8
< Number of errors: 6
---
> Number of errors: 7
0a1,2
> ERROR(10): Initializer for variable 'bb' is not a constant expression.
> ERROR(10): Initializer for variable 'bc' is not a constant expression.
7c9
< Number of errors: 6
---
> Number of errors: 8
7c7
< Number of warnings: 8
---
> Number of warnings: 9
12a13
> WARNING(5): The function 'dog' seems not to be used.
0a1
> ERROR(21): ':=' requires operands of the same type but lhs is type void and rhs is type int.
6c7
< Number of errors: 5
---
> Number of errors: 6
1,15d0
< ERROR(21): Cannot use function 'dog' as a variable.
< ERROR(22): Symbol 'klingon' is not declared.
< ERROR(23): Symbol 'klingon' is not declared.
< ERROR(23): Symbol 'romulon' is not declared.
< ERROR(LINKER): A function named 'main' with no parameters must be defined.
< Number of errors: 5
< Number of warnings: 8
< WARNING(1): The variable 'g' seems not to be used.
< WARNING(10): The variable 'w' seems not to be used.
< WARNING(12): The variable 'y' seems not to be used.
< WARNING(20): Expecting to return type int but function 'elk' has no return statement.
< WARNING(20): The function 'elk' seems not to be used.
< WARNING(8): Expecting to return type int but function 'main' has no return statement.
< WARNING(8): The parameter 'u' seems not to be used.
< WARNING(8): The parameter 'z' seems not to be used.
7c7
< Number of warnings: 8
---
> Number of warnings: 9
12a13
> WARNING(5): The function 'dog' seems not to be used.
1,15d0
< ERROR(21): Cannot use function 'dog' as a variable.
< ERROR(22): Symbol 'klingon' is not declared.
< ERROR(23): Symbol 'klingon' is not declared.
< ERROR(23): Symbol 'romulon' is not declared.
< ERROR(LINKER): A function named 'main' with no parameters must be defined.
< Number of errors: 5
< Number of warnings: 8
< WARNING(1): The variable 'g' seems not to be used.
< WARNING(10): The variable 'w' seems not to be used.
< WARNING(12): The variable 'y' seems not to be used.
< WARNING(20): Expecting to return type int but function 'elk' has no return statement.
< WARNING(20): The function 'elk' seems not to be used.
< WARNING(8): Expecting to return type int but function 'main' has no return statement.
< WARNING(8): The parameter 'u' seems not to be used.
< WARNING(8): The parameter 'z' seems not to be used.
7c7
< Number of warnings: 8
---
> Number of warnings: 9
12a13
> WARNING(5): The function 'dog' seems not to be used.
18d17
< ERROR(116): Cannot return an array.
84c83
< Number of errors: 83
---
> Number of errors: 82
0a1,2
> ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
> ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
1a4,5
> ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
> ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
3a8
> ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
11a17
> ERROR(15): Expecting Boolean test condition in if statement but got type int.
13a20
> ERROR(16): Expecting Boolean test condition in if statement but got type int.
15a23,24
> ERROR(17): Expecting Boolean test condition in if statement but got type int.
> ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
36a46
> ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
56,58c66,68
< ERROR(LINKER): A function named 'main()' must be defined.
< Number of errors: 56
< Number of warnings: 6
---
> ERROR(LINKER): A function named 'main' with no parameters must be defined.
> Number of errors: 66
> Number of warnings: 8
62a73
> WARNING(79): The function 'elk' seems not to be used.
64a76
> WARNING(91): The function 'mane' seems not to be used.
1,236c1,8
< .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   .   .   .   Child: 1  Const true of type bool [line: 13]
< .   .   .   .   .   .   Child: 1  Const true of type bool [line: 14]
< .   .   .   .   .   Child: 0  Const 15 of type int [line: 49]
< .   .   .   .   .   Child: 0  Const 3 of type int [line: 49]
< .   .   .   .   .   Child: 0  Const 7 of type int [line: 49]
< .   .   .   .   .   Child: 0  Id: a of type int [line: 11]
< .   .   .   .   .   Child: 0  Id: a of type int [line: 50]
< .   .   .   .   .   Child: 0  Id: aa of type int [line: 42]
< .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   .   .   Child: 0  Id: ccc of type char [line: 83]
< .   .   .   .   .   Child: 0  Id: i of type int [line: 70]
< .   .   .   .   .   Child: 0  Id: z of type int [line: 51]
< .   .   .   .   .   Child: 0  Op: and of type bool [line: 13]
< .   .   .   .   .   Child: 0  Op: or of type bool [line: 14]
< .   .   .   .   .   Child: 1  Const 1 of type int [line: 42]
< .   .   .   .   .   Child: 1  Const 1111 of type int [line: 13]
< .   .   .   .   .   Child: 1  Const 1313 of type int [line: 14]
< .   .   .   .   .   Child: 1  Const 2 of type int [line: 83]
< .   .   .   .   .   Child: 1  Const 3 of type int [line: 49]
< .   .   .   .   .   Child: 1  Const 4 of type int [line: 49]
< .   .   .   .   .   Child: 1  Const 777 of type int [line: 11]
< .   .   .   .   .   Child: 1  Const 8 of type int [line: 49]
< .   .   .   .   .   Child: 1  Id: a of type int [line: 51]
< .   .   .   .   .   Child: 1  Id: i of type int [line: 70]
< .   .   .   .   .   Child: 1  Id: z of type int [line: 50]
< .   .   .   .   Child: 0  Call: ant of type int [line: 85]
< .   .   .   .   Child: 0  Const 999 of type int [line: 12]
< .   .   .   .   Child: 0  Id: a of type int [line: 10]
< .   .   .   .   Child: 0  Id: a of type int [line: 11]
< .   .   .   .   Child: 0  Id: a of type int [line: 9]
< .   .   .   .   Child: 0  Id: aa of undefined type [line: 47]
< .   .   .   .   Child: 0  Id: b of type bool [line: 15]
< .   .   .   .   Child: 0  Id: b of type bool [line: 48]
< .   .   .   .   Child: 0  Id: ba of type bool [line: 41]
< .   .   .   .   Child: 0  Id: ba of undefined type [line: 48]
< .   .   .   .   Child: 0  Id: ca of type char [line: 42]
< .   .   .   .   Child: 0  Id: i of type int [line: 68]
< .   .   .   .   Child: 0  Id: z of type int [line: 47]
< .   .   .   .   Child: 0  Op: + of undefined type [line: 49]
< .   .   .   .   Child: 0  Op: >= of type bool [line: 11]
< .   .   .   .   Child: 0  Op: [ of type char [line: 83]
< .   .   .   .   Child: 0  Op: not of type bool [line: 13]
< .   .   .   .   Child: 0  Op: not of type bool [line: 14]
< .   .   .   .   Child: 0  Var: i of type int [line: 69]
< .   .   .   .   Child: 1  Assign: := of type int [line: 50]
< .   .   .   .   Child: 1  Assign: := of type int [line: 70]
< .   .   .   .   Child: 1  Const 'r' of type char [line: 83]
< .   .   .   .   Child: 1  Const 222 of type int [line: 9]
< .   .   .   .   Child: 1  Const 3 of type int [line: 68]
< .   .   .   .   Child: 1  Const 333 of type int [line: 10]
< .   .   .   .   Child: 1  Const 666 of type int [line: 11]
< .   .   .   .   Child: 1  Const 807 of type int [line: 85]
< .   .   .   .   Child: 1  Const 888 of type int [line: 11]
< .   .   .   .   Child: 1  Const true of type bool [line: 15]
< .   .   .   .   Child: 1  Id: a of type int [line: 12]
< .   .   .   .   Child: 1  Id: a of type int [line: 41]
< .   .   .   .   Child: 1  Id: aa of undefined type [line: 47]
< .   .   .   .   Child: 1  Id: aa of undefined type [line: 48]
< .   .   .   .   Child: 1  Id: b of type bool [line: 48]
< .   .   .   .   Child: 1  Id: z of type int [line: 47]
< .   .   .   .   Child: 1  Op: * of undefined type [line: 49]
< .   .   .   .   Child: 1  Op: [ of type int [line: 42]
< .   .   .   .   Child: 1  While [line: 13]
< .   .   .   .   Child: 1  While [line: 14]
< .   .   .   .   Child: 2  Const 1212 of type int [line: 13]
< .   .   .   .   Child: 2  Const 1414 of type int [line: 14]
< .   .   .   .   Child: 2  Const 555 of type int [line: 11]
< .   .   .   .   Child: 2  Id: aa of undefined type [line: 48]
< .   .   .   .   Child: 2  Op: % of undefined type [line: 49]
< .   .   .   .   Sibling: 1  Assign: := of type int [line: 51]
< .   .   .   Child: 0  Assign: := of type bool [line: 15]
< .   .   .   Child: 0  Call: ant of type int [line: 82]
< .   .   .   Child: 0  Const 'm' of type char [line: 64]
< .   .   .   Child: 0  Const 11 of type int [line: 45]
< .   .   .   Child: 0  Const 111 of type int [line: 1]
< .   .   .   Child: 0  Const 1818 of type int [line: 20]
< .   .   .   Child: 0  Const 2020 of type int [line: 22]
< .   .   .   Child: 0  Const 676 of type int [line: 80]
< .   .   .   Child: 0  Const false of type bool [line: 17]
< .   .   .   Child: 0  Const false of type bool [line: 3]
< .   .   .   Child: 0  Const is array "cows" of type char [line: 77]
< .   .   .   Child: 0  Id: a of type int [line: 19]
< .   .   .   Child: 0  Id: a of type int [line: 21]
< .   .   .   Child: 0  Id: a of type int [line: 23]
< .   .   .   Child: 0  Id: a of type int [line: 25]
< .   .   .   Child: 0  Id: a of type int [line: 26]
< .   .   .   Child: 0  Id: a of type int [line: 27]
< .   .   .   Child: 0  Id: a of type int [line: 28]
< .   .   .   Child: 0  Id: a of type int [line: 30]
< .   .   .   Child: 0  Id: a of type int [line: 32]
< .   .   .   Child: 0  Id: a of type int [line: 5]
< .   .   .   Child: 0  Id: aa of type int [line: 40]
< .   .   .   Child: 0  Id: aa of type int [line: 54]
< .   .   .   Child: 0  Id: aa of type int [line: 57]
< .   .   .   Child: 0  Id: aa of type int [line: 60]
< .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   Child: 0  Id: b of type bool [line: 31]
< .   .   .   Child: 0  Id: b of type bool [line: 6]
< .   .   .   Child: 0  Id: ba of type bool [line: 44]
< .   .   .   Child: 0  Id: ba of type bool [line: 55]
< .   .   .   Child: 0  Id: ba of type bool [line: 58]
< .   .   .   Child: 0  Id: bbb of type bool [line: 83]
< .   .   .   Child: 0  Id: c of type char [line: 7]
< .   .   .   Child: 0  Id: ca of type char [line: 56]
< .   .   .   Child: 0  Id: ca of type char [line: 59]
< .   .   .   Child: 0  Id: ca of type char [line: 62]
< .   .   .   Child: 0  Op: + of type int [line: 85]
< .   .   .   Child: 0  Op: < of type bool [line: 10]
< .   .   .   Child: 0  Op: <= of type bool [line: 11]
< .   .   .   Child: 0  Op: = of type bool [line: 12]
< .   .   .   Child: 0  Op: = of type bool [line: 68]
< .   .   .   Child: 0  Op: > of type bool [line: 9]
< .   .   .   Child: 0  Op: [ of type bool [line: 41]
< .   .   .   Child: 0  Op: [ of type char [line: 42]
< .   .   .   Child: 0  Var: z of type int [line: 47]
< .   .   .   Child: 0  Var: z of type int [line: 48]
< .   .   .   Child: 0  Var: z of type int [line: 49]
< .   .   .   Child: 1  Break [line: 17]
< .   .   .   Child: 1  Compound [line: 68]
< .   .   .   Child: 1  Const 'z' of type char [line: 7]
< .   .   .   Child: 1  Const 1 of type int [line: 25]
< .   .   .   Child: 1  Const 1010 of type int [line: 12]
< .   .   .   Child: 1  Const 1616 of type int [line: 15]
< .   .   .   Child: 1  Const 1717 of type int [line: 19]
< .   .   .   Child: 1  Const 1919 of type int [line: 21]
< .   .   .   Child: 1  Const 2 of type int [line: 26]
< .   .   .   Child: 1  Const 2 of type int [line: 40]
< .   .   .   Child: 1  Const 2121 of type int [line: 23]
< .   .   .   Child: 1  Const 222 of type int [line: 5]
< .   .   .   Child: 1  Const 3 of type int [line: 27]
< .   .   .   Child: 1  Const 333 of type int [line: 9]
< .   .   .   Child: 1  Const 4 of type int [line: 28]
< .   .   .   Child: 1  Const 444 of type int [line: 10]
< .   .   .   Child: 1  Const is array "dogs are great" of type char [line: 62]
< .   .   .   Child: 1  Const true of type bool [line: 6]
< .   .   .   Child: 1  Id: a of type int [line: 20]
< .   .   .   Child: 1  Id: a of type int [line: 22]
< .   .   .   Child: 1  Id: aa of type int [line: 54]
< .   .   .   Child: 1  Id: aa of type int [line: 57]
< .   .   .   Child: 1  Id: aa of type int [line: 60]
< .   .   .   Child: 1  Id: b of type bool [line: 41]
< .   .   .   Child: 1  Id: ba of type bool [line: 55]
< .   .   .   Child: 1  Id: ba of type bool [line: 58]
< .   .   .   Child: 1  Id: c of type char [line: 42]
< .   .   .   Child: 1  Id: ca of type char [line: 56]
< .   .   .   Child: 1  Id: ca of type char [line: 59]
< .   .   .   Child: 1  If [line: 11]
< .   .   .   Child: 1  If [line: 13]
< .   .   .   Child: 1  If [line: 14]
< .   .   .   Child: 1  Op: >< of type bool [line: 83]
< .   .   .   Child: 1  Range [line: 47]
< .   .   .   Child: 1  Range [line: 48]
< .   .   .   Child: 1  Range [line: 49]
< .   .   .   Child: 2  Compound [line: 49]
< .   .   .   Child: 2  Const 1515 of type int [line: 14]
< .   .   .   Child: 2  Const 555 of type int [line: 10]
< .   .   .   Child: 2  Op: + of type int [line: 47]
< .   .   .   Child: 2  Op: and of type bool [line: 48]
< .   .   .   Sibling: 1  Call: cat of type char [line: 82]
< .   .   .   Sibling: 1  Const 'g' of type char [line: 80]
< .   .   Child: 0  Var: a of type int [line: 37]
< .   .   Child: 0  Var: b of type bool [line: 3]
< .   .   Child: 0  Var: bbb of type bool [line: 76]
< .   .   Child: 1  Assign: := of type int [line: 5]
< .   .   Child: 1  Call: ant of type int [line: 79]
< .   .   Child: 1  If [line: 68]
< .   .   Child: 1  Op: [ of type int [line: 40]
< .   .   Child: 1  Return [line: 1]
< .   .   Sibling: 1  Assign: := of type bool [line: 41]
< .   .   Sibling: 1  Assign: := of type bool [line: 6]
< .   .   Sibling: 1  Call: bat of type void [line: 80]
< .   .   Sibling: 1  Var: b of type bool [line: 37]
< .   .   Sibling: 1  Var: ccc is array of type char [line: 77]
< .   .   Sibling: 10  Op: >< of type bool [line: 56]
< .   .   Sibling: 10  While [line: 17]
< .   .   Sibling: 11  Op: + of type int [line: 19]
< .   .   Sibling: 11  Op: > of type bool [line: 57]
< .   .   Sibling: 12  Op: - of type int [line: 20]
< .   .   Sibling: 12  Op: >= of type bool [line: 58]
< .   .   Sibling: 13  Op: * of type int [line: 21]
< .   .   Sibling: 13  Op: < of type bool [line: 59]
< .   .   Sibling: 14  Op: / of type int [line: 22]
< .   .   Sibling: 14  Op: <= of type bool [line: 60]
< .   .   Sibling: 15  Assign: := of type char [line: 62]
< .   .   Sibling: 15  Op: % of type int [line: 23]
< .   .   Sibling: 16  Assign: += of type int [line: 25]
< .   .   Sibling: 16  Return [line: 64]
< .   .   Sibling: 17  Assign: -= of type int [line: 26]
< .   .   Sibling: 18  Assign: *= of type int [line: 27]
< .   .   Sibling: 19  Assign: /= of type int [line: 28]
< .   .   Sibling: 2  Assign: := of type char [line: 42]
< .   .   Sibling: 2  Assign: := of type char [line: 7]
< .   .   Sibling: 2  Call: cat of type char [line: 81]
< .   .   Sibling: 2  Var: c of type char [line: 37]
< .   .   Sibling: 20  Op: chsign of type int [line: 30]
< .   .   Sibling: 21  Op: not of type bool [line: 31]
< .   .   Sibling: 22  Op: ? of type int [line: 32]
< .   .   Sibling: 3  Call: bat of type void [line: 82]
< .   .   Sibling: 3  If [line: 9]
< .   .   Sibling: 3  Op: sizeof of type int [line: 44]
< .   .   Sibling: 3  Var: aa is array of type int [line: 38]
< .   .   Sibling: 4  Assign: := of type bool [line: 83]
< .   .   Sibling: 4  If [line: 10]
< .   .   Sibling: 4  Op: ? of type int [line: 45]
< .   .   Sibling: 4  Var: ba is array of type bool [line: 38]
< .   .   Sibling: 5  For [line: 47]
< .   .   Sibling: 5  If [line: 11]
< .   .   Sibling: 5  Return [line: 85]
< .   .   Sibling: 5  Var: ca is array of type char [line: 38]
< .   .   Sibling: 6  For [line: 48]
< .   .   Sibling: 6  While [line: 12]
< .   .   Sibling: 7  For [line: 49]
< .   .   Sibling: 7  If [line: 13]
< .   .   Sibling: 8  Assign: := of type int [line: 54]
< .   .   Sibling: 8  If [line: 14]
< .   .   Sibling: 9  If [line: 15]
< .   .   Sibling: 9  Op: = of type bool [line: 55]
< .   Child: 0  Parm: a of type int [line: 2]
< .   Child: 0  Parm: i of type int [line: 67]
< .   Child: 1  Compound [line: 1]
< .   Child: 1  Compound [line: 2]
< .   Child: 1  Compound [line: 36]
< .   Child: 1  Compound [line: 67]
< .   Child: 1  Compound [line: 75]
< .   Sibling: 1  Parm: c of type char [line: 2]
< Func: ant returns type int [line: 1]
< Number of errors: 0
< Number of warnings: 5
< Sibling: 1  Func: bat returns type void [line: 2]
< Sibling: 2  Func: cat returns type char [line: 35]
< Sibling: 3  Func: dog returns type void [line: 67]
< Sibling: 4  Func: main returns type int [line: 74]
---
> ERROR(47): Cannot use array in position 1 in range of for statement.
> ERROR(47): Cannot use array in position 2 in range of for statement.
> ERROR(48): Cannot use array in position 1 in range of for statement.
> ERROR(48): Cannot use array in position 2 in range of for statement.
> ERROR(48): Cannot use array in position 3 in range of for statement.
> ERROR(48): Expecting type int in position 1 in range of for statement but got type bool.
> Number of errors: 6
> Number of warnings: 6
240a13
> WARNING(67): The function 'dog' seems not to be used.
0a1,2
> ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
> ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
1a4,5
> ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
> ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
3a8
> ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
11a17
> ERROR(15): Expecting Boolean test condition in if statement but got type int.
13a20
> ERROR(16): Expecting Boolean test condition in if statement but got type int.
15a23,24
> ERROR(17): Expecting Boolean test condition in if statement but got type int.
> ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
36a46
> ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
56,58c66,68
< ERROR(LINKER): A function named 'main()' must be defined.
< Number of errors: 56
< Number of warnings: 6
---
> ERROR(LINKER): A function named 'main' with no parameters must be defined.
> Number of errors: 66
> Number of warnings: 8
62a73
> WARNING(79): The function 'elk' seems not to be used.
64a76
> WARNING(91): The function 'mane' seems not to be used.
1,236c1,8
< .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   .   .   .   Child: 1  Const true of type bool [line: 13]
< .   .   .   .   .   .   Child: 1  Const true of type bool [line: 14]
< .   .   .   .   .   Child: 0  Const 15 of type int [line: 49]
< .   .   .   .   .   Child: 0  Const 3 of type int [line: 49]
< .   .   .   .   .   Child: 0  Const 7 of type int [line: 49]
< .   .   .   .   .   Child: 0  Id: a of type int [line: 11]
< .   .   .   .   .   Child: 0  Id: a of type int [line: 50]
< .   .   .   .   .   Child: 0  Id: aa of type int [line: 42]
< .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   .   .   Child: 0  Id: ccc of type char [line: 83]
< .   .   .   .   .   Child: 0  Id: i of type int [line: 70]
< .   .   .   .   .   Child: 0  Id: z of type int [line: 51]
< .   .   .   .   .   Child: 0  Op: and of type bool [line: 13]
< .   .   .   .   .   Child: 0  Op: or of type bool [line: 14]
< .   .   .   .   .   Child: 1  Const 1 of type int [line: 42]
< .   .   .   .   .   Child: 1  Const 1111 of type int [line: 13]
< .   .   .   .   .   Child: 1  Const 1313 of type int [line: 14]
< .   .   .   .   .   Child: 1  Const 2 of type int [line: 83]
< .   .   .   .   .   Child: 1  Const 3 of type int [line: 49]
< .   .   .   .   .   Child: 1  Const 4 of type int [line: 49]
< .   .   .   .   .   Child: 1  Const 777 of type int [line: 11]
< .   .   .   .   .   Child: 1  Const 8 of type int [line: 49]
< .   .   .   .   .   Child: 1  Id: a of type int [line: 51]
< .   .   .   .   .   Child: 1  Id: i of type int [line: 70]
< .   .   .   .   .   Child: 1  Id: z of type int [line: 50]
< .   .   .   .   Child: 0  Call: ant of type int [line: 85]
< .   .   .   .   Child: 0  Const 999 of type int [line: 12]
< .   .   .   .   Child: 0  Id: a of type int [line: 10]
< .   .   .   .   Child: 0  Id: a of type int [line: 11]
< .   .   .   .   Child: 0  Id: a of type int [line: 9]
< .   .   .   .   Child: 0  Id: aa of undefined type [line: 47]
< .   .   .   .   Child: 0  Id: b of type bool [line: 15]
< .   .   .   .   Child: 0  Id: b of type bool [line: 48]
< .   .   .   .   Child: 0  Id: ba of type bool [line: 41]
< .   .   .   .   Child: 0  Id: ba of undefined type [line: 48]
< .   .   .   .   Child: 0  Id: ca of type char [line: 42]
< .   .   .   .   Child: 0  Id: i of type int [line: 68]
< .   .   .   .   Child: 0  Id: z of type int [line: 47]
< .   .   .   .   Child: 0  Op: + of undefined type [line: 49]
< .   .   .   .   Child: 0  Op: >= of type bool [line: 11]
< .   .   .   .   Child: 0  Op: [ of type char [line: 83]
< .   .   .   .   Child: 0  Op: not of type bool [line: 13]
< .   .   .   .   Child: 0  Op: not of type bool [line: 14]
< .   .   .   .   Child: 0  Var: i of type int [line: 69]
< .   .   .   .   Child: 1  Assign: := of type int [line: 50]
< .   .   .   .   Child: 1  Assign: := of type int [line: 70]
< .   .   .   .   Child: 1  Const 'r' of type char [line: 83]
< .   .   .   .   Child: 1  Const 222 of type int [line: 9]
< .   .   .   .   Child: 1  Const 3 of type int [line: 68]
< .   .   .   .   Child: 1  Const 333 of type int [line: 10]
< .   .   .   .   Child: 1  Const 666 of type int [line: 11]
< .   .   .   .   Child: 1  Const 807 of type int [line: 85]
< .   .   .   .   Child: 1  Const 888 of type int [line: 11]
< .   .   .   .   Child: 1  Const true of type bool [line: 15]
< .   .   .   .   Child: 1  Id: a of type int [line: 12]
< .   .   .   .   Child: 1  Id: a of type int [line: 41]
< .   .   .   .   Child: 1  Id: aa of undefined type [line: 47]
< .   .   .   .   Child: 1  Id: aa of undefined type [line: 48]
< .   .   .   .   Child: 1  Id: b of type bool [line: 48]
< .   .   .   .   Child: 1  Id: z of type int [line: 47]
< .   .   .   .   Child: 1  Op: * of undefined type [line: 49]
< .   .   .   .   Child: 1  Op: [ of type int [line: 42]
< .   .   .   .   Child: 1  While [line: 13]
< .   .   .   .   Child: 1  While [line: 14]
< .   .   .   .   Child: 2  Const 1212 of type int [line: 13]
< .   .   .   .   Child: 2  Const 1414 of type int [line: 14]
< .   .   .   .   Child: 2  Const 555 of type int [line: 11]
< .   .   .   .   Child: 2  Id: aa of undefined type [line: 48]
< .   .   .   .   Child: 2  Op: % of undefined type [line: 49]
< .   .   .   .   Sibling: 1  Assign: := of type int [line: 51]
< .   .   .   Child: 0  Assign: := of type bool [line: 15]
< .   .   .   Child: 0  Call: ant of type int [line: 82]
< .   .   .   Child: 0  Const 'm' of type char [line: 64]
< .   .   .   Child: 0  Const 11 of type int [line: 45]
< .   .   .   Child: 0  Const 111 of type int [line: 1]
< .   .   .   Child: 0  Const 1818 of type int [line: 20]
< .   .   .   Child: 0  Const 2020 of type int [line: 22]
< .   .   .   Child: 0  Const 676 of type int [line: 80]
< .   .   .   Child: 0  Const false of type bool [line: 17]
< .   .   .   Child: 0  Const false of type bool [line: 3]
< .   .   .   Child: 0  Const is array "cows" of type char [line: 77]
< .   .   .   Child: 0  Id: a of type int [line: 19]
< .   .   .   Child: 0  Id: a of type int [line: 21]
< .   .   .   Child: 0  Id: a of type int [line: 23]
< .   .   .   Child: 0  Id: a of type int [line: 25]
< .   .   .   Child: 0  Id: a of type int [line: 26]
< .   .   .   Child: 0  Id: a of type int [line: 27]
< .   .   .   Child: 0  Id: a of type int [line: 28]
< .   .   .   Child: 0  Id: a of type int [line: 30]
< .   .   .   Child: 0  Id: a of type int [line: 32]
< .   .   .   Child: 0  Id: a of type int [line: 5]
< .   .   .   Child: 0  Id: aa of type int [line: 40]
< .   .   .   Child: 0  Id: aa of type int [line: 54]
< .   .   .   Child: 0  Id: aa of type int [line: 57]
< .   .   .   Child: 0  Id: aa of type int [line: 60]
< .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   Child: 0  Id: b of type bool [line: 31]
< .   .   .   Child: 0  Id: b of type bool [line: 6]
< .   .   .   Child: 0  Id: ba of type bool [line: 44]
< .   .   .   Child: 0  Id: ba of type bool [line: 55]
< .   .   .   Child: 0  Id: ba of type bool [line: 58]
< .   .   .   Child: 0  Id: bbb of type bool [line: 83]
< .   .   .   Child: 0  Id: c of type char [line: 7]
< .   .   .   Child: 0  Id: ca of type char [line: 56]
< .   .   .   Child: 0  Id: ca of type char [line: 59]
< .   .   .   Child: 0  Id: ca of type char [line: 62]
< .   .   .   Child: 0  Op: + of type int [line: 85]
< .   .   .   Child: 0  Op: < of type bool [line: 10]
< .   .   .   Child: 0  Op: <= of type bool [line: 11]
< .   .   .   Child: 0  Op: = of type bool [line: 12]
< .   .   .   Child: 0  Op: = of type bool [line: 68]
< .   .   .   Child: 0  Op: > of type bool [line: 9]
< .   .   .   Child: 0  Op: [ of type bool [line: 41]
< .   .   .   Child: 0  Op: [ of type char [line: 42]
< .   .   .   Child: 0  Var: z of type int [line: 47]
< .   .   .   Child: 0  Var: z of type int [line: 48]
< .   .   .   Child: 0  Var: z of type int [line: 49]
< .   .   .   Child: 1  Break [line: 17]
< .   .   .   Child: 1  Compound [line: 68]
< .   .   .   Child: 1  Const 'z' of type char [line: 7]
< .   .   .   Child: 1  Const 1 of type int [line: 25]
< .   .   .   Child: 1  Const 1010 of type int [line: 12]
< .   .   .   Child: 1  Const 1616 of type int [line: 15]
< .   .   .   Child: 1  Const 1717 of type int [line: 19]
< .   .   .   Child: 1  Const 1919 of type int [line: 21]
< .   .   .   Child: 1  Const 2 of type int [line: 26]
< .   .   .   Child: 1  Const 2 of type int [line: 40]
< .   .   .   Child: 1  Const 2121 of type int [line: 23]
< .   .   .   Child: 1  Const 222 of type int [line: 5]
< .   .   .   Child: 1  Const 3 of type int [line: 27]
< .   .   .   Child: 1  Const 333 of type int [line: 9]
< .   .   .   Child: 1  Const 4 of type int [line: 28]
< .   .   .   Child: 1  Const 444 of type int [line: 10]
< .   .   .   Child: 1  Const is array "dogs are great" of type char [line: 62]
< .   .   .   Child: 1  Const true of type bool [line: 6]
< .   .   .   Child: 1  Id: a of type int [line: 20]
< .   .   .   Child: 1  Id: a of type int [line: 22]
< .   .   .   Child: 1  Id: aa of type int [line: 54]
< .   .   .   Child: 1  Id: aa of type int [line: 57]
< .   .   .   Child: 1  Id: aa of type int [line: 60]
< .   .   .   Child: 1  Id: b of type bool [line: 41]
< .   .   .   Child: 1  Id: ba of type bool [line: 55]
< .   .   .   Child: 1  Id: ba of type bool [line: 58]
< .   .   .   Child: 1  Id: c of type char [line: 42]
< .   .   .   Child: 1  Id: ca of type char [line: 56]
< .   .   .   Child: 1  Id: ca of type char [line: 59]
< .   .   .   Child: 1  If [line: 11]
< .   .   .   Child: 1  If [line: 13]
< .   .   .   Child: 1  If [line: 14]
< .   .   .   Child: 1  Op: >< of type bool [line: 83]
< .   .   .   Child: 1  Range [line: 47]
< .   .   .   Child: 1  Range [line: 48]
< .   .   .   Child: 1  Range [line: 49]
< .   .   .   Child: 2  Compound [line: 49]
< .   .   .   Child: 2  Const 1515 of type int [line: 14]
< .   .   .   Child: 2  Const 555 of type int [line: 10]
< .   .   .   Child: 2  Op: + of type int [line: 47]
< .   .   .   Child: 2  Op: and of type bool [line: 48]
< .   .   .   Sibling: 1  Call: cat of type char [line: 82]
< .   .   .   Sibling: 1  Const 'g' of type char [line: 80]
< .   .   Child: 0  Var: a of type int [line: 37]
< .   .   Child: 0  Var: b of type bool [line: 3]
< .   .   Child: 0  Var: bbb of type bool [line: 76]
< .   .   Child: 1  Assign: := of type int [line: 5]
< .   .   Child: 1  Call: ant of type int [line: 79]
< .   .   Child: 1  If [line: 68]
< .   .   Child: 1  Op: [ of type int [line: 40]
< .   .   Child: 1  Return [line: 1]
< .   .   Sibling: 1  Assign: := of type bool [line: 41]
< .   .   Sibling: 1  Assign: := of type bool [line: 6]
< .   .   Sibling: 1  Call: bat of type void [line: 80]
< .   .   Sibling: 1  Var: b of type bool [line: 37]
< .   .   Sibling: 1  Var: ccc is array of type char [line: 77]
< .   .   Sibling: 10  Op: >< of type bool [line: 56]
< .   .   Sibling: 10  While [line: 17]
< .   .   Sibling: 11  Op: + of type int [line: 19]
< .   .   Sibling: 11  Op: > of type bool [line: 57]
< .   .   Sibling: 12  Op: - of type int [line: 20]
< .   .   Sibling: 12  Op: >= of type bool [line: 58]
< .   .   Sibling: 13  Op: * of type int [line: 21]
< .   .   Sibling: 13  Op: < of type bool [line: 59]
< .   .   Sibling: 14  Op: / of type int [line: 22]
< .   .   Sibling: 14  Op: <= of type bool [line: 60]
< .   .   Sibling: 15  Assign: := of type char [line: 62]
< .   .   Sibling: 15  Op: % of type int [line: 23]
< .   .   Sibling: 16  Assign: += of type int [line: 25]
< .   .   Sibling: 16  Return [line: 64]
< .   .   Sibling: 17  Assign: -= of type int [line: 26]
< .   .   Sibling: 18  Assign: *= of type int [line: 27]
< .   .   Sibling: 19  Assign: /= of type int [line: 28]
< .   .   Sibling: 2  Assign: := of type char [line: 42]
< .   .   Sibling: 2  Assign: := of type char [line: 7]
< .   .   Sibling: 2  Call: cat of type char [line: 81]
< .   .   Sibling: 2  Var: c of type char [line: 37]
< .   .   Sibling: 20  Op: chsign of type int [line: 30]
< .   .   Sibling: 21  Op: not of type bool [line: 31]
< .   .   Sibling: 22  Op: ? of type int [line: 32]
< .   .   Sibling: 3  Call: bat of type void [line: 82]
< .   .   Sibling: 3  If [line: 9]
< .   .   Sibling: 3  Op: sizeof of type int [line: 44]
< .   .   Sibling: 3  Var: aa is array of type int [line: 38]
< .   .   Sibling: 4  Assign: := of type bool [line: 83]
< .   .   Sibling: 4  If [line: 10]
< .   .   Sibling: 4  Op: ? of type int [line: 45]
< .   .   Sibling: 4  Var: ba is array of type bool [line: 38]
< .   .   Sibling: 5  For [line: 47]
< .   .   Sibling: 5  If [line: 11]
< .   .   Sibling: 5  Return [line: 85]
< .   .   Sibling: 5  Var: ca is array of type char [line: 38]
< .   .   Sibling: 6  For [line: 48]
< .   .   Sibling: 6  While [line: 12]
< .   .   Sibling: 7  For [line: 49]
< .   .   Sibling: 7  If [line: 13]
< .   .   Sibling: 8  Assign: := of type int [line: 54]
< .   .   Sibling: 8  If [line: 14]
< .   .   Sibling: 9  If [line: 15]
< .   .   Sibling: 9  Op: = of type bool [line: 55]
< .   Child: 0  Parm: a of type int [line: 2]
< .   Child: 0  Parm: i of type int [line: 67]
< .   Child: 1  Compound [line: 1]
< .   Child: 1  Compound [line: 2]
< .   Child: 1  Compound [line: 36]
< .   Child: 1  Compound [line: 67]
< .   Child: 1  Compound [line: 75]
< .   Sibling: 1  Parm: c of type char [line: 2]
< Func: ant returns type int [line: 1]
< Number of errors: 0
< Number of warnings: 5
< Sibling: 1  Func: bat returns type void [line: 2]
< Sibling: 2  Func: cat returns type char [line: 35]
< Sibling: 3  Func: dog returns type void [line: 67]
< Sibling: 4  Func: main returns type int [line: 74]
---
> ERROR(47): Cannot use array in position 1 in range of for statement.
> ERROR(47): Cannot use array in position 2 in range of for statement.
> ERROR(48): Cannot use array in position 1 in range of for statement.
> ERROR(48): Cannot use array in position 2 in range of for statement.
> ERROR(48): Cannot use array in position 3 in range of for statement.
> ERROR(48): Expecting type int in position 1 in range of for statement but got type bool.
> Number of errors: 6
> Number of warnings: 6
240a13
> WARNING(67): The function 'dog' seems not to be used.
1,4c1,17
< ERROR(11): Symbol 'output' is not declared.
< ERROR(12): Symbol 'output' is not declared.
< ERROR(13): Symbol 'output' is not declared.
< Number of errors: 3
---
> .   .   .   .   Child: 0  Id: a of type int [line: 11]
> .   .   .   .   Child: 0  Id: b of type int [line: 12]
> .   .   .   .   Child: 0  Id: c of type int [line: 13]
> .   .   .   Child: 0  Id: c of type int [line: 9]
> .   .   .   Child: 0  Op: sizeof of type int [line: 11]
> .   .   .   Child: 0  Op: sizeof of type int [line: 12]
> .   .   .   Child: 0  Op: sizeof of type int [line: 13]
> .   .   .   Child: 1  Const 22 of type int [line: 9]
> .   .   Child: 0  Var: b is array of type int [line: 6]
> .   .   Child: 1  Op: [ of type int [line: 9]
> .   .   Sibling: 1  Const 999 of type int [line: 10]
> .   .   Sibling: 1  Var: c is array of type int [line: 7]
> .   .   Sibling: 2  Call: output of type void [line: 11]
> .   .   Sibling: 3  Call: output of type void [line: 12]
> .   .   Sibling: 4  Call: output of type void [line: 13]
> .   Child: 1  Compound [line: 5]
> Number of errors: 0
5a19,20
> Sibling: 1  Func: main returns type void [line: 4]
> Var: a is array of type int [line: 2]
4c4,7
< Number of errors: 3
---
> ERROR(6): Initializer for variable 'bb' requires both operands be arrays or not but variable is an array and rhs is not an array.
> ERROR(7): Initializer for variable 'cc' requires both operands be arrays or not but variable is an array and rhs is not an array.
> ERROR(8): Initializer for variable 'ii' requires both operands be arrays or not but variable is an array and rhs is not an array.
> Number of errors: 6
0a1,2
> ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
> ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
1a4,5
> ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
> ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
3a8
> ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
11a17
> ERROR(15): Expecting Boolean test condition in if statement but got type int.
13a20
> ERROR(16): Expecting Boolean test condition in if statement but got type int.
15a23,24
> ERROR(17): Expecting Boolean test condition in if statement but got type int.
> ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
36a46
> ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
56,58c66,68
< ERROR(LINKER): A function named 'main()' must be defined.
< Number of errors: 56
< Number of warnings: 6
---
> ERROR(LINKER): A function named 'main' with no parameters must be defined.
> Number of errors: 66
> Number of warnings: 8
62a73
> WARNING(79): The function 'elk' seems not to be used.
64a76
> WARNING(91): The function 'mane' seems not to be used.
1,236c1,8
< .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   .   .   .   Child: 1  Const true of type bool [line: 13]
< .   .   .   .   .   .   Child: 1  Const true of type bool [line: 14]
< .   .   .   .   .   Child: 0  Const 15 of type int [line: 49]
< .   .   .   .   .   Child: 0  Const 3 of type int [line: 49]
< .   .   .   .   .   Child: 0  Const 7 of type int [line: 49]
< .   .   .   .   .   Child: 0  Id: a of type int [line: 11]
< .   .   .   .   .   Child: 0  Id: a of type int [line: 50]
< .   .   .   .   .   Child: 0  Id: aa of type int [line: 42]
< .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   .   .   Child: 0  Id: ccc of type char [line: 83]
< .   .   .   .   .   Child: 0  Id: i of type int [line: 70]
< .   .   .   .   .   Child: 0  Id: z of type int [line: 51]
< .   .   .   .   .   Child: 0  Op: and of type bool [line: 13]
< .   .   .   .   .   Child: 0  Op: or of type bool [line: 14]
< .   .   .   .   .   Child: 1  Const 1 of type int [line: 42]
< .   .   .   .   .   Child: 1  Const 1111 of type int [line: 13]
< .   .   .   .   .   Child: 1  Const 1313 of type int [line: 14]
< .   .   .   .   .   Child: 1  Const 2 of type int [line: 83]
< .   .   .   .   .   Child: 1  Const 3 of type int [line: 49]
< .   .   .   .   .   Child: 1  Const 4 of type int [line: 49]
< .   .   .   .   .   Child: 1  Const 777 of type int [line: 11]
< .   .   .   .   .   Child: 1  Const 8 of type int [line: 49]
< .   .   .   .   .   Child: 1  Id: a of type int [line: 51]
< .   .   .   .   .   Child: 1  Id: i of type int [line: 70]
< .   .   .   .   .   Child: 1  Id: z of type int [line: 50]
< .   .   .   .   Child: 0  Call: ant of type int [line: 85]
< .   .   .   .   Child: 0  Const 999 of type int [line: 12]
< .   .   .   .   Child: 0  Id: a of type int [line: 10]
< .   .   .   .   Child: 0  Id: a of type int [line: 11]
< .   .   .   .   Child: 0  Id: a of type int [line: 9]
< .   .   .   .   Child: 0  Id: aa of undefined type [line: 47]
< .   .   .   .   Child: 0  Id: b of type bool [line: 15]
< .   .   .   .   Child: 0  Id: b of type bool [line: 48]
< .   .   .   .   Child: 0  Id: ba of type bool [line: 41]
< .   .   .   .   Child: 0  Id: ba of undefined type [line: 48]
< .   .   .   .   Child: 0  Id: ca of type char [line: 42]
< .   .   .   .   Child: 0  Id: i of type int [line: 68]
< .   .   .   .   Child: 0  Id: z of type int [line: 47]
< .   .   .   .   Child: 0  Op: + of undefined type [line: 49]
< .   .   .   .   Child: 0  Op: >= of type bool [line: 11]
< .   .   .   .   Child: 0  Op: [ of type char [line: 83]
< .   .   .   .   Child: 0  Op: not of type bool [line: 13]
< .   .   .   .   Child: 0  Op: not of type bool [line: 14]
< .   .   .   .   Child: 0  Var: i of type int [line: 69]
< .   .   .   .   Child: 1  Assign: := of type int [line: 50]
< .   .   .   .   Child: 1  Assign: := of type int [line: 70]
< .   .   .   .   Child: 1  Const 'r' of type char [line: 83]
< .   .   .   .   Child: 1  Const 222 of type int [line: 9]
< .   .   .   .   Child: 1  Const 3 of type int [line: 68]
< .   .   .   .   Child: 1  Const 333 of type int [line: 10]
< .   .   .   .   Child: 1  Const 666 of type int [line: 11]
< .   .   .   .   Child: 1  Const 807 of type int [line: 85]
< .   .   .   .   Child: 1  Const 888 of type int [line: 11]
< .   .   .   .   Child: 1  Const true of type bool [line: 15]
< .   .   .   .   Child: 1  Id: a of type int [line: 12]
< .   .   .   .   Child: 1  Id: a of type int [line: 41]
< .   .   .   .   Child: 1  Id: aa of undefined type [line: 47]
< .   .   .   .   Child: 1  Id: aa of undefined type [line: 48]
< .   .   .   .   Child: 1  Id: b of type bool [line: 48]
< .   .   .   .   Child: 1  Id: z of type int [line: 47]
< .   .   .   .   Child: 1  Op: * of undefined type [line: 49]
< .   .   .   .   Child: 1  Op: [ of type int [line: 42]
< .   .   .   .   Child: 1  While [line: 13]
< .   .   .   .   Child: 1  While [line: 14]
< .   .   .   .   Child: 2  Const 1212 of type int [line: 13]
< .   .   .   .   Child: 2  Const 1414 of type int [line: 14]
< .   .   .   .   Child: 2  Const 555 of type int [line: 11]
< .   .   .   .   Child: 2  Id: aa of undefined type [line: 48]
< .   .   .   .   Child: 2  Op: % of undefined type [line: 49]
< .   .   .   .   Sibling: 1  Assign: := of type int [line: 51]
< .   .   .   Child: 0  Assign: := of type bool [line: 15]
< .   .   .   Child: 0  Call: ant of type int [line: 82]
< .   .   .   Child: 0  Const 'm' of type char [line: 64]
< .   .   .   Child: 0  Const 11 of type int [line: 45]
< .   .   .   Child: 0  Const 111 of type int [line: 1]
< .   .   .   Child: 0  Const 1818 of type int [line: 20]
< .   .   .   Child: 0  Const 2020 of type int [line: 22]
< .   .   .   Child: 0  Const 676 of type int [line: 80]
< .   .   .   Child: 0  Const false of type bool [line: 17]
< .   .   .   Child: 0  Const false of type bool [line: 3]
< .   .   .   Child: 0  Const is array "cows" of type char [line: 77]
< .   .   .   Child: 0  Id: a of type int [line: 19]
< .   .   .   Child: 0  Id: a of type int [line: 21]
< .   .   .   Child: 0  Id: a of type int [line: 23]
< .   .   .   Child: 0  Id: a of type int [line: 25]
< .   .   .   Child: 0  Id: a of type int [line: 26]
< .   .   .   Child: 0  Id: a of type int [line: 27]
< .   .   .   Child: 0  Id: a of type int [line: 28]
< .   .   .   Child: 0  Id: a of type int [line: 30]
< .   .   .   Child: 0  Id: a of type int [line: 32]
< .   .   .   Child: 0  Id: a of type int [line: 5]
< .   .   .   Child: 0  Id: aa of type int [line: 40]
< .   .   .   Child: 0  Id: aa of type int [line: 54]
< .   .   .   Child: 0  Id: aa of type int [line: 57]
< .   .   .   Child: 0  Id: aa of type int [line: 60]
< .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   Child: 0  Id: b of type bool [line: 31]
< .   .   .   Child: 0  Id: b of type bool [line: 6]
< .   .   .   Child: 0  Id: ba of type bool [line: 44]
< .   .   .   Child: 0  Id: ba of type bool [line: 55]
< .   .   .   Child: 0  Id: ba of type bool [line: 58]
< .   .   .   Child: 0  Id: bbb of type bool [line: 83]
< .   .   .   Child: 0  Id: c of type char [line: 7]
< .   .   .   Child: 0  Id: ca of type char [line: 56]
< .   .   .   Child: 0  Id: ca of type char [line: 59]
< .   .   .   Child: 0  Id: ca of type char [line: 62]
< .   .   .   Child: 0  Op: + of type int [line: 85]
< .   .   .   Child: 0  Op: < of type bool [line: 10]
< .   .   .   Child: 0  Op: <= of type bool [line: 11]
< .   .   .   Child: 0  Op: = of type bool [line: 12]
< .   .   .   Child: 0  Op: = of type bool [line: 68]
< .   .   .   Child: 0  Op: > of type bool [line: 9]
< .   .   .   Child: 0  Op: [ of type bool [line: 41]
< .   .   .   Child: 0  Op: [ of type char [line: 42]
< .   .   .   Child: 0  Var: z of type int [line: 47]
< .   .   .   Child: 0  Var: z of type int [line: 48]
< .   .   .   Child: 0  Var: z of type int [line: 49]
< .   .   .   Child: 1  Break [line: 17]
< .   .   .   Child: 1  Compound [line: 68]
< .   .   .   Child: 1  Const 'z' of type char [line: 7]
< .   .   .   Child: 1  Const 1 of type int [line: 25]
< .   .   .   Child: 1  Const 1010 of type int [line: 12]
< .   .   .   Child: 1  Const 1616 of type int [line: 15]
< .   .   .   Child: 1  Const 1717 of type int [line: 19]
< .   .   .   Child: 1  Const 1919 of type int [line: 21]
< .   .   .   Child: 1  Const 2 of type int [line: 26]
< .   .   .   Child: 1  Const 2 of type int [line: 40]
< .   .   .   Child: 1  Const 2121 of type int [line: 23]
< .   .   .   Child: 1  Const 222 of type int [line: 5]
< .   .   .   Child: 1  Const 3 of type int [line: 27]
< .   .   .   Child: 1  Const 333 of type int [line: 9]
< .   .   .   Child: 1  Const 4 of type int [line: 28]
< .   .   .   Child: 1  Const 444 of type int [line: 10]
< .   .   .   Child: 1  Const is array "dogs are great" of type char [line: 62]
< .   .   .   Child: 1  Const true of type bool [line: 6]
< .   .   .   Child: 1  Id: a of type int [line: 20]
< .   .   .   Child: 1  Id: a of type int [line: 22]
< .   .   .   Child: 1  Id: aa of type int [line: 54]
< .   .   .   Child: 1  Id: aa of type int [line: 57]
< .   .   .   Child: 1  Id: aa of type int [line: 60]
< .   .   .   Child: 1  Id: b of type bool [line: 41]
< .   .   .   Child: 1  Id: ba of type bool [line: 55]
< .   .   .   Child: 1  Id: ba of type bool [line: 58]
< .   .   .   Child: 1  Id: c of type char [line: 42]
< .   .   .   Child: 1  Id: ca of type char [line: 56]
< .   .   .   Child: 1  Id: ca of type char [line: 59]
< .   .   .   Child: 1  If [line: 11]
< .   .   .   Child: 1  If [line: 13]
< .   .   .   Child: 1  If [line: 14]
< .   .   .   Child: 1  Op: >< of type bool [line: 83]
< .   .   .   Child: 1  Range [line: 47]
< .   .   .   Child: 1  Range [line: 48]
< .   .   .   Child: 1  Range [line: 49]
< .   .   .   Child: 2  Compound [line: 49]
< .   .   .   Child: 2  Const 1515 of type int [line: 14]
< .   .   .   Child: 2  Const 555 of type int [line: 10]
< .   .   .   Child: 2  Op: + of type int [line: 47]
< .   .   .   Child: 2  Op: and of type bool [line: 48]
< .   .   .   Sibling: 1  Call: cat of type char [line: 82]
< .   .   .   Sibling: 1  Const 'g' of type char [line: 80]
< .   .   Child: 0  Var: a of type int [line: 37]
< .   .   Child: 0  Var: b of type bool [line: 3]
< .   .   Child: 0  Var: bbb of type bool [line: 76]
< .   .   Child: 1  Assign: := of type int [line: 5]
< .   .   Child: 1  Call: ant of type int [line: 79]
< .   .   Child: 1  If [line: 68]
< .   .   Child: 1  Op: [ of type int [line: 40]
< .   .   Child: 1  Return [line: 1]
< .   .   Sibling: 1  Assign: := of type bool [line: 41]
< .   .   Sibling: 1  Assign: := of type bool [line: 6]
< .   .   Sibling: 1  Call: bat of type void [line: 80]
< .   .   Sibling: 1  Var: b of type bool [line: 37]
< .   .   Sibling: 1  Var: ccc is array of type char [line: 77]
< .   .   Sibling: 10  Op: >< of type bool [line: 56]
< .   .   Sibling: 10  While [line: 17]
< .   .   Sibling: 11  Op: + of type int [line: 19]
< .   .   Sibling: 11  Op: > of type bool [line: 57]
< .   .   Sibling: 12  Op: - of type int [line: 20]
< .   .   Sibling: 12  Op: >= of type bool [line: 58]
< .   .   Sibling: 13  Op: * of type int [line: 21]
< .   .   Sibling: 13  Op: < of type bool [line: 59]
< .   .   Sibling: 14  Op: / of type int [line: 22]
< .   .   Sibling: 14  Op: <= of type bool [line: 60]
< .   .   Sibling: 15  Assign: := of type char [line: 62]
< .   .   Sibling: 15  Op: % of type int [line: 23]
< .   .   Sibling: 16  Assign: += of type int [line: 25]
< .   .   Sibling: 16  Return [line: 64]
< .   .   Sibling: 17  Assign: -= of type int [line: 26]
< .   .   Sibling: 18  Assign: *= of type int [line: 27]
< .   .   Sibling: 19  Assign: /= of type int [line: 28]
< .   .   Sibling: 2  Assign: := of type char [line: 42]
< .   .   Sibling: 2  Assign: := of type char [line: 7]
< .   .   Sibling: 2  Call: cat of type char [line: 81]
< .   .   Sibling: 2  Var: c of type char [line: 37]
< .   .   Sibling: 20  Op: chsign of type int [line: 30]
< .   .   Sibling: 21  Op: not of type bool [line: 31]
< .   .   Sibling: 22  Op: ? of type int [line: 32]
< .   .   Sibling: 3  Call: bat of type void [line: 82]
< .   .   Sibling: 3  If [line: 9]
< .   .   Sibling: 3  Op: sizeof of type int [line: 44]
< .   .   Sibling: 3  Var: aa is array of type int [line: 38]
< .   .   Sibling: 4  Assign: := of type bool [line: 83]
< .   .   Sibling: 4  If [line: 10]
< .   .   Sibling: 4  Op: ? of type int [line: 45]
< .   .   Sibling: 4  Var: ba is array of type bool [line: 38]
< .   .   Sibling: 5  For [line: 47]
< .   .   Sibling: 5  If [line: 11]
< .   .   Sibling: 5  Return [line: 85]
< .   .   Sibling: 5  Var: ca is array of type char [line: 38]
< .   .   Sibling: 6  For [line: 48]
< .   .   Sibling: 6  While [line: 12]
< .   .   Sibling: 7  For [line: 49]
< .   .   Sibling: 7  If [line: 13]
< .   .   Sibling: 8  Assign: := of type int [line: 54]
< .   .   Sibling: 8  If [line: 14]
< .   .   Sibling: 9  If [line: 15]
< .   .   Sibling: 9  Op: = of type bool [line: 55]
< .   Child: 0  Parm: a of type int [line: 2]
< .   Child: 0  Parm: i of type int [line: 67]
< .   Child: 1  Compound [line: 1]
< .   Child: 1  Compound [line: 2]
< .   Child: 1  Compound [line: 36]
< .   Child: 1  Compound [line: 67]
< .   Child: 1  Compound [line: 75]
< .   Sibling: 1  Parm: c of type char [line: 2]
< Func: ant returns type int [line: 1]
< Number of errors: 0
< Number of warnings: 5
< Sibling: 1  Func: bat returns type void [line: 2]
< Sibling: 2  Func: cat returns type char [line: 35]
< Sibling: 3  Func: dog returns type void [line: 67]
< Sibling: 4  Func: main returns type int [line: 74]
---
> ERROR(47): Cannot use array in position 1 in range of for statement.
> ERROR(47): Cannot use array in position 2 in range of for statement.
> ERROR(48): Cannot use array in position 1 in range of for statement.
> ERROR(48): Cannot use array in position 2 in range of for statement.
> ERROR(48): Cannot use array in position 3 in range of for statement.
> ERROR(48): Expecting type int in position 1 in range of for statement but got type bool.
> Number of errors: 6
> Number of warnings: 6
240a13
> WARNING(67): The function 'dog' seems not to be used.
0a1,2
> ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
> ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
1a4,5
> ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
> ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
3a8
> ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
11a17
> ERROR(15): Expecting Boolean test condition in if statement but got type int.
13a20
> ERROR(16): Expecting Boolean test condition in if statement but got type int.
15a23,24
> ERROR(17): Expecting Boolean test condition in if statement but got type int.
> ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
36a46
> ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
56,58c66,68
< ERROR(LINKER): A function named 'main()' must be defined.
< Number of errors: 56
< Number of warnings: 6
---
> ERROR(LINKER): A function named 'main' with no parameters must be defined.
> Number of errors: 66
> Number of warnings: 8
62a73
> WARNING(79): The function 'elk' seems not to be used.
64a76
> WARNING(91): The function 'mane' seems not to be used.
1,236c1,8
< .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   .   .   .   Child: 1  Const true of type bool [line: 13]
< .   .   .   .   .   .   Child: 1  Const true of type bool [line: 14]
< .   .   .   .   .   Child: 0  Const 15 of type int [line: 49]
< .   .   .   .   .   Child: 0  Const 3 of type int [line: 49]
< .   .   .   .   .   Child: 0  Const 7 of type int [line: 49]
< .   .   .   .   .   Child: 0  Id: a of type int [line: 11]
< .   .   .   .   .   Child: 0  Id: a of type int [line: 50]
< .   .   .   .   .   Child: 0  Id: aa of type int [line: 42]
< .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   .   .   Child: 0  Id: ccc of type char [line: 83]
< .   .   .   .   .   Child: 0  Id: i of type int [line: 70]
< .   .   .   .   .   Child: 0  Id: z of type int [line: 51]
< .   .   .   .   .   Child: 0  Op: and of type bool [line: 13]
< .   .   .   .   .   Child: 0  Op: or of type bool [line: 14]
< .   .   .   .   .   Child: 1  Const 1 of type int [line: 42]
< .   .   .   .   .   Child: 1  Const 1111 of type int [line: 13]
< .   .   .   .   .   Child: 1  Const 1313 of type int [line: 14]
< .   .   .   .   .   Child: 1  Const 2 of type int [line: 83]
< .   .   .   .   .   Child: 1  Const 3 of type int [line: 49]
< .   .   .   .   .   Child: 1  Const 4 of type int [line: 49]
< .   .   .   .   .   Child: 1  Const 777 of type int [line: 11]
< .   .   .   .   .   Child: 1  Const 8 of type int [line: 49]
< .   .   .   .   .   Child: 1  Id: a of type int [line: 51]
< .   .   .   .   .   Child: 1  Id: i of type int [line: 70]
< .   .   .   .   .   Child: 1  Id: z of type int [line: 50]
< .   .   .   .   Child: 0  Call: ant of type int [line: 85]
< .   .   .   .   Child: 0  Const 999 of type int [line: 12]
< .   .   .   .   Child: 0  Id: a of type int [line: 10]
< .   .   .   .   Child: 0  Id: a of type int [line: 11]
< .   .   .   .   Child: 0  Id: a of type int [line: 9]
< .   .   .   .   Child: 0  Id: aa of undefined type [line: 47]
< .   .   .   .   Child: 0  Id: b of type bool [line: 15]
< .   .   .   .   Child: 0  Id: b of type bool [line: 48]
< .   .   .   .   Child: 0  Id: ba of type bool [line: 41]
< .   .   .   .   Child: 0  Id: ba of undefined type [line: 48]
< .   .   .   .   Child: 0  Id: ca of type char [line: 42]
< .   .   .   .   Child: 0  Id: i of type int [line: 68]
< .   .   .   .   Child: 0  Id: z of type int [line: 47]
< .   .   .   .   Child: 0  Op: + of undefined type [line: 49]
< .   .   .   .   Child: 0  Op: >= of type bool [line: 11]
< .   .   .   .   Child: 0  Op: [ of type char [line: 83]
< .   .   .   .   Child: 0  Op: not of type bool [line: 13]
< .   .   .   .   Child: 0  Op: not of type bool [line: 14]
< .   .   .   .   Child: 0  Var: i of type int [line: 69]
< .   .   .   .   Child: 1  Assign: := of type int [line: 50]
< .   .   .   .   Child: 1  Assign: := of type int [line: 70]
< .   .   .   .   Child: 1  Const 'r' of type char [line: 83]
< .   .   .   .   Child: 1  Const 222 of type int [line: 9]
< .   .   .   .   Child: 1  Const 3 of type int [line: 68]
< .   .   .   .   Child: 1  Const 333 of type int [line: 10]
< .   .   .   .   Child: 1  Const 666 of type int [line: 11]
< .   .   .   .   Child: 1  Const 807 of type int [line: 85]
< .   .   .   .   Child: 1  Const 888 of type int [line: 11]
< .   .   .   .   Child: 1  Const true of type bool [line: 15]
< .   .   .   .   Child: 1  Id: a of type int [line: 12]
< .   .   .   .   Child: 1  Id: a of type int [line: 41]
< .   .   .   .   Child: 1  Id: aa of undefined type [line: 47]
< .   .   .   .   Child: 1  Id: aa of undefined type [line: 48]
< .   .   .   .   Child: 1  Id: b of type bool [line: 48]
< .   .   .   .   Child: 1  Id: z of type int [line: 47]
< .   .   .   .   Child: 1  Op: * of undefined type [line: 49]
< .   .   .   .   Child: 1  Op: [ of type int [line: 42]
< .   .   .   .   Child: 1  While [line: 13]
< .   .   .   .   Child: 1  While [line: 14]
< .   .   .   .   Child: 2  Const 1212 of type int [line: 13]
< .   .   .   .   Child: 2  Const 1414 of type int [line: 14]
< .   .   .   .   Child: 2  Const 555 of type int [line: 11]
< .   .   .   .   Child: 2  Id: aa of undefined type [line: 48]
< .   .   .   .   Child: 2  Op: % of undefined type [line: 49]
< .   .   .   .   Sibling: 1  Assign: := of type int [line: 51]
< .   .   .   Child: 0  Assign: := of type bool [line: 15]
< .   .   .   Child: 0  Call: ant of type int [line: 82]
< .   .   .   Child: 0  Const 'm' of type char [line: 64]
< .   .   .   Child: 0  Const 11 of type int [line: 45]
< .   .   .   Child: 0  Const 111 of type int [line: 1]
< .   .   .   Child: 0  Const 1818 of type int [line: 20]
< .   .   .   Child: 0  Const 2020 of type int [line: 22]
< .   .   .   Child: 0  Const 676 of type int [line: 80]
< .   .   .   Child: 0  Const false of type bool [line: 17]
< .   .   .   Child: 0  Const false of type bool [line: 3]
< .   .   .   Child: 0  Const is array "cows" of type char [line: 77]
< .   .   .   Child: 0  Id: a of type int [line: 19]
< .   .   .   Child: 0  Id: a of type int [line: 21]
< .   .   .   Child: 0  Id: a of type int [line: 23]
< .   .   .   Child: 0  Id: a of type int [line: 25]
< .   .   .   Child: 0  Id: a of type int [line: 26]
< .   .   .   Child: 0  Id: a of type int [line: 27]
< .   .   .   Child: 0  Id: a of type int [line: 28]
< .   .   .   Child: 0  Id: a of type int [line: 30]
< .   .   .   Child: 0  Id: a of type int [line: 32]
< .   .   .   Child: 0  Id: a of type int [line: 5]
< .   .   .   Child: 0  Id: aa of type int [line: 40]
< .   .   .   Child: 0  Id: aa of type int [line: 54]
< .   .   .   Child: 0  Id: aa of type int [line: 57]
< .   .   .   Child: 0  Id: aa of type int [line: 60]
< .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   Child: 0  Id: b of type bool [line: 31]
< .   .   .   Child: 0  Id: b of type bool [line: 6]
< .   .   .   Child: 0  Id: ba of type bool [line: 44]
< .   .   .   Child: 0  Id: ba of type bool [line: 55]
< .   .   .   Child: 0  Id: ba of type bool [line: 58]
< .   .   .   Child: 0  Id: bbb of type bool [line: 83]
< .   .   .   Child: 0  Id: c of type char [line: 7]
< .   .   .   Child: 0  Id: ca of type char [line: 56]
< .   .   .   Child: 0  Id: ca of type char [line: 59]
< .   .   .   Child: 0  Id: ca of type char [line: 62]
< .   .   .   Child: 0  Op: + of type int [line: 85]
< .   .   .   Child: 0  Op: < of type bool [line: 10]
< .   .   .   Child: 0  Op: <= of type bool [line: 11]
< .   .   .   Child: 0  Op: = of type bool [line: 12]
< .   .   .   Child: 0  Op: = of type bool [line: 68]
< .   .   .   Child: 0  Op: > of type bool [line: 9]
< .   .   .   Child: 0  Op: [ of type bool [line: 41]
< .   .   .   Child: 0  Op: [ of type char [line: 42]
< .   .   .   Child: 0  Var: z of type int [line: 47]
< .   .   .   Child: 0  Var: z of type int [line: 48]
< .   .   .   Child: 0  Var: z of type int [line: 49]
< .   .   .   Child: 1  Break [line: 17]
< .   .   .   Child: 1  Compound [line: 68]
< .   .   .   Child: 1  Const 'z' of type char [line: 7]
< .   .   .   Child: 1  Const 1 of type int [line: 25]
< .   .   .   Child: 1  Const 1010 of type int [line: 12]
< .   .   .   Child: 1  Const 1616 of type int [line: 15]
< .   .   .   Child: 1  Const 1717 of type int [line: 19]
< .   .   .   Child: 1  Const 1919 of type int [line: 21]
< .   .   .   Child: 1  Const 2 of type int [line: 26]
< .   .   .   Child: 1  Const 2 of type int [line: 40]
< .   .   .   Child: 1  Const 2121 of type int [line: 23]
< .   .   .   Child: 1  Const 222 of type int [line: 5]
< .   .   .   Child: 1  Const 3 of type int [line: 27]
< .   .   .   Child: 1  Const 333 of type int [line: 9]
< .   .   .   Child: 1  Const 4 of type int [line: 28]
< .   .   .   Child: 1  Const 444 of type int [line: 10]
< .   .   .   Child: 1  Const is array "dogs are great" of type char [line: 62]
< .   .   .   Child: 1  Const true of type bool [line: 6]
< .   .   .   Child: 1  Id: a of type int [line: 20]
< .   .   .   Child: 1  Id: a of type int [line: 22]
< .   .   .   Child: 1  Id: aa of type int [line: 54]
< .   .   .   Child: 1  Id: aa of type int [line: 57]
< .   .   .   Child: 1  Id: aa of type int [line: 60]
< .   .   .   Child: 1  Id: b of type bool [line: 41]
< .   .   .   Child: 1  Id: ba of type bool [line: 55]
< .   .   .   Child: 1  Id: ba of type bool [line: 58]
< .   .   .   Child: 1  Id: c of type char [line: 42]
< .   .   .   Child: 1  Id: ca of type char [line: 56]
< .   .   .   Child: 1  Id: ca of type char [line: 59]
< .   .   .   Child: 1  If [line: 11]
< .   .   .   Child: 1  If [line: 13]
< .   .   .   Child: 1  If [line: 14]
< .   .   .   Child: 1  Op: >< of type bool [line: 83]
< .   .   .   Child: 1  Range [line: 47]
< .   .   .   Child: 1  Range [line: 48]
< .   .   .   Child: 1  Range [line: 49]
< .   .   .   Child: 2  Compound [line: 49]
< .   .   .   Child: 2  Const 1515 of type int [line: 14]
< .   .   .   Child: 2  Const 555 of type int [line: 10]
< .   .   .   Child: 2  Op: + of type int [line: 47]
< .   .   .   Child: 2  Op: and of type bool [line: 48]
< .   .   .   Sibling: 1  Call: cat of type char [line: 82]
< .   .   .   Sibling: 1  Const 'g' of type char [line: 80]
< .   .   Child: 0  Var: a of type int [line: 37]
< .   .   Child: 0  Var: b of type bool [line: 3]
< .   .   Child: 0  Var: bbb of type bool [line: 76]
< .   .   Child: 1  Assign: := of type int [line: 5]
< .   .   Child: 1  Call: ant of type int [line: 79]
< .   .   Child: 1  If [line: 68]
< .   .   Child: 1  Op: [ of type int [line: 40]
< .   .   Child: 1  Return [line: 1]
< .   .   Sibling: 1  Assign: := of type bool [line: 41]
< .   .   Sibling: 1  Assign: := of type bool [line: 6]
< .   .   Sibling: 1  Call: bat of type void [line: 80]
< .   .   Sibling: 1  Var: b of type bool [line: 37]
< .   .   Sibling: 1  Var: ccc is array of type char [line: 77]
< .   .   Sibling: 10  Op: >< of type bool [line: 56]
< .   .   Sibling: 10  While [line: 17]
< .   .   Sibling: 11  Op: + of type int [line: 19]
< .   .   Sibling: 11  Op: > of type bool [line: 57]
< .   .   Sibling: 12  Op: - of type int [line: 20]
< .   .   Sibling: 12  Op: >= of type bool [line: 58]
< .   .   Sibling: 13  Op: * of type int [line: 21]
< .   .   Sibling: 13  Op: < of type bool [line: 59]
< .   .   Sibling: 14  Op: / of type int [line: 22]
< .   .   Sibling: 14  Op: <= of type bool [line: 60]
< .   .   Sibling: 15  Assign: := of type char [line: 62]
< .   .   Sibling: 15  Op: % of type int [line: 23]
< .   .   Sibling: 16  Assign: += of type int [line: 25]
< .   .   Sibling: 16  Return [line: 64]
< .   .   Sibling: 17  Assign: -= of type int [line: 26]
< .   .   Sibling: 18  Assign: *= of type int [line: 27]
< .   .   Sibling: 19  Assign: /= of type int [line: 28]
< .   .   Sibling: 2  Assign: := of type char [line: 42]
< .   .   Sibling: 2  Assign: := of type char [line: 7]
< .   .   Sibling: 2  Call: cat of type char [line: 81]
< .   .   Sibling: 2  Var: c of type char [line: 37]
< .   .   Sibling: 20  Op: chsign of type int [line: 30]
< .   .   Sibling: 21  Op: not of type bool [line: 31]
< .   .   Sibling: 22  Op: ? of type int [line: 32]
< .   .   Sibling: 3  Call: bat of type void [line: 82]
< .   .   Sibling: 3  If [line: 9]
< .   .   Sibling: 3  Op: sizeof of type int [line: 44]
< .   .   Sibling: 3  Var: aa is array of type int [line: 38]
< .   .   Sibling: 4  Assign: := of type bool [line: 83]
< .   .   Sibling: 4  If [line: 10]
< .   .   Sibling: 4  Op: ? of type int [line: 45]
< .   .   Sibling: 4  Var: ba is array of type bool [line: 38]
< .   .   Sibling: 5  For [line: 47]
< .   .   Sibling: 5  If [line: 11]
< .   .   Sibling: 5  Return [line: 85]
< .   .   Sibling: 5  Var: ca is array of type char [line: 38]
< .   .   Sibling: 6  For [line: 48]
< .   .   Sibling: 6  While [line: 12]
< .   .   Sibling: 7  For [line: 49]
< .   .   Sibling: 7  If [line: 13]
< .   .   Sibling: 8  Assign: := of type int [line: 54]
< .   .   Sibling: 8  If [line: 14]
< .   .   Sibling: 9  If [line: 15]
< .   .   Sibling: 9  Op: = of type bool [line: 55]
< .   Child: 0  Parm: a of type int [line: 2]
< .   Child: 0  Parm: i of type int [line: 67]
< .   Child: 1  Compound [line: 1]
< .   Child: 1  Compound [line: 2]
< .   Child: 1  Compound [line: 36]
< .   Child: 1  Compound [line: 67]
< .   Child: 1  Compound [line: 75]
< .   Sibling: 1  Parm: c of type char [line: 2]
< Func: ant returns type int [line: 1]
< Number of errors: 0
< Number of warnings: 5
< Sibling: 1  Func: bat returns type void [line: 2]
< Sibling: 2  Func: cat returns type char [line: 35]
< Sibling: 3  Func: dog returns type void [line: 67]
< Sibling: 4  Func: main returns type int [line: 74]
---
> ERROR(47): Cannot use array in position 1 in range of for statement.
> ERROR(47): Cannot use array in position 2 in range of for statement.
> ERROR(48): Cannot use array in position 1 in range of for statement.
> ERROR(48): Cannot use array in position 2 in range of for statement.
> ERROR(48): Cannot use array in position 3 in range of for statement.
> ERROR(48): Expecting type int in position 1 in range of for statement but got type bool.
> Number of errors: 6
> Number of warnings: 6
240a13
> WARNING(67): The function 'dog' seems not to be used.
0a1,2
> ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
> ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
1a4,5
> ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
> ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
3a8
> ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
11a17
> ERROR(15): Expecting Boolean test condition in if statement but got type int.
13a20
> ERROR(16): Expecting Boolean test condition in if statement but got type int.
15a23,24
> ERROR(17): Expecting Boolean test condition in if statement but got type int.
> ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
36a46
> ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
56,58c66,68
< ERROR(LINKER): A function named 'main()' must be defined.
< Number of errors: 56
< Number of warnings: 6
---
> ERROR(LINKER): A function named 'main' with no parameters must be defined.
> Number of errors: 66
> Number of warnings: 8
62a73
> WARNING(79): The function 'elk' seems not to be used.
64a76
> WARNING(91): The function 'mane' seems not to be used.
0a1,2
> ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
> ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
1a4,5
> ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
> ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
3a8
> ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
11a17
> ERROR(15): Expecting Boolean test condition in if statement but got type int.
13a20
> ERROR(16): Expecting Boolean test condition in if statement but got type int.
15a23,24
> ERROR(17): Expecting Boolean test condition in if statement but got type int.
> ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
36a46
> ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
56,58c66,68
< ERROR(LINKER): A function named 'main()' must be defined.
< Number of errors: 56
< Number of warnings: 6
---
> ERROR(LINKER): A function named 'main' with no parameters must be defined.
> Number of errors: 66
> Number of warnings: 8
62a73
> WARNING(79): The function 'elk' seems not to be used.
64a76
> WARNING(91): The function 'mane' seems not to be used.
0a1,2
> ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
> ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
1a4,5
> ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
> ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
3a8
> ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
11a17
> ERROR(15): Expecting Boolean test condition in if statement but got type int.
13a20
> ERROR(16): Expecting Boolean test condition in if statement but got type int.
15a23,24
> ERROR(17): Expecting Boolean test condition in if statement but got type int.
> ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
36a46
> ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
56,58c66,68
< ERROR(LINKER): A function named 'main()' must be defined.
< Number of errors: 56
< Number of warnings: 6
---
> ERROR(LINKER): A function named 'main' with no parameters must be defined.
> Number of errors: 66
> Number of warnings: 8
62a73
> WARNING(79): The function 'elk' seems not to be used.
64a76
> WARNING(91): The function 'mane' seems not to be used.
0a1,2
> ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
> ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
1a4,5
> ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
> ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
3a8
> ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
11a17
> ERROR(15): Expecting Boolean test condition in if statement but got type int.
13a20
> ERROR(16): Expecting Boolean test condition in if statement but got type int.
15a23,24
> ERROR(17): Expecting Boolean test condition in if statement but got type int.
> ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
36a46
> ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
56,58c66,68
< ERROR(LINKER): A function named 'main()' must be defined.
< Number of errors: 56
< Number of warnings: 6
---
> ERROR(LINKER): A function named 'main' with no parameters must be defined.
> Number of errors: 66
> Number of warnings: 8
62a73
> WARNING(79): The function 'elk' seems not to be used.
64a76
> WARNING(91): The function 'mane' seems not to be used.
0a1,2
> ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
> ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
1a4,5
> ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
> ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
3a8
> ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
11a17
> ERROR(15): Expecting Boolean test condition in if statement but got type int.
13a20
> ERROR(16): Expecting Boolean test condition in if statement but got type int.
15a23,24
> ERROR(17): Expecting Boolean test condition in if statement but got type int.
> ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
36a46
> ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
56,58c66,68
< ERROR(LINKER): A function named 'main()' must be defined.
< Number of errors: 56
< Number of warnings: 6
---
> ERROR(LINKER): A function named 'main' with no parameters must be defined.
> Number of errors: 66
> Number of warnings: 8
62a73
> WARNING(79): The function 'elk' seems not to be used.
64a76
> WARNING(91): The function 'mane' seems not to be used.
0a1,2
> ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
> ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
1a4,5
> ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
> ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
3a8
> ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
11a17
> ERROR(15): Expecting Boolean test condition in if statement but got type int.
13a20
> ERROR(16): Expecting Boolean test condition in if statement but got type int.
15a23,24
> ERROR(17): Expecting Boolean test condition in if statement but got type int.
> ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
36a46
> ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
56,58c66,68
< ERROR(LINKER): A function named 'main()' must be defined.
< Number of errors: 56
< Number of warnings: 6
---
> ERROR(LINKER): A function named 'main' with no parameters must be defined.
> Number of errors: 66
> Number of warnings: 8
62a73
> WARNING(79): The function 'elk' seems not to be used.
64a76
> WARNING(91): The function 'mane' seems not to be used.
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
2,3c2
< ERROR(5): Initializer for variable 'roll' is not a constant expression.
< Number of errors: 2
---
> Number of errors: 1
6d5
< ERROR(4): Initializer for variable 'c' is not a constant expression.
12c11
< Number of errors: 11
---
> Number of errors: 10
1d0
< ERROR(3): Initializer for variable 'u' is not a constant expression.
3c2
< Number of errors: 2
---
> Number of errors: 1
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
1,76d0
< ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
< ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
< ERROR(102): ':=' requires operands of the same type but lhs is type char and rhs is type bool.
< ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
< ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
< ERROR(105): '+' requires operands of type int but lhs is of type void.
< ERROR(105): '+' requires operands of type int but rhs is of type bool.
< ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
< ERROR(107): '+' requires operands of type int but lhs is of type char.
< ERROR(11): '>' requires operands of the same type but lhs is type bool and rhs is type int.
< ERROR(110): Symbol 'mane' is already declared at line 91.
< ERROR(12): '<' requires operands of the same type but lhs is type bool and rhs is type int.
< ERROR(13): '<=' requires operands of the same type but lhs is type bool and rhs is type int.
< ERROR(13): '>=' requires operands of the same type but lhs is type bool and rhs is type int.
< ERROR(14): '=' requires operands of the same type but lhs is type int and rhs is type bool.
< ERROR(15): 'and' requires operands of type bool but lhs is of type int.
< ERROR(15): Expecting Boolean test condition in if statement but got type int.
< ERROR(15): Unary 'not' requires an operand of type bool but was given type int.
< ERROR(16): 'or' requires operands of type bool but lhs is of type int.
< ERROR(16): Expecting Boolean test condition in if statement but got type int.
< ERROR(16): Unary 'not' requires an operand of type bool but was given type int.
< ERROR(17): ':=' requires operands of the same type but lhs is type int and rhs is type bool.
< ERROR(17): Expecting Boolean test condition in if statement but got type int.
< ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
< ERROR(21): '+' requires operands of type int but lhs is of type bool.
< ERROR(22): '-' requires operands of type int but rhs is of type bool.
< ERROR(23): '*' requires operands of type int but lhs is of type bool.
< ERROR(24): '/' requires operands of type int but rhs is of type bool.
< ERROR(25): '%' requires operands of type int but lhs is of type bool.
< ERROR(27): '+=' requires operands of type int but lhs is of type bool.
< ERROR(28): '-=' requires operands of type int but lhs is of type bool.
< ERROR(29): '*=' requires operands of type int but lhs is of type bool.
< ERROR(30): '/=' requires operands of type int but lhs is of type bool.
< ERROR(32): Unary 'chsign' requires an operand of type int but was given type bool.
< ERROR(33): Unary 'not' requires an operand of type bool but was given type int.
< ERROR(34): Unary '?' requires an operand of type int but was given type bool.
< ERROR(43): ':=' requires operands of the same type but lhs is type char and rhs is type int.
< ERROR(43): Array 'ba' should be indexed by type int but got type char.
< ERROR(44): ':=' requires operands of the same type but lhs is type int and rhs is type bool.
< ERROR(44): Array 'ca' should be indexed by type int but got type bool.
< ERROR(45): Array 'aa' should be indexed by type int but got type bool.
< ERROR(45): Array index is the unindexed array 'aa'.
< ERROR(46): Cannot index nonarray 'cat'.
< ERROR(46): Cannot use function 'cat' as a variable.
< ERROR(47): Cannot use function 'cat' as a variable.
< ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
< ERROR(54): ':=' requires operands of the same type but lhs is type char and rhs is type int.
< ERROR(65): ':=' requires operands of the same type but lhs is type int and rhs is type char.
< ERROR(67): Cannot return an array.
< ERROR(7): ':=' requires operands of the same type but lhs is type bool and rhs is type int.
< ERROR(79): Symbol 'a' is already declared at line 79.
< ERROR(8): ':=' requires operands of the same type but lhs is type int and rhs is type bool.
< ERROR(81): Symbol 'a' is already declared at line 79.
< ERROR(82): Symbol 'b' is not declared.
< ERROR(85): Symbol 'c' is not declared.
< ERROR(85): Symbol 'c' is not declared.
< ERROR(86): Symbol 'c' is not declared.
< ERROR(9): ':=' requires operands of the same type but lhs is type int and rhs is type char.
< ERROR(96): The operation '?' does not work with arrays.
< ERROR(96): Unary '?' requires an operand of type int but was given type char.
< ERROR(97): '/' requires operands of type int but lhs is of type char.
< ERROR(97): '/' requires operands of type int but rhs is of type char.
< ERROR(97): The operation '/' does not work with arrays.
< ERROR(98): The operation 'sizeof' only works with arrays.
< ERROR(99): 'bbb' is a simple variable and cannot be called.
< ERROR(LINKER): A function named 'main' with no parameters must be defined.
< Number of errors: 66
< Number of warnings: 8
< WARNING(42): Variable 'aa' may be uninitialized when used here.
< WARNING(43): Variable 'b' may be uninitialized when used here.
< WARNING(44): Variable 'c' may be uninitialized when used here.
< WARNING(73): Variable 'i' may be uninitialized when used here.
< WARNING(79): The function 'elk' seems not to be used.
< WARNING(84): The variable 'a' seems not to be used.
< WARNING(86): Variable 'b' may be uninitialized when used here.
< WARNING(91): The function 'mane' seems not to be used.
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
0a1,3
> ERROR(ARGLIST): source file "-P" could not be opened.
> Number of errors: 1
> Number of warnings: 0
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
2,3c2
< ERROR(5): Initializer for variable 'roll' is not a constant expression.
< Number of errors: 2
---
> Number of errors: 1
6d5
< ERROR(4): Initializer for variable 'c' is not a constant expression.
12c11
< Number of errors: 11
---
> Number of errors: 10
1d0
< ERROR(3): Initializer for variable 'u' is not a constant expression.
3c2
< Number of errors: 2
---
> Number of errors: 1
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
0a1,2
> ERROR(101): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type int.
> ERROR(101): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type char.
1a4,5
> ERROR(103): Expecting type bool in parameter 1 of call to 'bat' declared on line 4 but got type char.
> ERROR(103): Expecting type int in parameter 2 of call to 'bat' declared on line 4 but got type bool.
3a8
> ERROR(105): Too few parameters passed for function 'dog' declared on line 70.
11a17
> ERROR(15): Expecting Boolean test condition in if statement but got type int.
13a20
> ERROR(16): Expecting Boolean test condition in if statement but got type int.
15a23,24
> ERROR(17): Expecting Boolean test condition in if statement but got type int.
> ERROR(2): Function 'ant' at line 2 is expecting to return type char but returns type int.
36a46
> ERROR(47): Too many parameters passed for function 'cat' declared on line 37.
56,58c66,68
< ERROR(LINKER): A function named 'main()' must be defined.
< Number of errors: 56
< Number of warnings: 6
---
> ERROR(LINKER): A function named 'main' with no parameters must be defined.
> Number of errors: 66
> Number of warnings: 8
62a73
> WARNING(79): The function 'elk' seems not to be used.
64a76
> WARNING(91): The function 'mane' seems not to be used.
1,236c1,8
< .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   .   .   .   Child: 1  Const true of type bool [line: 13]
< .   .   .   .   .   .   Child: 1  Const true of type bool [line: 14]
< .   .   .   .   .   Child: 0  Const 15 of type int [line: 49]
< .   .   .   .   .   Child: 0  Const 3 of type int [line: 49]
< .   .   .   .   .   Child: 0  Const 7 of type int [line: 49]
< .   .   .   .   .   Child: 0  Id: a of type int [line: 11]
< .   .   .   .   .   Child: 0  Id: a of type int [line: 50]
< .   .   .   .   .   Child: 0  Id: aa of type int [line: 42]
< .   .   .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   .   .   Child: 0  Id: ccc of type char [line: 83]
< .   .   .   .   .   Child: 0  Id: i of type int [line: 70]
< .   .   .   .   .   Child: 0  Id: z of type int [line: 51]
< .   .   .   .   .   Child: 0  Op: and of type bool [line: 13]
< .   .   .   .   .   Child: 0  Op: or of type bool [line: 14]
< .   .   .   .   .   Child: 1  Const 1 of type int [line: 42]
< .   .   .   .   .   Child: 1  Const 1111 of type int [line: 13]
< .   .   .   .   .   Child: 1  Const 1313 of type int [line: 14]
< .   .   .   .   .   Child: 1  Const 2 of type int [line: 83]
< .   .   .   .   .   Child: 1  Const 3 of type int [line: 49]
< .   .   .   .   .   Child: 1  Const 4 of type int [line: 49]
< .   .   .   .   .   Child: 1  Const 777 of type int [line: 11]
< .   .   .   .   .   Child: 1  Const 8 of type int [line: 49]
< .   .   .   .   .   Child: 1  Id: a of type int [line: 51]
< .   .   .   .   .   Child: 1  Id: i of type int [line: 70]
< .   .   .   .   .   Child: 1  Id: z of type int [line: 50]
< .   .   .   .   Child: 0  Call: ant of type int [line: 85]
< .   .   .   .   Child: 0  Const 999 of type int [line: 12]
< .   .   .   .   Child: 0  Id: a of type int [line: 10]
< .   .   .   .   Child: 0  Id: a of type int [line: 11]
< .   .   .   .   Child: 0  Id: a of type int [line: 9]
< .   .   .   .   Child: 0  Id: aa of undefined type [line: 47]
< .   .   .   .   Child: 0  Id: b of type bool [line: 15]
< .   .   .   .   Child: 0  Id: b of type bool [line: 48]
< .   .   .   .   Child: 0  Id: ba of type bool [line: 41]
< .   .   .   .   Child: 0  Id: ba of undefined type [line: 48]
< .   .   .   .   Child: 0  Id: ca of type char [line: 42]
< .   .   .   .   Child: 0  Id: i of type int [line: 68]
< .   .   .   .   Child: 0  Id: z of type int [line: 47]
< .   .   .   .   Child: 0  Op: + of undefined type [line: 49]
< .   .   .   .   Child: 0  Op: >= of type bool [line: 11]
< .   .   .   .   Child: 0  Op: [ of type char [line: 83]
< .   .   .   .   Child: 0  Op: not of type bool [line: 13]
< .   .   .   .   Child: 0  Op: not of type bool [line: 14]
< .   .   .   .   Child: 0  Var: i of type int [line: 69]
< .   .   .   .   Child: 1  Assign: := of type int [line: 50]
< .   .   .   .   Child: 1  Assign: := of type int [line: 70]
< .   .   .   .   Child: 1  Const 'r' of type char [line: 83]
< .   .   .   .   Child: 1  Const 222 of type int [line: 9]
< .   .   .   .   Child: 1  Const 3 of type int [line: 68]
< .   .   .   .   Child: 1  Const 333 of type int [line: 10]
< .   .   .   .   Child: 1  Const 666 of type int [line: 11]
< .   .   .   .   Child: 1  Const 807 of type int [line: 85]
< .   .   .   .   Child: 1  Const 888 of type int [line: 11]
< .   .   .   .   Child: 1  Const true of type bool [line: 15]
< .   .   .   .   Child: 1  Id: a of type int [line: 12]
< .   .   .   .   Child: 1  Id: a of type int [line: 41]
< .   .   .   .   Child: 1  Id: aa of undefined type [line: 47]
< .   .   .   .   Child: 1  Id: aa of undefined type [line: 48]
< .   .   .   .   Child: 1  Id: b of type bool [line: 48]
< .   .   .   .   Child: 1  Id: z of type int [line: 47]
< .   .   .   .   Child: 1  Op: * of undefined type [line: 49]
< .   .   .   .   Child: 1  Op: [ of type int [line: 42]
< .   .   .   .   Child: 1  While [line: 13]
< .   .   .   .   Child: 1  While [line: 14]
< .   .   .   .   Child: 2  Const 1212 of type int [line: 13]
< .   .   .   .   Child: 2  Const 1414 of type int [line: 14]
< .   .   .   .   Child: 2  Const 555 of type int [line: 11]
< .   .   .   .   Child: 2  Id: aa of undefined type [line: 48]
< .   .   .   .   Child: 2  Op: % of undefined type [line: 49]
< .   .   .   .   Sibling: 1  Assign: := of type int [line: 51]
< .   .   .   Child: 0  Assign: := of type bool [line: 15]
< .   .   .   Child: 0  Call: ant of type int [line: 82]
< .   .   .   Child: 0  Const 'm' of type char [line: 64]
< .   .   .   Child: 0  Const 11 of type int [line: 45]
< .   .   .   Child: 0  Const 111 of type int [line: 1]
< .   .   .   Child: 0  Const 1818 of type int [line: 20]
< .   .   .   Child: 0  Const 2020 of type int [line: 22]
< .   .   .   Child: 0  Const 676 of type int [line: 80]
< .   .   .   Child: 0  Const false of type bool [line: 17]
< .   .   .   Child: 0  Const false of type bool [line: 3]
< .   .   .   Child: 0  Const is array "cows" of type char [line: 77]
< .   .   .   Child: 0  Id: a of type int [line: 19]
< .   .   .   Child: 0  Id: a of type int [line: 21]
< .   .   .   Child: 0  Id: a of type int [line: 23]
< .   .   .   Child: 0  Id: a of type int [line: 25]
< .   .   .   Child: 0  Id: a of type int [line: 26]
< .   .   .   Child: 0  Id: a of type int [line: 27]
< .   .   .   Child: 0  Id: a of type int [line: 28]
< .   .   .   Child: 0  Id: a of type int [line: 30]
< .   .   .   Child: 0  Id: a of type int [line: 32]
< .   .   .   Child: 0  Id: a of type int [line: 5]
< .   .   .   Child: 0  Id: aa of type int [line: 40]
< .   .   .   Child: 0  Id: aa of type int [line: 54]
< .   .   .   Child: 0  Id: aa of type int [line: 57]
< .   .   .   Child: 0  Id: aa of type int [line: 60]
< .   .   .   Child: 0  Id: b of type bool [line: 13]
< .   .   .   Child: 0  Id: b of type bool [line: 14]
< .   .   .   Child: 0  Id: b of type bool [line: 31]
< .   .   .   Child: 0  Id: b of type bool [line: 6]
< .   .   .   Child: 0  Id: ba of type bool [line: 44]
< .   .   .   Child: 0  Id: ba of type bool [line: 55]
< .   .   .   Child: 0  Id: ba of type bool [line: 58]
< .   .   .   Child: 0  Id: bbb of type bool [line: 83]
< .   .   .   Child: 0  Id: c of type char [line: 7]
< .   .   .   Child: 0  Id: ca of type char [line: 56]
< .   .   .   Child: 0  Id: ca of type char [line: 59]
< .   .   .   Child: 0  Id: ca of type char [line: 62]
< .   .   .   Child: 0  Op: + of type int [line: 85]
< .   .   .   Child: 0  Op: < of type bool [line: 10]
< .   .   .   Child: 0  Op: <= of type bool [line: 11]
< .   .   .   Child: 0  Op: = of type bool [line: 12]
< .   .   .   Child: 0  Op: = of type bool [line: 68]
< .   .   .   Child: 0  Op: > of type bool [line: 9]
< .   .   .   Child: 0  Op: [ of type bool [line: 41]
< .   .   .   Child: 0  Op: [ of type char [line: 42]
< .   .   .   Child: 0  Var: z of type int [line: 47]
< .   .   .   Child: 0  Var: z of type int [line: 48]
< .   .   .   Child: 0  Var: z of type int [line: 49]
< .   .   .   Child: 1  Break [line: 17]
< .   .   .   Child: 1  Compound [line: 68]
< .   .   .   Child: 1  Const 'z' of type char [line: 7]
< .   .   .   Child: 1  Const 1 of type int [line: 25]
< .   .   .   Child: 1  Const 1010 of type int [line: 12]
< .   .   .   Child: 1  Const 1616 of type int [line: 15]
< .   .   .   Child: 1  Const 1717 of type int [line: 19]
< .   .   .   Child: 1  Const 1919 of type int [line: 21]
< .   .   .   Child: 1  Const 2 of type int [line: 26]
< .   .   .   Child: 1  Const 2 of type int [line: 40]
< .   .   .   Child: 1  Const 2121 of type int [line: 23]
< .   .   .   Child: 1  Const 222 of type int [line: 5]
< .   .   .   Child: 1  Const 3 of type int [line: 27]
< .   .   .   Child: 1  Const 333 of type int [line: 9]
< .   .   .   Child: 1  Const 4 of type int [line: 28]
< .   .   .   Child: 1  Const 444 of type int [line: 10]
< .   .   .   Child: 1  Const is array "dogs are great" of type char [line: 62]
< .   .   .   Child: 1  Const true of type bool [line: 6]
< .   .   .   Child: 1  Id: a of type int [line: 20]
< .   .   .   Child: 1  Id: a of type int [line: 22]
< .   .   .   Child: 1  Id: aa of type int [line: 54]
< .   .   .   Child: 1  Id: aa of type int [line: 57]
< .   .   .   Child: 1  Id: aa of type int [line: 60]
< .   .   .   Child: 1  Id: b of type bool [line: 41]
< .   .   .   Child: 1  Id: ba of type bool [line: 55]
< .   .   .   Child: 1  Id: ba of type bool [line: 58]
< .   .   .   Child: 1  Id: c of type char [line: 42]
< .   .   .   Child: 1  Id: ca of type char [line: 56]
< .   .   .   Child: 1  Id: ca of type char [line: 59]
< .   .   .   Child: 1  If [line: 11]
< .   .   .   Child: 1  If [line: 13]
< .   .   .   Child: 1  If [line: 14]
< .   .   .   Child: 1  Op: >< of type bool [line: 83]
< .   .   .   Child: 1  Range [line: 47]
< .   .   .   Child: 1  Range [line: 48]
< .   .   .   Child: 1  Range [line: 49]
< .   .   .   Child: 2  Compound [line: 49]
< .   .   .   Child: 2  Const 1515 of type int [line: 14]
< .   .   .   Child: 2  Const 555 of type int [line: 10]
< .   .   .   Child: 2  Op: + of type int [line: 47]
< .   .   .   Child: 2  Op: and of type bool [line: 48]
< .   .   .   Sibling: 1  Call: cat of type char [line: 82]
< .   .   .   Sibling: 1  Const 'g' of type char [line: 80]
< .   .   Child: 0  Var: a of type int [line: 37]
< .   .   Child: 0  Var: b of type bool [line: 3]
< .   .   Child: 0  Var: bbb of type bool [line: 76]
< .   .   Child: 1  Assign: := of type int [line: 5]
< .   .   Child: 1  Call: ant of type int [line: 79]
< .   .   Child: 1  If [line: 68]
< .   .   Child: 1  Op: [ of type int [line: 40]
< .   .   Child: 1  Return [line: 1]
< .   .   Sibling: 1  Assign: := of type bool [line: 41]
< .   .   Sibling: 1  Assign: := of type bool [line: 6]
< .   .   Sibling: 1  Call: bat of type void [line: 80]
< .   .   Sibling: 1  Var: b of type bool [line: 37]
< .   .   Sibling: 1  Var: ccc is array of type char [line: 77]
< .   .   Sibling: 10  Op: >< of type bool [line: 56]
< .   .   Sibling: 10  While [line: 17]
< .   .   Sibling: 11  Op: + of type int [line: 19]
< .   .   Sibling: 11  Op: > of type bool [line: 57]
< .   .   Sibling: 12  Op: - of type int [line: 20]
< .   .   Sibling: 12  Op: >= of type bool [line: 58]
< .   .   Sibling: 13  Op: * of type int [line: 21]
< .   .   Sibling: 13  Op: < of type bool [line: 59]
< .   .   Sibling: 14  Op: / of type int [line: 22]
< .   .   Sibling: 14  Op: <= of type bool [line: 60]
< .   .   Sibling: 15  Assign: := of type char [line: 62]
< .   .   Sibling: 15  Op: % of type int [line: 23]
< .   .   Sibling: 16  Assign: += of type int [line: 25]
< .   .   Sibling: 16  Return [line: 64]
< .   .   Sibling: 17  Assign: -= of type int [line: 26]
< .   .   Sibling: 18  Assign: *= of type int [line: 27]
< .   .   Sibling: 19  Assign: /= of type int [line: 28]
< .   .   Sibling: 2  Assign: := of type char [line: 42]
< .   .   Sibling: 2  Assign: := of type char [line: 7]
< .   .   Sibling: 2  Call: cat of type char [line: 81]
< .   .   Sibling: 2  Var: c of type char [line: 37]
< .   .   Sibling: 20  Op: chsign of type int [line: 30]
< .   .   Sibling: 21  Op: not of type bool [line: 31]
< .   .   Sibling: 22  Op: ? of type int [line: 32]
< .   .   Sibling: 3  Call: bat of type void [line: 82]
< .   .   Sibling: 3  If [line: 9]
< .   .   Sibling: 3  Op: sizeof of type int [line: 44]
< .   .   Sibling: 3  Var: aa is array of type int [line: 38]
< .   .   Sibling: 4  Assign: := of type bool [line: 83]
< .   .   Sibling: 4  If [line: 10]
< .   .   Sibling: 4  Op: ? of type int [line: 45]
< .   .   Sibling: 4  Var: ba is array of type bool [line: 38]
< .   .   Sibling: 5  For [line: 47]
< .   .   Sibling: 5  If [line: 11]
< .   .   Sibling: 5  Return [line: 85]
< .   .   Sibling: 5  Var: ca is array of type char [line: 38]
< .   .   Sibling: 6  For [line: 48]
< .   .   Sibling: 6  While [line: 12]
< .   .   Sibling: 7  For [line: 49]
< .   .   Sibling: 7  If [line: 13]
< .   .   Sibling: 8  Assign: := of type int [line: 54]
< .   .   Sibling: 8  If [line: 14]
< .   .   Sibling: 9  If [line: 15]
< .   .   Sibling: 9  Op: = of type bool [line: 55]
< .   Child: 0  Parm: a of type int [line: 2]
< .   Child: 0  Parm: i of type int [line: 67]
< .   Child: 1  Compound [line: 1]
< .   Child: 1  Compound [line: 2]
< .   Child: 1  Compound [line: 36]
< .   Child: 1  Compound [line: 67]
< .   Child: 1  Compound [line: 75]
< .   Sibling: 1  Parm: c of type char [line: 2]
< Func: ant returns type int [line: 1]
< Number of errors: 0
< Number of warnings: 5
< Sibling: 1  Func: bat returns type void [line: 2]
< Sibling: 2  Func: cat returns type char [line: 35]
< Sibling: 3  Func: dog returns type void [line: 67]
< Sibling: 4  Func: main returns type int [line: 74]
---
> ERROR(47): Cannot use array in position 1 in range of for statement.
> ERROR(47): Cannot use array in position 2 in range of for statement.
> ERROR(48): Cannot use array in position 1 in range of for statement.
> ERROR(48): Cannot use array in position 2 in range of for statement.
> ERROR(48): Cannot use array in position 3 in range of for statement.
> ERROR(48): Expecting type int in position 1 in range of for statement but got type bool.
> Number of errors: 6
> Number of warnings: 6
240a13
> WARNING(67): The function 'dog' seems not to be used.
1,4c1,17
< ERROR(11): Symbol 'output' is not declared.
< ERROR(12): Symbol 'output' is not declared.
< ERROR(13): Symbol 'output' is not declared.
< Number of errors: 3
---
> .   .   .   .   Child: 0  Id: a of type int [line: 11]
> .   .   .   .   Child: 0  Id: b of type int [line: 12]
> .   .   .   .   Child: 0  Id: c of type int [line: 13]
> .   .   .   Child: 0  Id: c of type int [line: 9]
> .   .   .   Child: 0  Op: sizeof of type int [line: 11]
> .   .   .   Child: 0  Op: sizeof of type int [line: 12]
> .   .   .   Child: 0  Op: sizeof of type int [line: 13]
> .   .   .   Child: 1  Const 22 of type int [line: 9]
> .   .   Child: 0  Var: b is array of type int [line: 6]
> .   .   Child: 1  Op: [ of type int [line: 9]
> .   .   Sibling: 1  Const 999 of type int [line: 10]
> .   .   Sibling: 1  Var: c is array of type int [line: 7]
> .   .   Sibling: 2  Call: output of type void [line: 11]
> .   .   Sibling: 3  Call: output of type void [line: 12]
> .   .   Sibling: 4  Call: output of type void [line: 13]
> .   Child: 1  Compound [line: 5]
> Number of errors: 0
5a19,20
> Sibling: 1  Func: main returns type void [line: 4]
> Var: a is array of type int [line: 2]
4c4,7
< Number of errors: 3
---
> ERROR(6): Initializer for variable 'bb' requires both operands be arrays or not but variable is an array and rhs is not an array.
> ERROR(7): Initializer for variable 'cc' requires both operands be arrays or not but variable is an array and rhs is not an array.
> ERROR(8): Initializer for variable 'ii' requires both operands be arrays or not but variable is an array and rhs is not an array.
> Number of errors: 6
1,11c1,72
< ERROR(10): Symbol 'outputb' is not declared.
< ERROR(12): Symbol 'outputb' is not declared.
< ERROR(14): Symbol 'outputb' is not declared.
< ERROR(16): Symbol 'outputb' is not declared.
< ERROR(17): Symbol 'outnl' is not declared.
< ERROR(20): Symbol 'outputb' is not declared.
< ERROR(22): Symbol 'outputb' is not declared.
< ERROR(24): Symbol 'outputb' is not declared.
< ERROR(26): Symbol 'outputb' is not declared.
< ERROR(27): Symbol 'outnl' is not declared.
< Number of errors: 10
---
> .   .   .   .   Child: 0  Id: gy of type bool [line: 11]
> .   .   .   .   Child: 0  Id: gy of type bool [line: 12]
> .   .   .   .   Child: 0  Id: py of type bool [line: 21]
> .   .   .   .   Child: 0  Id: py of type bool [line: 22]
> .   .   .   .   Child: 0  Id: sy of type bool [line: 25]
> .   .   .   .   Child: 0  Id: sy of type bool [line: 26]
> .   .   .   .   Child: 0  Id: y of type bool [line: 15]
> .   .   .   .   Child: 0  Id: y of type bool [line: 16]
> .   .   .   .   Child: 1  Const 9 of type int [line: 11]
> .   .   .   .   Child: 1  Const 9 of type int [line: 12]
> .   .   .   .   Child: 1  Const 9 of type int [line: 15]
> .   .   .   .   Child: 1  Const 9 of type int [line: 16]
> .   .   .   .   Child: 1  Const 9 of type int [line: 21]
> .   .   .   .   Child: 1  Const 9 of type int [line: 22]
> .   .   .   .   Child: 1  Const 9 of type int [line: 25]
> .   .   .   .   Child: 1  Const 9 of type int [line: 26]
> .   .   .   Child: 0  Id: gx of type bool [line: 10]
> .   .   .   Child: 0  Id: gx of type bool [line: 9]
> .   .   .   Child: 0  Id: px of type bool [line: 19]
> .   .   .   Child: 0  Id: px of type bool [line: 20]
> .   .   .   Child: 0  Id: sx of type bool [line: 23]
> .   .   .   Child: 0  Id: sx of type bool [line: 24]
> .   .   .   Child: 0  Id: x of type bool [line: 13]
> .   .   .   Child: 0  Id: x of type bool [line: 14]
> .   .   .   Child: 0  Id: zx of type bool [line: 34]
> .   .   .   Child: 0  Op: [ of type bool [line: 11]
> .   .   .   Child: 0  Op: [ of type bool [line: 12]
> .   .   .   Child: 0  Op: [ of type bool [line: 15]
> .   .   .   Child: 0  Op: [ of type bool [line: 16]
> .   .   .   Child: 0  Op: [ of type bool [line: 21]
> .   .   .   Child: 0  Op: [ of type bool [line: 22]
> .   .   .   Child: 0  Op: [ of type bool [line: 25]
> .   .   .   Child: 0  Op: [ of type bool [line: 26]
> .   .   .   Child: 1  Const true of type bool [line: 11]
> .   .   .   Child: 1  Const true of type bool [line: 13]
> .   .   .   Child: 1  Const true of type bool [line: 15]
> .   .   .   Child: 1  Const true of type bool [line: 19]
> .   .   .   Child: 1  Const true of type bool [line: 21]
> .   .   .   Child: 1  Const true of type bool [line: 23]
> .   .   .   Child: 1  Const true of type bool [line: 25]
> .   .   .   Child: 1  Const true of type bool [line: 9]
> .   .   .   Sibling: 1  Id: zy of type bool [line: 34]
> .   .   Child: 0  Var: x of type bool [line: 6]
> .   .   Child: 0  Var: zx of type bool [line: 33]
> .   .   Child: 1  Assign: := of type bool [line: 9]
> .   .   Child: 1  Call: esperanza of type void [line: 34]
> .   .   Sibling: 1  Call: outputb of type void [line: 10]
> .   .   Sibling: 1  Var: y is array of type bool [line: 6]
> .   .   Sibling: 1  Var: zy is array of type bool [line: 33]
> .   .   Sibling: 10  Call: outputb of type void [line: 20]
> .   .   Sibling: 11  Assign: := of type bool [line: 21]
> .   .   Sibling: 12  Call: outputb of type void [line: 22]
> .   .   Sibling: 13  Assign: := of type bool [line: 23]
> .   .   Sibling: 14  Call: outputb of type void [line: 24]
> .   .   Sibling: 15  Assign: := of type bool [line: 25]
> .   .   Sibling: 16  Call: outputb of type void [line: 26]
> .   .   Sibling: 17  Call: outnl of type void [line: 27]
> .   .   Sibling: 2  Assign: := of type bool [line: 11]
> .   .   Sibling: 2  Var: sx of type bool [line: 7]
> .   .   Sibling: 3  Call: outputb of type void [line: 12]
> .   .   Sibling: 3  Var: sy is array of type bool [line: 7]
> .   .   Sibling: 4  Assign: := of type bool [line: 13]
> .   .   Sibling: 5  Call: outputb of type void [line: 14]
> .   .   Sibling: 6  Assign: := of type bool [line: 15]
> .   .   Sibling: 7  Call: outputb of type void [line: 16]
> .   .   Sibling: 8  Call: outnl of type void [line: 17]
> .   .   Sibling: 9  Assign: := of type bool [line: 19]
> .   Child: 0  Parm: px of type bool [line: 4]
> .   Child: 1  Compound [line: 32]
> .   Child: 1  Compound [line: 5]
> .   Sibling: 1  Parm: py is array of type bool [line: 4]
> Number of errors: 0
12a74,77
> Sibling: 1  Var: gy is array of type bool [line: 2]
> Sibling: 2  Func: esperanza returns type void [line: 4]
> Sibling: 3  Func: main returns type void [line: 31]
> Var: gx of type bool [line: 2]
1,11c1,72
< ERROR(10): Symbol 'outputc' is not declared.
< ERROR(12): Symbol 'outputc' is not declared.
< ERROR(14): Symbol 'outputc' is not declared.
< ERROR(16): Symbol 'outputc' is not declared.
< ERROR(17): Symbol 'outnl' is not declared.
< ERROR(19): Symbol 'outputc' is not declared.
< ERROR(21): Symbol 'outputc' is not declared.
< ERROR(23): Symbol 'outputc' is not declared.
< ERROR(25): Symbol 'outputc' is not declared.
< ERROR(26): Symbol 'outnl' is not declared.
< Number of errors: 10
---
> .   .   .   .   Child: 0  Id: gy of type char [line: 11]
> .   .   .   .   Child: 0  Id: gy of type char [line: 12]
> .   .   .   .   Child: 0  Id: py of type char [line: 20]
> .   .   .   .   Child: 0  Id: py of type char [line: 21]
> .   .   .   .   Child: 0  Id: sy of type char [line: 24]
> .   .   .   .   Child: 0  Id: sy of type char [line: 25]
> .   .   .   .   Child: 0  Id: y of type char [line: 15]
> .   .   .   .   Child: 0  Id: y of type char [line: 16]
> .   .   .   .   Child: 1  Const 9 of type int [line: 11]
> .   .   .   .   Child: 1  Const 9 of type int [line: 12]
> .   .   .   .   Child: 1  Const 9 of type int [line: 15]
> .   .   .   .   Child: 1  Const 9 of type int [line: 16]
> .   .   .   .   Child: 1  Const 9 of type int [line: 20]
> .   .   .   .   Child: 1  Const 9 of type int [line: 21]
> .   .   .   .   Child: 1  Const 9 of type int [line: 24]
> .   .   .   .   Child: 1  Const 9 of type int [line: 25]
> .   .   .   Child: 0  Id: gx of type char [line: 10]
> .   .   .   Child: 0  Id: gx of type char [line: 9]
> .   .   .   Child: 0  Id: px of type char [line: 18]
> .   .   .   Child: 0  Id: px of type char [line: 19]
> .   .   .   Child: 0  Id: sx of type char [line: 22]
> .   .   .   Child: 0  Id: sx of type char [line: 23]
> .   .   .   Child: 0  Id: x of type char [line: 13]
> .   .   .   Child: 0  Id: x of type char [line: 14]
> .   .   .   Child: 0  Id: zx of type char [line: 33]
> .   .   .   Child: 0  Op: [ of type char [line: 11]
> .   .   .   Child: 0  Op: [ of type char [line: 12]
> .   .   .   Child: 0  Op: [ of type char [line: 15]
> .   .   .   Child: 0  Op: [ of type char [line: 16]
> .   .   .   Child: 0  Op: [ of type char [line: 20]
> .   .   .   Child: 0  Op: [ of type char [line: 21]
> .   .   .   Child: 0  Op: [ of type char [line: 24]
> .   .   .   Child: 0  Op: [ of type char [line: 25]
> .   .   .   Child: 1  Const 'a' of type char [line: 9]
> .   .   .   Child: 1  Const 'b' of type char [line: 11]
> .   .   .   Child: 1  Const 'c' of type char [line: 13]
> .   .   .   Child: 1  Const 'd' of type char [line: 15]
> .   .   .   Child: 1  Const 'e' of type char [line: 18]
> .   .   .   Child: 1  Const 'f' of type char [line: 20]
> .   .   .   Child: 1  Const 'f' of type char [line: 22]
> .   .   .   Child: 1  Const 'h' of type char [line: 24]
> .   .   .   Sibling: 1  Id: zy of type char [line: 33]
> .   .   Child: 0  Var: x of type char [line: 6]
> .   .   Child: 0  Var: zx of type char [line: 32]
> .   .   Child: 1  Assign: := of type char [line: 9]
> .   .   Child: 1  Call: esperanza of type void [line: 33]
> .   .   Sibling: 1  Call: outputc of type void [line: 10]
> .   .   Sibling: 1  Var: y is array of type char [line: 6]
> .   .   Sibling: 1  Var: zy is array of type char [line: 32]
> .   .   Sibling: 10  Call: outputc of type void [line: 19]
> .   .   Sibling: 11  Assign: := of type char [line: 20]
> .   .   Sibling: 12  Call: outputc of type void [line: 21]
> .   .   Sibling: 13  Assign: := of type char [line: 22]
> .   .   Sibling: 14  Call: outputc of type void [line: 23]
> .   .   Sibling: 15  Assign: := of type char [line: 24]
> .   .   Sibling: 16  Call: outputc of type void [line: 25]
> .   .   Sibling: 17  Call: outnl of type void [line: 26]
> .   .   Sibling: 2  Assign: := of type char [line: 11]
> .   .   Sibling: 2  Var: sx of type char [line: 7]
> .   .   Sibling: 3  Call: outputc of type void [line: 12]
> .   .   Sibling: 3  Var: sy is array of type char [line: 7]
> .   .   Sibling: 4  Assign: := of type char [line: 13]
> .   .   Sibling: 5  Call: outputc of type void [line: 14]
> .   .   Sibling: 6  Assign: := of type char [line: 15]
> .   .   Sibling: 7  Call: outputc of type void [line: 16]
> .   .   Sibling: 8  Call: outnl of type void [line: 17]
> .   .   Sibling: 9  Assign: := of type char [line: 18]
> .   Child: 0  Parm: px of type char [line: 4]
> .   Child: 1  Compound [line: 31]
> .   Child: 1  Compound [line: 5]
> .   Sibling: 1  Parm: py is array of type char [line: 4]
> Number of errors: 0
12a74,77
> Sibling: 1  Var: gy is array of type char [line: 2]
> Sibling: 2  Func: esperanza returns type void [line: 4]
> Sibling: 3  Func: main returns type void [line: 30]
> Var: gx of type char [line: 2]
1,11c1,72
< ERROR(10): Symbol 'output' is not declared.
< ERROR(12): Symbol 'output' is not declared.
< ERROR(14): Symbol 'output' is not declared.
< ERROR(16): Symbol 'output' is not declared.
< ERROR(17): Symbol 'outnl' is not declared.
< ERROR(19): Symbol 'output' is not declared.
< ERROR(21): Symbol 'output' is not declared.
< ERROR(23): Symbol 'output' is not declared.
< ERROR(25): Symbol 'output' is not declared.
< ERROR(26): Symbol 'outnl' is not declared.
< Number of errors: 10
---
> .   .   .   .   Child: 0  Id: gy of type int [line: 11]
> .   .   .   .   Child: 0  Id: gy of type int [line: 12]
> .   .   .   .   Child: 0  Id: py of type int [line: 20]
> .   .   .   .   Child: 0  Id: py of type int [line: 21]
> .   .   .   .   Child: 0  Id: sy of type int [line: 24]
> .   .   .   .   Child: 0  Id: sy of type int [line: 25]
> .   .   .   .   Child: 0  Id: y of type int [line: 15]
> .   .   .   .   Child: 0  Id: y of type int [line: 16]
> .   .   .   .   Child: 1  Const 9 of type int [line: 11]
> .   .   .   .   Child: 1  Const 9 of type int [line: 12]
> .   .   .   .   Child: 1  Const 9 of type int [line: 15]
> .   .   .   .   Child: 1  Const 9 of type int [line: 16]
> .   .   .   .   Child: 1  Const 9 of type int [line: 20]
> .   .   .   .   Child: 1  Const 9 of type int [line: 21]
> .   .   .   .   Child: 1  Const 9 of type int [line: 24]
> .   .   .   .   Child: 1  Const 9 of type int [line: 25]
> .   .   .   Child: 0  Id: gx of type int [line: 10]
> .   .   .   Child: 0  Id: gx of type int [line: 9]
> .   .   .   Child: 0  Id: px of type int [line: 18]
> .   .   .   Child: 0  Id: px of type int [line: 19]
> .   .   .   Child: 0  Id: sx of type int [line: 22]
> .   .   .   Child: 0  Id: sx of type int [line: 23]
> .   .   .   Child: 0  Id: x of type int [line: 13]
> .   .   .   Child: 0  Id: x of type int [line: 14]
> .   .   .   Child: 0  Id: zx of type int [line: 33]
> .   .   .   Child: 0  Op: [ of type int [line: 11]
> .   .   .   Child: 0  Op: [ of type int [line: 12]
> .   .   .   Child: 0  Op: [ of type int [line: 15]
> .   .   .   Child: 0  Op: [ of type int [line: 16]
> .   .   .   Child: 0  Op: [ of type int [line: 20]
> .   .   .   Child: 0  Op: [ of type int [line: 21]
> .   .   .   Child: 0  Op: [ of type int [line: 24]
> .   .   .   Child: 0  Op: [ of type int [line: 25]
> .   .   .   Child: 1  Const 111 of type int [line: 9]
> .   .   .   Child: 1  Const 222 of type int [line: 11]
> .   .   .   Child: 1  Const 333 of type int [line: 13]
> .   .   .   Child: 1  Const 444 of type int [line: 15]
> .   .   .   Child: 1  Const 555 of type int [line: 18]
> .   .   .   Child: 1  Const 666 of type int [line: 20]
> .   .   .   Child: 1  Const 777 of type int [line: 22]
> .   .   .   Child: 1  Const 888 of type int [line: 24]
> .   .   .   Sibling: 1  Id: zy of type int [line: 33]
> .   .   Child: 0  Var: x of type int [line: 6]
> .   .   Child: 0  Var: zx of type int [line: 32]
> .   .   Child: 1  Assign: := of type int [line: 9]
> .   .   Child: 1  Call: esperanza of type void [line: 33]
> .   .   Sibling: 1  Call: output of type void [line: 10]
> .   .   Sibling: 1  Var: y is array of type int [line: 6]
> .   .   Sibling: 1  Var: zy is array of type int [line: 32]
> .   .   Sibling: 10  Call: output of type void [line: 19]
> .   .   Sibling: 11  Assign: := of type int [line: 20]
> .   .   Sibling: 12  Call: output of type void [line: 21]
> .   .   Sibling: 13  Assign: := of type int [line: 22]
> .   .   Sibling: 14  Call: output of type void [line: 23]
> .   .   Sibling: 15  Assign: := of type int [line: 24]
> .   .   Sibling: 16  Call: output of type void [line: 25]
> .   .   Sibling: 17  Call: outnl of type void [line: 26]
> .   .   Sibling: 2  Assign: := of type int [line: 11]
> .   .   Sibling: 2  Var: sx of type int [line: 7]
> .   .   Sibling: 3  Call: output of type void [line: 12]
> .   .   Sibling: 3  Var: sy is array of type int [line: 7]
> .   .   Sibling: 4  Assign: := of type int [line: 13]
> .   .   Sibling: 5  Call: output of type void [line: 14]
> .   .   Sibling: 6  Assign: := of type int [line: 15]
> .   .   Sibling: 7  Call: output of type void [line: 16]
> .   .   Sibling: 8  Call: outnl of type void [line: 17]
> .   .   Sibling: 9  Assign: := of type int [line: 18]
> .   Child: 0  Parm: px of type int [line: 4]
> .   Child: 1  Compound [line: 31]
> .   Child: 1  Compound [line: 5]
> .   Sibling: 1  Parm: py is array of type int [line: 4]
> Number of errors: 0
12a74,77
> Sibling: 1  Var: gy is array of type int [line: 2]
> Sibling: 2  Func: esperanza returns type void [line: 4]
> Sibling: 3  Func: main returns type void [line: 30]
> Var: gx of type int [line: 2]
1,5c1,31
< ERROR(10): Symbol 'output' is not declared.
< ERROR(12): Symbol 'outnl' is not declared.
< ERROR(16): Symbol 'output' is not declared.
< ERROR(17): Symbol 'outnl' is not declared.
< Number of errors: 4
---
> .   .   .   .   .   .   .   .   Child: 0  Id: i of type int [line: 11]
> .   .   .   .   .   .   .   .   Child: 1  Const 4 of type int [line: 11]
> .   .   .   .   .   .   .   Child: 0  Id: i of type int [line: 10]
> .   .   .   .   .   .   .   Child: 0  Id: i of type int [line: 9]
> .   .   .   .   .   .   .   Child: 0  Op: > of type bool [line: 11]
> .   .   .   .   .   .   .   Child: 1  Break [line: 11]
> .   .   .   .   .   .   Child: 0  Id: i of type int [line: 14]
> .   .   .   .   .   .   Child: 1  Assign: ++ of type int [line: 9]
> .   .   .   .   .   .   Child: 1  Const 8 of type int [line: 14]
> .   .   .   .   .   .   Sibling: 1  Call: output of type void [line: 10]
> .   .   .   .   .   .   Sibling: 2  If [line: 11]
> .   .   .   .   .   .   Sibling: 3  Call: outnl of type void [line: 12]
> .   .   .   .   .   Child: 0  Const true of type bool [line: 8]
> .   .   .   .   .   Child: 0  Op: > of type bool [line: 14]
> .   .   .   .   .   Child: 1  Break [line: 14]
> .   .   .   .   .   Child: 1  Compound [line: 8]
> .   .   .   .   Child: 1  While [line: 8]
> .   .   .   .   Sibling: 1  If [line: 14]
> .   .   .   Child: 0  Const true of type bool [line: 7]
> .   .   .   Child: 0  Id: i of type int [line: 16]
> .   .   .   Child: 0  Id: i of type int [line: 6]
> .   .   .   Child: 1  Compound [line: 7]
> .   .   .   Child: 1  Const 0 of type int [line: 6]
> .   .   Child: 0  Var: i of type int [line: 4]
> .   .   Child: 1  Assign: := of type int [line: 6]
> .   .   Sibling: 1  While [line: 7]
> .   .   Sibling: 2  Call: output of type void [line: 16]
> .   .   Sibling: 3  Call: outnl of type void [line: 17]
> .   Child: 1  Compound [line: 3]
> Func: main returns type void [line: 2]
> Number of errors: 0
6c6
< .   .   .   .   .   Child: 1  Id: x of undefined type [line: 5]
---
> .   .   .   .   .   Child: 1  Id: x of type int [line: 5]
1,12c1,2
< .   .   .   .   .   .   Child: 1  Break [line: 6]
< .   .   .   .   .   Child: 0  Const true of type bool [line: 5]
< .   .   .   .   .   Child: 1  Compound [line: 5]
< .   .   .   .   Child: 1  While [line: 5]
< .   .   .   .   Sibling: 1  Break [line: 8]
< .   .   .   Child: 0  Const true of type bool [line: 4]
< .   .   .   Child: 1  Compound [line: 4]
< .   .   Child: 1  While [line: 4]
< .   .   Sibling: 1  Break [line: 10]
< .   Child: 1  Compound [line: 3]
< Func: main returns type void [line: 2]
< Number of errors: 0
---
> ERROR(10): Cannot have a break statement outside of loop.
> Number of errors: 1
1,9c1,127
< ERROR(13): Symbol 'output' is not declared.
< ERROR(14): Symbol 'outputb' is not declared.
< ERROR(15): Symbol 'outputc' is not declared.
< ERROR(16): Symbol 'outnl' is not declared.
< ERROR(4): Symbol 'output' is not declared.
< ERROR(5): Symbol 'outputb' is not declared.
< ERROR(6): Symbol 'outputc' is not declared.
< ERROR(7): Symbol 'outnl' is not declared.
< Number of errors: 8
---
> .   .   .   .   .   Child: 0  Id: ga of type int [line: 60]
> .   .   .   .   .   Child: 0  Id: gb of type bool [line: 61]
> .   .   .   .   .   Child: 0  Id: gc of type char [line: 62]
> .   .   .   .   .   Child: 1  Const 1 of type int [line: 60]
> .   .   .   .   .   Child: 1  Const 2 of type int [line: 61]
> .   .   .   .   .   Child: 1  Const 3 of type int [line: 62]
> .   .   .   .   Child: 0  Id: a of type int [line: 13]
> .   .   .   .   Child: 0  Id: a of type int [line: 42]
> .   .   .   .   Child: 0  Id: b of type bool [line: 14]
> .   .   .   .   Child: 0  Id: b of type bool [line: 25]
> .   .   .   .   Child: 0  Id: b of type bool [line: 43]
> .   .   .   .   Child: 0  Id: c of type char [line: 15]
> .   .   .   .   Child: 0  Id: c of type char [line: 26]
> .   .   .   .   Child: 0  Id: c of type char [line: 44]
> .   .   .   .   Child: 0  Id: ga of type int [line: 50]
> .   .   .   .   Child: 0  Id: ga of type int [line: 64]
> .   .   .   .   Child: 0  Id: ga of type int [line: 65]
> .   .   .   .   Child: 0  Id: gb of type bool [line: 51]
> .   .   .   .   Child: 0  Id: gc of type char [line: 52]
> .   .   .   .   Child: 0  Op: [ of type bool [line: 61]
> .   .   .   .   Child: 0  Op: [ of type char [line: 62]
> .   .   .   .   Child: 0  Op: [ of type int [line: 60]
> .   .   .   .   Child: 1  Const 's' of type char [line: 62]
> .   .   .   .   Child: 1  Const 1 of type int [line: 13]
> .   .   .   .   Child: 1  Const 1 of type int [line: 42]
> .   .   .   .   Child: 1  Const 1 of type int [line: 50]
> .   .   .   .   Child: 1  Const 2 of type int [line: 14]
> .   .   .   .   Child: 1  Const 2 of type int [line: 25]
> .   .   .   .   Child: 1  Const 2 of type int [line: 43]
> .   .   .   .   Child: 1  Const 2 of type int [line: 51]
> .   .   .   .   Child: 1  Const 3 of type int [line: 15]
> .   .   .   .   Child: 1  Const 3 of type int [line: 26]
> .   .   .   .   Child: 1  Const 3 of type int [line: 44]
> .   .   .   .   Child: 1  Const 3 of type int [line: 52]
> .   .   .   .   Child: 1  Const 999 of type int [line: 60]
> .   .   .   .   Child: 1  Const true of type bool [line: 61]
> .   .   .   .   Sibling: 1  Id: gb of type bool [line: 64]
> .   .   .   .   Sibling: 2  Id: gc of type char [line: 64]
> .   .   .   Child: 0  Const 666 of type int [line: 45]
> .   .   .   Child: 0  Const 777 of type int [line: 46]
> .   .   .   Child: 0  Id: a of type int [line: 47]
> .   .   .   Child: 0  Id: a of type int [line: 48]
> .   .   .   Child: 0  Id: a of type int [line: 4]
> .   .   .   Child: 0  Id: b of type bool [line: 5]
> .   .   .   Child: 0  Id: c of type char [line: 6]
> .   .   .   Child: 0  Id: ga of type int [line: 53]
> .   .   .   Child: 0  Id: ga of type int [line: 54]
> .   .   .   Child: 0  Id: z of type int [line: 27]
> .   .   .   Child: 0  Op: [ of type bool [line: 14]
> .   .   .   Child: 0  Op: [ of type bool [line: 25]
> .   .   .   Child: 0  Op: [ of type bool [line: 43]
> .   .   .   Child: 0  Op: [ of type bool [line: 51]
> .   .   .   Child: 0  Op: [ of type char [line: 15]
> .   .   .   Child: 0  Op: [ of type char [line: 26]
> .   .   .   Child: 0  Op: [ of type char [line: 44]
> .   .   .   Child: 0  Op: [ of type char [line: 52]
> .   .   .   Child: 0  Op: [ of type int [line: 13]
> .   .   .   Child: 0  Op: [ of type int [line: 42]
> .   .   .   Child: 0  Op: [ of type int [line: 50]
> .   .   .   Child: 0  Var: ga is array of type int [line: 57]
> .   .   .   Child: 1  Assign: := of type int [line: 60]
> .   .   .   Child: 1  Const 'g' of type char [line: 52]
> .   .   .   Child: 1  Const 'z' of type char [line: 26]
> .   .   .   Child: 1  Const 'z' of type char [line: 44]
> .   .   .   Child: 1  Const 555 of type int [line: 42]
> .   .   .   Child: 1  Const 888 of type int [line: 50]
> .   .   .   Child: 1  Const false of type bool [line: 51]
> .   .   .   Child: 1  Const true of type bool [line: 25]
> .   .   .   Child: 1  Const true of type bool [line: 43]
> .   .   .   Sibling: 1  Assign: := of type bool [line: 61]
> .   .   .   Sibling: 1  Const false of type bool [line: 46]
> .   .   .   Sibling: 1  Const true of type bool [line: 45]
> .   .   .   Sibling: 1  Id: b of type bool [line: 27]
> .   .   .   Sibling: 1  Id: b of type bool [line: 47]
> .   .   .   Sibling: 1  Id: gb of type bool [line: 53]
> .   .   .   Sibling: 1  Var: gb is array of type bool [line: 58]
> .   .   .   Sibling: 2  Assign: := of type char [line: 62]
> .   .   .   Sibling: 2  Const 'c' of type char [line: 45]
> .   .   .   Sibling: 2  Const 'd' of type char [line: 46]
> .   .   .   Sibling: 2  Id: c of type char [line: 27]
> .   .   .   Sibling: 2  Id: c of type char [line: 47]
> .   .   .   Sibling: 2  Id: gc of type char [line: 53]
> .   .   .   Sibling: 2  Var: gc is array of type char [line: 59]
> .   .   .   Sibling: 3  Call: sioux of type void [line: 64]
> .   .   .   Sibling: 4  Call: comanche of type void [line: 65]
> .   .   Child: 0  Var: a is array of type int [line: 38]
> .   .   Child: 0  Var: b is array of type bool [line: 22]
> .   .   Child: 1  Assign: := of type bool [line: 25]
> .   .   Child: 1  Assign: := of type int [line: 42]
> .   .   Child: 1  Call: output of type void [line: 13]
> .   .   Child: 1  Call: output of type void [line: 4]
> .   .   Sibling: 1  Assign: := of type bool [line: 43]
> .   .   Sibling: 1  Assign: := of type char [line: 26]
> .   .   Sibling: 1  Call: outputb of type void [line: 14]
> .   .   Sibling: 1  Call: outputb of type void [line: 5]
> .   .   Sibling: 1  Var: b is array of type bool [line: 39]
> .   .   Sibling: 1  Var: c is array of type char [line: 23]
> .   .   Sibling: 10  Call: sioux of type void [line: 53]
> .   .   Sibling: 11  Call: comanche of type void [line: 54]
> .   .   Sibling: 12  Compound [line: 56]
> .   .   Sibling: 2  Assign: := of type char [line: 44]
> .   .   Sibling: 2  Call: outputc of type void [line: 15]
> .   .   Sibling: 2  Call: outputc of type void [line: 6]
> .   .   Sibling: 2  Call: sioux of type void [line: 27]
> .   .   Sibling: 2  Var: c is array of type char [line: 40]
> .   .   Sibling: 3  Call: cheyenne of type void [line: 45]
> .   .   Sibling: 3  Call: outnl of type void [line: 16]
> .   .   Sibling: 3  Call: outnl of type void [line: 7]
> .   .   Sibling: 4  Call: cheyenne of type void [line: 46]
> .   .   Sibling: 5  Call: sioux of type void [line: 47]
> .   .   Sibling: 6  Call: comanche of type void [line: 48]
> .   .   Sibling: 7  Assign: := of type int [line: 50]
> .   .   Sibling: 8  Assign: := of type bool [line: 51]
> .   .   Sibling: 9  Assign: := of type char [line: 52]
> .   Child: 0  Parm: a is array of type int [line: 11]
> .   Child: 0  Parm: a of type int [line: 2]
> .   Child: 0  Parm: z is array of type int [line: 20]
> .   Child: 1  Compound [line: 12]
> .   Child: 1  Compound [line: 21]
> .   Child: 1  Compound [line: 37]
> .   Child: 1  Compound [line: 3]
> .   Sibling: 1  Parm: b is array of type bool [line: 11]
> .   Sibling: 1  Parm: b of type bool [line: 2]
> .   Sibling: 2  Parm: c is array of type char [line: 11]
> .   Sibling: 2  Parm: c of type char [line: 2]
> Func: cheyenne returns type void [line: 2]
> Number of errors: 0
10a129,134
> Sibling: 1  Func: sioux returns type void [line: 11]
> Sibling: 2  Func: comanche returns type void [line: 20]
> Sibling: 3  Var: ga is array of type int [line: 32]
> Sibling: 4  Var: gb is array of type bool [line: 33]
> Sibling: 5  Var: gc is array of type char [line: 34]
> Sibling: 6  Func: main returns type void [line: 36]
1,9c1,52
< ERROR(10): Symbol 'output' is not declared.
< ERROR(12): Symbol 'output' is not declared.
< ERROR(17): Symbol 'output' is not declared.
< ERROR(19): Symbol 'output' is not declared.
< ERROR(29): Symbol 'output' is not declared.
< ERROR(3): Symbol 'output' is not declared.
< ERROR(30): Symbol 'outnl' is not declared.
< ERROR(5): Symbol 'outnl' is not declared.
< Number of errors: 8
---
> .   .   .   .   Child: 0  Id: w of type int [line: 27]
> .   .   .   .   Child: 0  Id: w of type int [line: 29]
> .   .   .   .   Child: 0  Id: x of type int [line: 17]
> .   .   .   .   Child: 0  Id: x of type int [line: 19]
> .   .   .   .   Child: 0  Id: y of type int [line: 10]
> .   .   .   .   Child: 0  Id: y of type int [line: 12]
> .   .   .   .   Child: 0  Id: z of type int [line: 3]
> .   .   .   .   Child: 0  Id: z of type int [line: 4]
> .   .   .   .   Child: 1  Const 7 of type int [line: 10]
> .   .   .   .   Child: 1  Const 7 of type int [line: 12]
> .   .   .   .   Child: 1  Const 7 of type int [line: 17]
> .   .   .   .   Child: 1  Const 7 of type int [line: 19]
> .   .   .   .   Child: 1  Const 7 of type int [line: 27]
> .   .   .   .   Child: 1  Const 7 of type int [line: 29]
> .   .   .   .   Child: 1  Const 7 of type int [line: 3]
> .   .   .   .   Child: 1  Const 7 of type int [line: 4]
> .   .   .   Child: 0  Id: w of type int [line: 28]
> .   .   .   Child: 0  Id: x of type int [line: 18]
> .   .   .   Child: 0  Id: y of type int [line: 11]
> .   .   .   Child: 0  Op: [ of type int [line: 10]
> .   .   .   Child: 0  Op: [ of type int [line: 12]
> .   .   .   Child: 0  Op: [ of type int [line: 17]
> .   .   .   Child: 0  Op: [ of type int [line: 19]
> .   .   .   Child: 0  Op: [ of type int [line: 27]
> .   .   .   Child: 0  Op: [ of type int [line: 29]
> .   .   .   Child: 0  Op: [ of type int [line: 3]
> .   .   .   Child: 0  Op: [ of type int [line: 4]
> .   .   .   Child: 1  Const 42 of type int [line: 27]
> .   .   .   Child: 1  Const 666 of type int [line: 4]
> .   .   Child: 0  Var: w is array of type int [line: 25]
> .   .   Child: 1  Assign: := of type int [line: 27]
> .   .   Child: 1  Call: output of type void [line: 10]
> .   .   Child: 1  Call: output of type void [line: 17]
> .   .   Child: 1  Call: output of type void [line: 3]
> .   .   Sibling: 1  Assign: := of type int [line: 4]
> .   .   Sibling: 1  Call: one of type void [line: 28]
> .   .   Sibling: 1  Call: three of type void [line: 11]
> .   .   Sibling: 1  Call: two of type void [line: 18]
> .   .   Sibling: 2  Call: outnl of type void [line: 5]
> .   .   Sibling: 2  Call: output of type void [line: 12]
> .   .   Sibling: 2  Call: output of type void [line: 19]
> .   .   Sibling: 2  Call: output of type void [line: 29]
> .   .   Sibling: 3  Call: outnl of type void [line: 30]
> .   Child: 0  Parm: x is array of type int [line: 16]
> .   Child: 0  Parm: y is array of type int [line: 9]
> .   Child: 0  Parm: z is array of type int [line: 2]
> .   Child: 1  Compound [line: 16]
> .   Child: 1  Compound [line: 24]
> .   Child: 1  Compound [line: 2]
> .   Child: 1  Compound [line: 9]
> Func: three returns type void [line: 2]
> Number of errors: 0
10a54,56
> Sibling: 1  Func: two returns type void [line: 9]
> Sibling: 2  Func: one returns type void [line: 16]
> Sibling: 3  Func: main returns type void [line: 23]
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
2,3c2
< ERROR(5): Initializer for variable 'roll' is not a constant expression.
< Number of errors: 2
---
> Number of errors: 1
6d5
< ERROR(4): Initializer for variable 'c' is not a constant expression.
12c11
< Number of errors: 11
---
> Number of errors: 10
1d0
< ERROR(3): Initializer for variable 'u' is not a constant expression.
3c2
< Number of errors: 2
---
> Number of errors: 1
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
118d117
< ERROR(34): Initializer for variable 'e' is not a constant expression.
152c151
< Number of errors: 151
---
> Number of errors: 150
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
2,3c2
< ERROR(5): Initializer for variable 'roll' is not a constant expression.
< Number of errors: 2
---
> Number of errors: 1
6d5
< ERROR(4): Initializer for variable 'c' is not a constant expression.
12c11
< Number of errors: 11
---
> Number of errors: 10
1d0
< ERROR(3): Initializer for variable 'u' is not a constant expression.
3c2
< Number of errors: 2
---
> Number of errors: 1
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
1,20d0
< .   .   .   .   Child: 0  Const 1 of type int [line: 12]
< .   .   .   .   Child: 1  Const 10 of type int [line: 12]
< .   .   .   Child: 0  Const true of type bool [line: 11]
< .   .   .   Child: 0  Const true of type bool [line: 9]
< .   .   .   Child: 0  Var: x of type int [line: 12]
< .   .   .   Child: 1  Range [line: 12]
< .   .   Child: 0  Var: x of type int [line: 6]
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
< .   Child: 1  Compound [line: 2]
< .   Child: 1  Compound [line: 5]
< Func: main returns type void [line: 2]
< Number of errors: 0
< Number of warnings: 3
< Sibling: 1  Func: dogs returns type void [line: 4]
< WARNING(12): The variable 'x' seems not to be used.
< WARNING(4): The function 'dogs' seems not to be used.
< WARNING(6): The variable 'x' seems not to be used.
1,20d0
< .   .   .   .   Child: 0  Const 1 of type int [line: 12]
< .   .   .   .   Child: 1  Const 10 of type int [line: 12]
< .   .   .   Child: 0  Const true of type bool [line: 11]
< .   .   .   Child: 0  Const true of type bool [line: 9]
< .   .   .   Child: 0  Var: x of type int [line: 12]
< .   .   .   Child: 1  Range [line: 12]
< .   .   Child: 0  Var: x of type int [line: 6]
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
< .   Child: 1  Compound [line: 2]
< .   Child: 1  Compound [line: 5]
< Func: main returns type void [line: 2]
< Number of errors: 0
< Number of warnings: 3
< Sibling: 1  Func: dogs returns type void [line: 4]
< WARNING(12): The variable 'x' seems not to be used.
< WARNING(4): The function 'dogs' seems not to be used.
< WARNING(6): The variable 'x' seems not to be used.
1,13c1,14
< .   .   .   .   Child: 0  Const 1 of type int [line: 12]
< .   .   .   .   Child: 1  Const 10 of type int [line: 12]
< .   .   .   Child: 0  Const true of type bool [line: 11]
< .   .   .   Child: 0  Const true of type bool [line: 9]
< .   .   .   Child: 0  Var: x of type int [line: 12]
< .   .   .   Child: 1  Range [line: 12]
< .   .   Child: 0  Var: x of type int [line: 6]
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
< .   Child: 1  Compound [line: 2]
< .   Child: 1  Compound [line: 5]
---
> .   .   .   .   Const 1 of type int [line: 12]
> .   .   .   .   Const 10 of type int [line: 12]
> .   .   .   Const true of type bool [line: 11]
> .   .   .   Const true of type bool [line: 9]
> .   .   .   Range [line: 12]
> .   .   .   Var: x of type int [line: 12]
> .   .   Compound [line: 13]
> .   .   For [line: 12]
> .   .   If [line: 9]
> .   .   Var: x of type int [line: 6]
> .   .   While [line: 11]
> .   Compound [line: 2]
> .   Compound [line: 5]
> Func: dogs returns type void [line: 4]
17d17
< Sibling: 1  Func: dogs returns type void [line: 4]
Binary files /dev/fd/63 and /dev/fd/62 differ
Binary files /dev/fd/63 and /dev/fd/62 differ
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
1,20d0
< .   .   .   .   Child: 0  Const 1 of type int [line: 12]
< .   .   .   .   Child: 1  Const 10 of type int [line: 12]
< .   .   .   Child: 0  Const true of type bool [line: 11]
< .   .   .   Child: 0  Const true of type bool [line: 9]
< .   .   .   Child: 0  Var: x of type int [line: 12]
< .   .   .   Child: 1  Range [line: 12]
< .   .   Child: 0  Var: x of type int [line: 6]
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
< .   Child: 1  Compound [line: 2]
< .   Child: 1  Compound [line: 5]
< Func: main returns type void [line: 2]
< Number of errors: 0
< Number of warnings: 3
< Sibling: 1  Func: dogs returns type void [line: 4]
< WARNING(12): The variable 'x' seems not to be used.
< WARNING(4): The function 'dogs' seems not to be used.
< WARNING(6): The variable 'x' seems not to be used.
1,20d0
< .   .   .   .   Child: 0  Const 1 of type int [line: 12]
< .   .   .   .   Child: 1  Const 10 of type int [line: 12]
< .   .   .   Child: 0  Const true of type bool [line: 11]
< .   .   .   Child: 0  Const true of type bool [line: 9]
< .   .   .   Child: 0  Var: x of type int [line: 12]
< .   .   .   Child: 1  Range [line: 12]
< .   .   Child: 0  Var: x of type int [line: 6]
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
< .   Child: 1  Compound [line: 2]
< .   Child: 1  Compound [line: 5]
< Func: main returns type void [line: 2]
< Number of errors: 0
< Number of warnings: 3
< Sibling: 1  Func: dogs returns type void [line: 4]
< WARNING(12): The variable 'x' seems not to be used.
< WARNING(4): The function 'dogs' seems not to be used.
< WARNING(6): The variable 'x' seems not to be used.
1,20d0
< .   .   .   .   Child: 0  Const 1 of type int [line: 12]
< .   .   .   .   Child: 1  Const 10 of type int [line: 12]
< .   .   .   Child: 0  Const true of type bool [line: 11]
< .   .   .   Child: 0  Const true of type bool [line: 9]
< .   .   .   Child: 0  Var: x of type int [line: 12]
< .   .   .   Child: 1  Range [line: 12]
< .   .   Child: 0  Var: x of type int [line: 6]
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
< .   Child: 1  Compound [line: 2]
< .   Child: 1  Compound [line: 5]
< Func: main returns type void [line: 2]
< Number of errors: 0
< Number of warnings: 3
< Sibling: 1  Func: dogs returns type void [line: 4]
< WARNING(12): The variable 'x' seems not to be used.
< WARNING(4): The function 'dogs' seems not to be used.
< WARNING(6): The variable 'x' seems not to be used.
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 2  If [line: 9]
> .   .   Sibling: 3  While [line: 11]
> .   .   Sibling: 4  For [line: 12]
> .   .   Sibling: 5  Compound [line: 13]
1,20d0
< .   .   .   .   Child: 0  Const 1 of type int [line: 12]
< .   .   .   .   Child: 1  Const 10 of type int [line: 12]
< .   .   .   Child: 0  Const true of type bool [line: 11]
< .   .   .   Child: 0  Const true of type bool [line: 9]
< .   .   .   Child: 0  Var: x of type int [line: 12]
< .   .   .   Child: 1  Range [line: 12]
< .   .   Child: 0  Var: x of type int [line: 6]
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
< .   Child: 1  Compound [line: 2]
< .   Child: 1  Compound [line: 5]
< Func: main returns type void [line: 2]
< Number of errors: 0
< Number of warnings: 3
< Sibling: 1  Func: dogs returns type void [line: 4]
< WARNING(12): The variable 'x' seems not to be used.
< WARNING(4): The function 'dogs' seems not to be used.
< WARNING(6): The variable 'x' seems not to be used.
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 1  If [line: 9]
> .   .   Sibling: 2  While [line: 11]
> .   .   Sibling: 3  For [line: 12]
> .   .   Sibling: 4  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 1  If [line: 9]
> .   .   Sibling: 2  While [line: 11]
> .   .   Sibling: 3  For [line: 12]
> .   .   Sibling: 4  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 1  If [line: 9]
> .   .   Sibling: 2  While [line: 11]
> .   .   Sibling: 3  For [line: 12]
> .   .   Sibling: 4  Compound [line: 13]
8,11c8,11
< .   .   Child: 1  If [line: 9]
< .   .   Sibling: 1  While [line: 11]
< .   .   Sibling: 2  For [line: 12]
< .   .   Sibling: 3  Compound [line: 13]
---
> .   .   Sibling: 1  If [line: 9]
> .   .   Sibling: 2  While [line: 11]
> .   .   Sibling: 3  For [line: 12]
> .   .   Sibling: 4  Compound [line: 13]
