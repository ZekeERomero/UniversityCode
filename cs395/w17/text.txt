Welcome rome9162
cat /y/shared/Engineering/cs-drbc/assignments/w17.txt
Modified Robot Coin Collecting

Consider thsi algorithm:

//Applies dynamic programming to compute the largest number of
//coins a robot can collect on an n × m board by starting at (1, 1)
//and moving right and down from upper left to down right corner
//Input: Matrix C[1..n, 1..m] whose elements are equal to 1 and 0
//for cells with and without a coin, respectively
//Output: Largest number of coins the robot can bring to cell (n, m)
RobotCoinCollection(C[1..n, 1..m])
   F[1, 1]←C[1, 1]; 
   for j ←2 to m do 
      F[1, j]←F[1, j − 1]+ C[1, j]
   for i ←2 to n do
      F[i, 1]←F[i − 1, 1]+ C[i, 1]
      for j ←2 to m do
         F[i, j ]←max(F [i − 1, j], F[i, j − 1]) + C[i, j ]
   return F[n, m]

Modify this algorithm so some cells on the board (indecated by and 'X' are inaccessible for the robot.

The input should be command line arguements in the format Columns Rows <Cell content>*
0 indicates the cell is empty. 1 indicates the cell has a coin in it. X indicates the cell is inexcessable.

for example
./robotCoin 5 6 0 X 0 1 0 0 1 0 0 X 1 0 0 1 0 X 1 0 0 0 0 1 0 1 X X X 0 1 0

Should produce this output:
Board Inputed:
0       X       0       1       0       0
1       0       0       X       1       0
0       1       0       X       1       0
0       0       0       1       0       1
X       X       X       0       1       0

Coin Collecting Table:
0       0       0       0       0       0
1       1       1       0       0       0
1       2       2       0       0       0
1       2       2       3       3       4
0       0       0       3       4       4

The optimal path with this board is: 4

Note: When you print the board, follow each value with a tab:
   printf("%d\t", board[i][j]);
Your header comment is complete at line 5
Your program has 4 functions: 
int main(int argc, char* argv[])
int RobotCoinCollection(int **C, int ***F, int m, int n)
int max(int x1, int x2)
void printArray(int ***matrix, int xSize, int ySize)
*** Well done! Your program passes the syntax checker ***
Running: ./a.out  21 29 0 0 1 1 0 1 1 0 0 1 0 0 0 1 1 0 1 X 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 X 1 1 X 0 1 0 0 0 1 0 X 0 0 0 1 0 0 0 0 1 0 1 0 X 1 1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 0 X 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 X 0 X 1 0 0 0 1 0 0 0 0 0 0 0 0 X 0 0 0 0 X 0 0 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 1 X X 0 X 1 0 0 X 0 X 1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 X 0 0 X 1 0 0 0 0 0 0 1 0 0 0 1 1 X X 0 0 1 0 1 1 0 1 0 0 X 1 1 1 0 1 1 0 0 0 1 0 1 1 X 1 0 1 0 1 0 X 0 0 1 0 1 0 0 0 0 1 0 0 1 0 0 1 1 0 0 X 1 0 0 1 0 X 0 X 0 1 0 1 0 0 0 0 0 0 X X 0 0 0 0 0 0 0 0 1 X 1 1 0 0 X 0 0 0 0 1 0 0 1 X 1 0 0 0 0 X 1 1 1 0 0 0 0 0 0 X 0 0 X 0 0 0 0 0 1 0 0 0 0 0 1 0 X 1 0 0 X 0 0 0 0 0 1 0 0 0 X 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 X 1 0 1 0 1 X X X 0 0 1 X 1 0 1 0 X 1 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 X 0 1 0 0 1 0 0 0 1 X X 0 0 1 0 0 1 X 0 1 X X X 0 0 1 1 X 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 1 0 1 1 1 X 0 1 0 1 1 0 0 1 1 1 X 1 0 0 1 0 0 0 0 0 0 0 1 X 1 1 1 1 X 1 X 1 1 0 0 1 1 X 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 2>&1
Comparing result to: /y/shared/Engineering/cs-drbc/assignments/w17 21 29 0 0 1 1 0 1 1 0 0 1 0 0 0 1 1 0 1 X 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 X 1 1 X 0 1 0 0 0 1 0 X 0 0 0 1 0 0 0 0 1 0 1 0 X 1 1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 0 X 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 X 0 X 1 0 0 0 1 0 0 0 0 0 0 0 0 X 0 0 0 0 X 0 0 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 1 X X 0 X 1 0 0 X 0 X 1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 X 0 0 X 1 0 0 0 0 0 0 1 0 0 0 1 1 X X 0 0 1 0 1 1 0 1 0 0 X 1 1 1 0 1 1 0 0 0 1 0 1 1 X 1 0 1 0 1 0 X 0 0 1 0 1 0 0 0 0 1 0 0 1 0 0 1 1 0 0 X 1 0 0 1 0 X 0 X 0 1 0 1 0 0 0 0 0 0 X X 0 0 0 0 0 0 0 0 1 X 1 1 0 0 X 0 0 0 0 1 0 0 1 X 1 0 0 0 0 X 1 1 1 0 0 0 0 0 0 X 0 0 X 0 0 0 0 0 1 0 0 0 0 0 1 0 X 1 0 0 X 0 0 0 0 0 1 0 0 0 X 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 X 1 0 1 0 1 X X X 0 0 1 X 1 0 1 0 X 1 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 X 0 1 0 0 1 0 0 0 1 X X 0 0 1 0 0 1 X 0 1 X X X 0 0 1 1 X 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 1 0 1 1 1 X 0 1 0 1 1 0 0 1 1 1 X 1 0 0 1 0 0 0 0 0 0 0 1 X 1 1 1 1 X 1 X 1 1 0 0 1 1 X 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 2>&1
Expected 
Board Inputed:
0	0	1	1	0	1	1	0	0	1	0	0	0	1	1	0	1	X	0	0	0	1	1	0	0	1	0	0	1	
0	0	0	0	0	0	0	0	0	0	0	0	1	X	1	1	X	0	1	0	0	0	1	0	X	0	0	0	1	
0	0	0	0	1	0	1	0	X	1	1	0	0	0	0	0	1	0	1	1	0	0	0	1	0	0	0	0	1	
0	0	0	0	X	0	0	0	1	1	0	1	1	0	0	0	1	0	0	1	0	0	0	0	0	0	1	1	X	
0	X	1	0	0	0	1	0	0	0	0	0	0	0	0	X	0	0	0	0	X	0	0	1	0	0	0	1	0	
0	0	1	1	0	1	0	1	1	0	0	1	0	1	0	1	0	0	0	0	0	0	1	0	0	1	X	X	0	
X	1	0	0	X	0	X	1	0	0	0	1	0	0	0	1	1	0	0	0	0	0	X	0	0	X	1	0	0	
0	0	0	0	1	0	0	0	1	1	X	X	0	0	1	0	1	1	0	1	0	0	X	1	1	1	0	1	1	
0	0	0	1	0	1	1	X	1	0	1	0	1	0	X	0	0	1	0	1	0	0	0	0	1	0	0	1	0	
0	1	1	0	0	X	1	0	0	1	0	X	0	X	0	1	0	1	0	0	0	0	0	0	X	X	0	0	0	
0	0	0	0	0	1	X	1	1	0	0	X	0	0	0	0	1	0	0	1	X	1	0	0	0	0	X	1	1	
1	0	0	0	0	0	0	X	0	0	X	0	0	0	0	0	1	0	0	0	0	0	1	0	X	1	0	0	X	
0	0	0	0	0	1	0	0	0	X	0	1	0	0	0	0	0	0	1	0	1	0	0	0	0	0	1	0	1	
0	1	1	1	0	0	0	0	0	0	1	0	0	0	1	0	0	0	1	1	1	1	1	0	0	0	X	1	0	
1	0	1	X	X	X	0	0	1	X	1	0	1	0	X	1	0	1	0	0	1	0	0	1	0	1	0	0	0	
0	0	0	1	0	0	0	1	0	1	0	1	0	0	0	1	0	0	0	0	0	X	0	1	0	0	1	0	0	
0	1	X	X	0	0	1	0	0	1	X	0	1	X	X	X	0	0	1	1	X	0	0	0	0	0	0	0	0	
1	0	1	1	0	0	0	1	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	1	0	1	0	0	
0	0	1	1	0	1	0	1	1	1	0	0	0	1	1	0	0	0	1	0	0	0	0	1	0	1	1	1	X	
0	1	0	1	1	0	0	1	1	1	X	1	0	0	1	0	0	0	0	0	0	0	1	X	1	1	1	1	X	
1	X	1	1	0	0	1	1	X	0	0	1	0	0	0	0	0	0	1	0	0	0	1	0	1	0	0	0	0	

Coin Collecting Table:
0	0	1	2	2	3	4	4	4	5	5	5	5	6	7	7	8	0	0	0	0	0	0	0	0	0	0	0	0	
0	0	1	2	2	3	4	4	4	5	5	5	6	0	8	9	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	0	1	2	3	3	5	5	0	6	7	7	7	7	8	9	10	10	11	12	12	12	12	13	13	13	13	13	14	
0	0	1	2	0	3	5	5	6	7	7	8	9	9	9	9	11	11	11	13	13	13	13	13	13	13	14	15	0	
0	0	2	2	2	3	6	6	6	7	7	8	9	9	9	0	11	11	11	13	0	13	13	14	14	14	14	16	16	
0	0	3	4	4	5	6	7	8	8	8	9	9	10	10	11	11	11	11	13	13	13	14	14	14	15	0	0	16	
0	1	3	4	0	5	0	8	8	8	8	10	10	10	10	12	13	13	13	13	13	13	0	14	14	0	0	0	16	
0	1	3	4	5	5	5	8	9	10	0	0	10	10	11	12	14	15	15	16	16	16	0	15	16	17	17	18	19	
0	1	3	5	5	6	7	0	10	10	11	11	12	12	0	12	14	16	16	17	17	17	17	17	18	18	18	19	19	
0	2	4	5	5	0	8	8	10	11	11	0	12	0	0	13	14	17	17	17	17	17	17	17	0	0	18	19	19	
0	2	4	5	5	6	0	9	11	11	11	0	12	12	12	13	15	17	17	18	0	18	18	18	18	18	0	20	21	
0	2	4	5	5	6	6	0	11	11	0	0	12	12	12	13	16	17	17	18	18	18	19	19	0	19	19	20	0	
0	2	4	5	5	7	7	7	11	0	0	0	12	12	12	13	16	17	18	18	19	19	19	19	19	19	20	20	21	
0	3	5	6	6	7	7	7	11	11	12	12	12	12	13	13	16	17	19	20	21	22	23	23	23	23	0	21	21	
0	3	6	0	0	0	7	7	12	0	13	13	14	14	0	14	16	18	19	20	22	22	23	24	24	25	25	25	25	
0	3	6	7	7	7	7	8	12	13	13	14	14	14	14	15	16	18	19	20	22	0	23	25	25	25	26	26	26	
0	4	0	0	7	7	8	8	12	14	0	14	15	0	0	0	16	18	20	21	0	0	23	25	25	25	26	26	26	
0	4	5	6	7	7	8	9	12	14	14	14	15	15	15	15	17	18	20	21	21	21	23	25	26	26	27	27	27	
0	4	6	7	7	8	8	10	13	15	15	15	15	16	17	17	17	18	21	21	21	21	23	26	26	27	28	29	0	
0	5	6	8	9	9	9	11	14	16	0	16	16	16	18	18	18	18	21	21	21	21	24	0	27	28	29	30	0	
0	0	7	9	9	9	10	12	0	16	16	17	17	17	18	18	18	18	22	22	22	22	25	25	28	28	29	30	30	

The optimal path with this board is: 30

Got 
Board Inputed:
0	0	1	1	0	1	1	0	0	1	0	0	0	1	1	0	1	X	0	0	0	1	1	0	0	1	0	0	1	
0	0	0	0	0	0	0	0	0	0	0	0	1	X	1	1	X	0	1	0	0	0	1	0	X	0	0	0	1	
0	0	0	0	1	0	1	0	X	1	1	0	0	0	0	0	1	0	1	1	0	0	0	1	0	0	0	0	1	
0	0	0	0	X	0	0	0	1	1	0	1	1	0	0	0	1	0	0	1	0	0	0	0	0	0	1	1	X	
0	X	1	0	0	0	1	0	0	0	0	0	0	0	0	X	0	0	0	0	X	0	0	1	0	0	0	1	0	
0	0	1	1	0	1	0	1	1	0	0	1	0	1	0	1	0	0	0	0	0	0	1	0	0	1	X	X	0	
X	1	0	0	X	0	X	1	0	0	0	1	0	0	0	1	1	0	0	0	0	0	X	0	0	X	1	0	0	
0	0	0	0	1	0	0	0	1	1	X	X	0	0	1	0	1	1	0	1	0	0	X	1	1	1	0	1	1	
0	0	0	1	0	1	1	X	1	0	1	0	1	0	X	0	0	1	0	1	0	0	0	0	1	0	0	1	0	
0	1	1	0	0	X	1	0	0	1	0	X	0	X	0	1	0	1	0	0	0	0	0	0	X	X	0	0	0	
0	0	0	0	0	1	X	1	1	0	0	X	0	0	0	0	1	0	0	1	X	1	0	0	0	0	X	1	1	
1	0	0	0	0	0	0	X	0	0	X	0	0	0	0	0	1	0	0	0	0	0	1	0	X	1	0	0	X	
0	0	0	0	0	1	0	0	0	X	0	1	0	0	0	0	0	0	1	0	1	0	0	0	0	0	1	0	1	
0	1	1	1	0	0	0	0	0	0	1	0	0	0	1	0	0	0	1	1	1	1	1	0	0	0	X	1	0	
1	0	1	X	X	X	0	0	1	X	1	0	1	0	X	1	0	1	0	0	1	0	0	1	0	1	0	0	0	
0	0	0	1	0	0	0	1	0	1	0	1	0	0	0	1	0	0	0	0	0	X	0	1	0	0	1	0	0	
0	1	X	X	0	0	1	0	0	1	X	0	1	X	X	X	0	0	1	1	X	0	0	0	0	0	0	0	0	
1	0	1	1	0	0	0	1	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	1	0	1	0	0	
0	0	1	1	0	1	0	1	1	1	0	0	0	1	1	0	0	0	1	0	0	0	0	1	0	1	1	1	X	
0	1	0	1	1	0	0	1	1	1	X	1	0	0	1	0	0	0	0	0	0	0	1	X	1	1	1	1	X	
1	X	1	1	0	0	1	1	X	0	0	1	0	0	0	0	0	0	1	0	0	0	1	0	1	0	0	0	0	

Coin Collecting Table:
0	0	1	2	2	3	4	4	4	5	5	5	5	6	7	7	8	0	0	0	0	0	0	0	0	0	0	0	0	
0	0	1	2	2	3	4	4	4	5	5	5	6	0	8	9	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	0	1	2	3	3	5	5	0	6	7	7	7	7	8	9	10	10	11	12	12	12	12	13	13	13	13	13	14	
0	0	1	2	0	3	5	5	6	7	7	8	9	9	9	9	11	11	11	13	13	13	13	13	13	13	14	15	0	
0	0	2	2	2	3	6	6	6	7	7	8	9	9	9	0	11	11	11	13	0	13	13	14	14	14	14	16	16	
0	0	3	4	4	5	6	7	8	8	8	9	9	10	10	11	11	11	11	13	13	13	14	14	14	15	0	0	16	
0	1	3	4	0	5	0	8	8	8	8	10	10	10	10	12	13	13	13	13	13	13	0	14	14	0	0	0	16	
0	1	3	4	5	5	5	8	9	10	0	0	10	10	11	12	14	15	15	16	16	16	0	15	16	17	17	18	19	
0	1	3	5	5	6	7	0	10	10	11	11	12	12	0	12	14	16	16	17	17	17	17	17	18	18	18	19	19	
0	2	4	5	5	0	8	8	10	11	11	0	12	0	0	13	14	17	17	17	17	17	17	17	0	0	18	19	19	
0	2	4	5	5	6	0	9	11	11	11	0	12	12	12	13	15	17	17	18	0	18	18	18	18	18	0	20	21	
0	2	4	5	5	6	6	0	11	11	0	0	12	12	12	13	16	17	17	18	18	18	19	19	0	19	19	20	0	
0	2	4	5	5	7	7	7	11	0	0	0	12	12	12	13	16	17	18	18	19	19	19	19	19	19	20	20	21	
0	3	5	6	6	7	7	7	11	11	12	12	12	12	13	13	16	17	19	20	21	22	23	23	23	23	0	21	21	
0	3	6	0	0	0	7	7	12	0	13	13	14	14	0	14	16	18	19	20	22	22	23	24	24	25	25	25	25	
0	3	6	7	7	7	7	8	12	13	13	14	14	14	14	15	16	18	19	20	22	0	23	25	25	25	26	26	26	
0	4	0	0	7	7	8	8	12	14	0	14	15	0	0	0	16	18	20	21	0	0	23	25	25	25	26	26	26	
0	4	5	6	7	7	8	9	12	14	14	14	15	15	15	15	17	18	20	21	21	21	23	25	26	26	27	27	27	
0	4	6	7	7	8	8	10	13	15	15	15	15	16	17	17	17	18	21	21	21	21	23	26	26	27	28	29	0	
0	5	6	8	9	9	9	11	14	16	0	16	16	16	18	18	18	18	21	21	21	21	24	0	27	28	29	30	0	
0	0	7	9	9	9	10	12	0	16	16	17	17	17	18	18	18	18	22	22	22	22	25	25	28	28	29	30	30	

Optimal path with this board is: 30

If there is a lot of output, you could narrow down the error by doing a diff:
diff -y <(./a.out  21 29 0 0 1 1 0 1 1 0 0 1 0 0 0 1 1 0 1 X 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 X 1 1 X 0 1 0 0 0 1 0 X 0 0 0 1 0 0 0 0 1 0 1 0 X 1 1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 0 X 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 X 0 X 1 0 0 0 1 0 0 0 0 0 0 0 0 X 0 0 0 0 X 0 0 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 1 X X 0 X 1 0 0 X 0 X 1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 X 0 0 X 1 0 0 0 0 0 0 1 0 0 0 1 1 X X 0 0 1 0 1 1 0 1 0 0 X 1 1 1 0 1 1 0 0 0 1 0 1 1 X 1 0 1 0 1 0 X 0 0 1 0 1 0 0 0 0 1 0 0 1 0 0 1 1 0 0 X 1 0 0 1 0 X 0 X 0 1 0 1 0 0 0 0 0 0 X X 0 0 0 0 0 0 0 0 1 X 1 1 0 0 X 0 0 0 0 1 0 0 1 X 1 0 0 0 0 X 1 1 1 0 0 0 0 0 0 X 0 0 X 0 0 0 0 0 1 0 0 0 0 0 1 0 X 1 0 0 X 0 0 0 0 0 1 0 0 0 X 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 X 1 0 1 0 1 X X X 0 0 1 X 1 0 1 0 X 1 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 X 0 1 0 0 1 0 0 0 1 X X 0 0 1 0 0 1 X 0 1 X X X 0 0 1 1 X 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 1 0 1 1 1 X 0 1 0 1 1 0 0 1 1 1 X 1 0 0 1 0 0 0 0 0 0 0 1 X 1 1 1 1 X 1 X 1 1 0 0 1 1 X 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 2>&1) <(/y/shared/Engineering/cs-drbc/assignments/w17 21 29 0 0 1 1 0 1 1 0 0 1 0 0 0 1 1 0 1 X 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 X 1 1 X 0 1 0 0 0 1 0 X 0 0 0 1 0 0 0 0 1 0 1 0 X 1 1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 0 X 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 X 0 X 1 0 0 0 1 0 0 0 0 0 0 0 0 X 0 0 0 0 X 0 0 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 1 X X 0 X 1 0 0 X 0 X 1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 X 0 0 X 1 0 0 0 0 0 0 1 0 0 0 1 1 X X 0 0 1 0 1 1 0 1 0 0 X 1 1 1 0 1 1 0 0 0 1 0 1 1 X 1 0 1 0 1 0 X 0 0 1 0 1 0 0 0 0 1 0 0 1 0 0 1 1 0 0 X 1 0 0 1 0 X 0 X 0 1 0 1 0 0 0 0 0 0 X X 0 0 0 0 0 0 0 0 1 X 1 1 0 0 X 0 0 0 0 1 0 0 1 X 1 0 0 0 0 X 1 1 1 0 0 0 0 0 0 X 0 0 X 0 0 0 0 0 1 0 0 0 0 0 1 0 X 1 0 0 X 0 0 0 0 0 1 0 0 0 X 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 X 1 0 1 0 1 X X X 0 0 1 X 1 0 1 0 X 1 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 X 0 1 0 0 1 0 0 0 1 X X 0 0 1 0 0 1 X 0 1 X X X 0 0 1 1 X 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 1 0 1 1 1 X 0 1 0 1 1 0 0 1 1 1 X 1 0 0 1 0 0 0 0 0 0 0 1 X 1 1 1 1 X 1 X 1 1 0 0 1 1 X 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 2>&1)
   or
diff  <(./a.out  21 29 0 0 1 1 0 1 1 0 0 1 0 0 0 1 1 0 1 X 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 X 1 1 X 0 1 0 0 0 1 0 X 0 0 0 1 0 0 0 0 1 0 1 0 X 1 1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 0 X 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 X 0 X 1 0 0 0 1 0 0 0 0 0 0 0 0 X 0 0 0 0 X 0 0 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 1 X X 0 X 1 0 0 X 0 X 1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 X 0 0 X 1 0 0 0 0 0 0 1 0 0 0 1 1 X X 0 0 1 0 1 1 0 1 0 0 X 1 1 1 0 1 1 0 0 0 1 0 1 1 X 1 0 1 0 1 0 X 0 0 1 0 1 0 0 0 0 1 0 0 1 0 0 1 1 0 0 X 1 0 0 1 0 X 0 X 0 1 0 1 0 0 0 0 0 0 X X 0 0 0 0 0 0 0 0 1 X 1 1 0 0 X 0 0 0 0 1 0 0 1 X 1 0 0 0 0 X 1 1 1 0 0 0 0 0 0 X 0 0 X 0 0 0 0 0 1 0 0 0 0 0 1 0 X 1 0 0 X 0 0 0 0 0 1 0 0 0 X 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 X 1 0 1 0 1 X X X 0 0 1 X 1 0 1 0 X 1 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 X 0 1 0 0 1 0 0 0 1 X X 0 0 1 0 0 1 X 0 1 X X X 0 0 1 1 X 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 1 0 1 1 1 X 0 1 0 1 1 0 0 1 1 1 X 1 0 0 1 0 0 0 0 0 0 0 1 X 1 1 1 1 X 1 X 1 1 0 0 1 1 X 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 2>&1) <(/y/shared/Engineering/cs-drbc/assignments/w17 21 29 0 0 1 1 0 1 1 0 0 1 0 0 0 1 1 0 1 X 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 X 1 1 X 0 1 0 0 0 1 0 X 0 0 0 1 0 0 0 0 1 0 1 0 X 1 1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 0 X 0 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 X 0 X 1 0 0 0 1 0 0 0 0 0 0 0 0 X 0 0 0 0 X 0 0 1 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 1 X X 0 X 1 0 0 X 0 X 1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 X 0 0 X 1 0 0 0 0 0 0 1 0 0 0 1 1 X X 0 0 1 0 1 1 0 1 0 0 X 1 1 1 0 1 1 0 0 0 1 0 1 1 X 1 0 1 0 1 0 X 0 0 1 0 1 0 0 0 0 1 0 0 1 0 0 1 1 0 0 X 1 0 0 1 0 X 0 X 0 1 0 1 0 0 0 0 0 0 X X 0 0 0 0 0 0 0 0 1 X 1 1 0 0 X 0 0 0 0 1 0 0 1 X 1 0 0 0 0 X 1 1 1 0 0 0 0 0 0 X 0 0 X 0 0 0 0 0 1 0 0 0 0 0 1 0 X 1 0 0 X 0 0 0 0 0 1 0 0 0 X 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 X 1 0 1 0 1 X X X 0 0 1 X 1 0 1 0 X 1 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 X 0 1 0 0 1 0 0 0 1 X X 0 0 1 0 0 1 X 0 1 X X X 0 0 1 1 X 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 1 0 1 1 1 X 0 1 0 1 1 0 0 1 1 1 X 1 0 0 1 0 0 0 0 0 0 0 1 X 1 1 1 1 X 1 X 1 1 0 0 1 1 X 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 2>&1)
Output check failed. Nothing submitted
Welcome rome9162
cat /y/shared/Engineering/cs-drbc/assignments/w17.txt
Modified Robot Coin Collecting

Consider thsi algorithm:

//Applies dynamic programming to compute the largest number of
//coins a robot can collect on an n × m board by starting at (1, 1)
//and moving right and down from upper left to down right corner
//Input: Matrix C[1..n, 1..m] whose elements are equal to 1 and 0
//for cells with and without a coin, respectively
//Output: Largest number of coins the robot can bring to cell (n, m)
RobotCoinCollection(C[1..n, 1..m])
   F[1, 1]←C[1, 1]; 
   for j ←2 to m do 
      F[1, j]←F[1, j − 1]+ C[1, j]
   for i ←2 to n do
      F[i, 1]←F[i − 1, 1]+ C[i, 1]
      for j ←2 to m do
         F[i, j ]←max(F [i − 1, j], F[i, j − 1]) + C[i, j ]
   return F[n, m]

Modify this algorithm so some cells on the board (indecated by and 'X' are inaccessible for the robot.

The input should be command line arguements in the format Columns Rows <Cell content>*
0 indicates the cell is empty. 1 indicates the cell has a coin in it. X indicates the cell is inexcessable.

for example
./robotCoin 5 6 0 X 0 1 0 0 1 0 0 X 1 0 0 1 0 X 1 0 0 0 0 1 0 1 X X X 0 1 0

Should produce this output:
Board Inputed:
0       X       0       1       0       0
1       0       0       X       1       0
0       1       0       X       1       0
0       0       0       1       0       1
X       X       X       0       1       0

Coin Collecting Table:
0       0       0       0       0       0
1       1       1       0       0       0
1       2       2       0       0       0
1       2       2       3       3       4
0       0       0       3       4       4

The optimal path with this board is: 4

Note: When you print the board, follow each value with a tab:
   printf("%d\t", board[i][j]);
Your header comment is complete at line 5
Your program has 4 functions: 
int main(int argc, char* argv[])
int RobotCoinCollection(int **C, int ***F, int m, int n)
int max(int x1, int x2)
void printArray(int ***matrix, int xSize, int ySize)
*** Well done! Your program passes the syntax checker ***
Running: ./a.out  15 15 0 0 0 0 X 1 0 0 0 0 0 0 0 0 1 X 1 0 0 1 0 1 0 0 0 1 0 0 0 X 1 0 0 0 1 1 1 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 1 X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 X 1 1 0 0 0 0 0 1 0 0 0 0 0 0 X 0 0 1 X 0 0 0 0 1 0 0 0 X 1 0 0 X 0 0 0 X 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 1 0 0 1 1 1 0 0 1 0 X 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 X 0 0 0 1 1 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 2>&1
Comparing result to: /y/shared/Engineering/cs-drbc/assignments/w17 15 15 0 0 0 0 X 1 0 0 0 0 0 0 0 0 1 X 1 0 0 1 0 1 0 0 0 1 0 0 0 X 1 0 0 0 1 1 1 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 1 X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 X 1 1 0 0 0 0 0 1 0 0 0 0 0 0 X 0 0 1 X 0 0 0 0 1 0 0 0 X 1 0 0 X 0 0 0 X 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 1 0 0 1 1 1 0 0 1 0 X 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 X 0 0 0 1 1 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 2>&1
Expected 
Board Inputed:
0	0	0	0	X	1	0	0	0	0	0	0	0	0	1	
X	1	0	0	1	0	1	0	0	0	1	0	0	0	X	
1	0	0	0	1	1	1	0	0	0	0	0	1	0	0	
1	0	0	1	1	0	0	1	X	0	0	0	0	0	0	
0	0	0	0	0	0	0	0	1	0	1	0	1	X	1	
1	0	0	0	0	0	1	0	0	0	0	0	0	X	0	
0	1	X	0	0	0	0	1	0	0	0	X	1	0	0	
X	0	0	0	X	0	0	0	1	1	0	0	0	0	1	
0	1	1	0	1	0	0	0	0	0	0	0	1	1	1	
0	1	0	0	1	1	1	0	0	1	0	X	0	0	1	
0	0	1	0	0	1	0	1	0	0	0	0	0	1	0	
0	0	0	0	1	0	0	0	0	1	1	0	0	0	0	
0	0	0	0	0	X	0	0	0	1	1	0	0	1	0	
1	1	1	0	0	1	0	0	1	0	0	1	1	1	0	
0	0	0	0	1	0	1	0	0	0	0	1	1	0	0	

Coin Collecting Table:
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	1	1	1	2	2	3	3	3	3	4	4	4	4	0	
0	1	1	1	3	4	5	5	5	5	5	5	6	6	6	
0	1	1	2	4	4	5	6	0	5	5	5	6	6	6	
0	1	1	2	4	4	5	6	7	7	8	8	9	0	7	
0	1	1	2	4	4	6	6	7	7	8	8	9	0	7	
0	2	0	2	4	4	6	7	7	7	8	0	10	10	10	
0	2	2	2	0	4	6	7	8	9	9	9	10	10	11	
0	3	4	4	5	5	6	7	8	9	9	9	11	12	13	
0	4	4	4	6	7	8	8	8	10	10	0	11	12	14	
0	4	5	5	6	8	8	9	9	10	10	10	11	13	14	
0	4	5	5	7	8	8	9	9	11	12	12	12	13	14	
0	4	5	5	7	0	8	9	9	12	13	13	13	14	14	
0	5	6	6	7	8	8	9	10	12	13	14	15	16	16	
0	5	6	6	8	8	9	9	10	12	13	15	16	16	16	

The optimal path with this board is: 16

Got 
Board Inputed:
0	0	0	0	X	1	0	0	0	0	0	0	0	0	1	
X	1	0	0	1	0	1	0	0	0	1	0	0	0	X	
1	0	0	0	1	1	1	0	0	0	0	0	1	0	0	
1	0	0	1	1	0	0	1	X	0	0	0	0	0	0	
0	0	0	0	0	0	0	0	1	0	1	0	1	X	1	
1	0	0	0	0	0	1	0	0	0	0	0	0	X	0	
0	1	X	0	0	0	0	1	0	0	0	X	1	0	0	
X	0	0	0	X	0	0	0	1	1	0	0	0	0	1	
0	1	1	0	1	0	0	0	0	0	0	0	1	1	1	
0	1	0	0	1	1	1	0	0	1	0	X	0	0	1	
0	0	1	0	0	1	0	1	0	0	0	0	0	1	0	
0	0	0	0	1	0	0	0	0	1	1	0	0	0	0	
0	0	0	0	0	X	0	0	0	1	1	0	0	1	0	
1	1	1	0	0	1	0	0	1	0	0	1	1	1	0	
0	0	0	0	1	0	1	0	0	0	0	1	1	0	0	

Coin Collecting Table:
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
0	1	1	1	2	2	3	3	3	3	4	4	4	4	0	
0	1	1	1	3	4	5	5	5	5	5	5	6	6	6	
0	1	1	2	4	4	5	6	0	5	5	5	6	6	6	
0	1	1	2	4	4	5	6	7	7	8	8	9	0	7	
0	1	1	2	4	4	6	6	7	7	8	8	9	0	7	
0	2	0	2	4	4	6	7	7	7	8	0	10	10	10	
0	2	2	2	0	4	6	7	8	9	9	9	10	10	11	
0	3	4	4	5	5	6	7	8	9	9	9	11	12	13	
0	4	4	4	6	7	8	8	8	10	10	0	11	12	14	
0	4	5	5	6	8	8	9	9	10	10	10	11	13	14	
0	4	5	5	7	8	8	9	9	11	12	12	12	13	14	
0	4	5	5	7	0	8	9	9	12	13	13	13	14	14	
0	5	6	6	7	8	8	9	10	12	13	14	15	16	16	
0	5	6	6	8	8	9	9	10	12	13	15	16	16	16	

Optimal path with this board is: 16

If there is a lot of output, you could narrow down the error by doing a diff:
diff -y <(./a.out  15 15 0 0 0 0 X 1 0 0 0 0 0 0 0 0 1 X 1 0 0 1 0 1 0 0 0 1 0 0 0 X 1 0 0 0 1 1 1 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 1 X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 X 1 1 0 0 0 0 0 1 0 0 0 0 0 0 X 0 0 1 X 0 0 0 0 1 0 0 0 X 1 0 0 X 0 0 0 X 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 1 0 0 1 1 1 0 0 1 0 X 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 X 0 0 0 1 1 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 2>&1) <(/y/shared/Engineering/cs-drbc/assignments/w17 15 15 0 0 0 0 X 1 0 0 0 0 0 0 0 0 1 X 1 0 0 1 0 1 0 0 0 1 0 0 0 X 1 0 0 0 1 1 1 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 1 X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 X 1 1 0 0 0 0 0 1 0 0 0 0 0 0 X 0 0 1 X 0 0 0 0 1 0 0 0 X 1 0 0 X 0 0 0 X 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 1 0 0 1 1 1 0 0 1 0 X 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 X 0 0 0 1 1 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 2>&1)
   or
diff  <(./a.out  15 15 0 0 0 0 X 1 0 0 0 0 0 0 0 0 1 X 1 0 0 1 0 1 0 0 0 1 0 0 0 X 1 0 0 0 1 1 1 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 1 X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 X 1 1 0 0 0 0 0 1 0 0 0 0 0 0 X 0 0 1 X 0 0 0 0 1 0 0 0 X 1 0 0 X 0 0 0 X 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 1 0 0 1 1 1 0 0 1 0 X 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 X 0 0 0 1 1 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 2>&1) <(/y/shared/Engineering/cs-drbc/assignments/w17 15 15 0 0 0 0 X 1 0 0 0 0 0 0 0 0 1 X 1 0 0 1 0 1 0 0 0 1 0 0 0 X 1 0 0 0 1 1 1 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 1 X 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 X 1 1 0 0 0 0 0 1 0 0 0 0 0 0 X 0 0 1 X 0 0 0 0 1 0 0 0 X 1 0 0 X 0 0 0 X 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 1 0 0 1 1 1 0 0 1 0 X 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 X 0 0 0 1 1 0 0 1 0 1 1 1 0 0 1 0 0 1 0 0 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 0 2>&1)
Output check failed. Nothing submitted
